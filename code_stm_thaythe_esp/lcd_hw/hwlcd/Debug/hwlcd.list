
hwlcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bdc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d70  08002d70  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002d70  08002d70  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d70  08002d70  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d74  08002d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000080  08002df8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002df8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f09  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001614  00000000  00000000  00027fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  000295c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00029cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a84  00000000  00000000  0002a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009157  00000000  00000000  00040dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ae6  00000000  00000000  00049f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f80  00000000  00000000  000cba4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cd0 	.word	0x08002cd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002cd0 	.word	0x08002cd0

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd(char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	  char data_u, data_l;
		uint8_t data_t[4];
		data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
		data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
		data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
		data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
		data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
		data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
		HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 f9db 	bl	8001554 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200000ac 	.word	0x200000ac

080001ac <lcd_send_data>:
void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 f9ab 	bl	8001554 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200000ac 	.word	0x200000ac

0800020c <lcd_init>:
void lcd_init (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f000 fd9f 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000216:	2030      	movs	r0, #48	; 0x30
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800021c:	2005      	movs	r0, #5
 800021e:	f000 fd99 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000222:	2030      	movs	r0, #48	; 0x30
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000228:	2001      	movs	r0, #1
 800022a:	f000 fd93 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x30);
 800022e:	2030      	movs	r0, #48	; 0x30
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000234:	200a      	movs	r0, #10
 8000236:	f000 fd8d 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800023a:	2020      	movs	r0, #32
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000240:	200a      	movs	r0, #10
 8000242:	f000 fd87 	bl	8000d54 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000246:	2028      	movs	r0, #40	; 0x28
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f000 fd81 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000252:	2008      	movs	r0, #8
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 fd7b 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800025e:	2001      	movs	r0, #1
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fd75 	bl	8000d54 <HAL_Delay>
	HAL_Delay(1);
 800026a:	2001      	movs	r0, #1
 800026c:	f000 fd72 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000270:	2006      	movs	r0, #6
 8000272:	f7ff ff6b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fd6c 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800027c:	200c      	movs	r0, #12
 800027e:	f7ff ff65 	bl	800014c <lcd_send_cmd>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}

08000286 <lcd_send_string>:
void lcd_send_string (char *str)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800028e:	e006      	b.n	800029e <lcd_send_string+0x18>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	1c5a      	adds	r2, r3, #1
 8000294:	607a      	str	r2, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ff87 	bl	80001ac <lcd_send_data>
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1f4      	bne.n	8000290 <lcd_send_string+0xa>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	switch(row)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d003      	beq.n	80002c8 <lcd_put_cur+0x18>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d005      	beq.n	80002d2 <lcd_put_cur+0x22>
 80002c6:	e009      	b.n	80002dc <lcd_put_cur+0x2c>
	{
	case 0:
		col |= 0x80;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ce:	603b      	str	r3, [r7, #0]
		break;
 80002d0:	e004      	b.n	80002dc <lcd_put_cur+0x2c>
	case 1:
		col |= 0xc0;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002d8:	603b      	str	r3, [r7, #0]
		break;
 80002da:	bf00      	nop
	}
	lcd_send_cmd(col);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff33 	bl	800014c <lcd_send_cmd>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <lcd_clear>:
void lcd_clear(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f7ff ff2a 	bl	800014c <lcd_send_cmd>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <CheckPassWord>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void CheckPassWord()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	if(error < 3)
 8000302:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <CheckPassWord+0xd4>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b02      	cmp	r3, #2
 8000308:	d85d      	bhi.n	80003c6 <CheckPassWord+0xca>
	{
		for( int k = 0; k < 8; k++)
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	e051      	b.n	80003b4 <CheckPassWord+0xb8>
		{
			if( var[k] == password[k])
 8000310:	4a30      	ldr	r2, [pc, #192]	; (80003d4 <CheckPassWord+0xd8>)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	4413      	add	r3, r2
 8000316:	781a      	ldrb	r2, [r3, #0]
 8000318:	492f      	ldr	r1, [pc, #188]	; (80003d8 <CheckPassWord+0xdc>)
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	440b      	add	r3, r1
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	d133      	bne.n	800038c <CheckPassWord+0x90>
			{
				if(k == 7)
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b07      	cmp	r3, #7
 8000328:	d141      	bne.n	80003ae <CheckPassWord+0xb2>
				{
					for(int i = 0; i < 8;i++)
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	e007      	b.n	8000340 <CheckPassWord+0x44>
					{
						var[i] = 10;
 8000330:	4a28      	ldr	r2, [pc, #160]	; (80003d4 <CheckPassWord+0xd8>)
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	4413      	add	r3, r2
 8000336:	220a      	movs	r2, #10
 8000338:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < 8;i++)
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	3301      	adds	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b07      	cmp	r3, #7
 8000344:	ddf4      	ble.n	8000330 <CheckPassWord+0x34>
					}
					count = 0;
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <CheckPassWord+0xe0>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
					error = 0;
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <CheckPassWord+0xd4>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8000352:	f7ff ffcc 	bl	80002ee <lcd_clear>
					HAL_Delay(200);
 8000356:	20c8      	movs	r0, #200	; 0xc8
 8000358:	f000 fcfc 	bl	8000d54 <HAL_Delay>
					lcd_put_cur(0, 3);
 800035c:	2103      	movs	r1, #3
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ffa6 	bl	80002b0 <lcd_put_cur>
					lcd_send_string("mat khau dung");
 8000364:	481e      	ldr	r0, [pc, #120]	; (80003e0 <CheckPassWord+0xe4>)
 8000366:	f7ff ff8e 	bl	8000286 <lcd_send_string>
					HAL_Delay(5000);
 800036a:	f241 3088 	movw	r0, #5000	; 0x1388
 800036e:	f000 fcf1 	bl	8000d54 <HAL_Delay>
					lcd_clear();
 8000372:	f7ff ffbc 	bl	80002ee <lcd_clear>
					HAL_Delay(200);
 8000376:	20c8      	movs	r0, #200	; 0xc8
 8000378:	f000 fcec 	bl	8000d54 <HAL_Delay>
					lcd_put_cur(0, 3);
 800037c:	2103      	movs	r1, #3
 800037e:	2000      	movs	r0, #0
 8000380:	f7ff ff96 	bl	80002b0 <lcd_put_cur>
					lcd_send_string("Nhap mat khau");
 8000384:	4817      	ldr	r0, [pc, #92]	; (80003e4 <CheckPassWord+0xe8>)
 8000386:	f7ff ff7e 	bl	8000286 <lcd_send_string>
 800038a:	e010      	b.n	80003ae <CheckPassWord+0xb2>
				}
			}
			else
			{
				for(int j = 0; j < 8;j++)
 800038c:	2300      	movs	r3, #0
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	e007      	b.n	80003a2 <CheckPassWord+0xa6>
				{
					var[j] = 15;
 8000392:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <CheckPassWord+0xd8>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	220f      	movs	r2, #15
 800039a:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 8;j++)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3301      	adds	r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2b07      	cmp	r3, #7
 80003a6:	ddf4      	ble.n	8000392 <CheckPassWord+0x96>
				}
				count = 0;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <CheckPassWord+0xe0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
		for( int k = 0; k < 8; k++)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3301      	adds	r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	2b07      	cmp	r3, #7
 80003b8:	ddaa      	ble.n	8000310 <CheckPassWord+0x14>
			}
		}
	    error++;
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <CheckPassWord+0xd4>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <CheckPassWord+0xd4>)
 80003c4:	701a      	strb	r2, [r3, #0]
	}
}
 80003c6:	bf00      	nop
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000009d 	.word	0x2000009d
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000008 	.word	0x20000008
 80003dc:	2000009c 	.word	0x2000009c
 80003e0:	08002ce8 	.word	0x08002ce8
 80003e4:	08002cf8 	.word	0x08002cf8

080003e8 <quetbanphim>:
void quetbanphim()
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	// Quet cot 1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	48a6      	ldr	r0, [pc, #664]	; (800068c <quetbanphim+0x2a4>)
 80003f2:	f000 ff52 	bl	800129a <HAL_GPIO_WritePin>
	//cot x hang cot out put hàng input
	test = count;
 80003f6:	4ba6      	ldr	r3, [pc, #664]	; (8000690 <quetbanphim+0x2a8>)
 80003f8:	781a      	ldrb	r2, [r3, #0]
 80003fa:	4ba6      	ldr	r3, [pc, #664]	; (8000694 <quetbanphim+0x2ac>)
 80003fc:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 80003fe:	2108      	movs	r1, #8
 8000400:	48a2      	ldr	r0, [pc, #648]	; (800068c <quetbanphim+0x2a4>)
 8000402:	f000 ff33 	bl	800126c <HAL_GPIO_ReadPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d114      	bne.n	8000436 <quetbanphim+0x4e>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0);
 800040c:	bf00      	nop
 800040e:	2108      	movs	r1, #8
 8000410:	489e      	ldr	r0, [pc, #632]	; (800068c <quetbanphim+0x2a4>)
 8000412:	f000 ff2b 	bl	800126c <HAL_GPIO_ReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0f8      	beq.n	800040e <quetbanphim+0x26>
		var[count] = 1;
 800041c:	4b9c      	ldr	r3, [pc, #624]	; (8000690 <quetbanphim+0x2a8>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	4b9d      	ldr	r3, [pc, #628]	; (8000698 <quetbanphim+0x2b0>)
 8000424:	2101      	movs	r1, #1
 8000426:	5499      	strb	r1, [r3, r2]
		count++;
 8000428:	4b99      	ldr	r3, [pc, #612]	; (8000690 <quetbanphim+0x2a8>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b97      	ldr	r3, [pc, #604]	; (8000690 <quetbanphim+0x2a8>)
 8000432:	701a      	strb	r2, [r3, #0]
 8000434:	e052      	b.n	80004dc <quetbanphim+0xf4>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000436:	2104      	movs	r1, #4
 8000438:	4894      	ldr	r0, [pc, #592]	; (800068c <quetbanphim+0x2a4>)
 800043a:	f000 ff17 	bl	800126c <HAL_GPIO_ReadPin>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d114      	bne.n	800046e <quetbanphim+0x86>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0);
 8000444:	bf00      	nop
 8000446:	2104      	movs	r1, #4
 8000448:	4890      	ldr	r0, [pc, #576]	; (800068c <quetbanphim+0x2a4>)
 800044a:	f000 ff0f 	bl	800126c <HAL_GPIO_ReadPin>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f8      	beq.n	8000446 <quetbanphim+0x5e>
		var[count] = 4;
 8000454:	4b8e      	ldr	r3, [pc, #568]	; (8000690 <quetbanphim+0x2a8>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b8f      	ldr	r3, [pc, #572]	; (8000698 <quetbanphim+0x2b0>)
 800045c:	2104      	movs	r1, #4
 800045e:	5499      	strb	r1, [r3, r2]
		count++;
 8000460:	4b8b      	ldr	r3, [pc, #556]	; (8000690 <quetbanphim+0x2a8>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	b2da      	uxtb	r2, r3
 8000468:	4b89      	ldr	r3, [pc, #548]	; (8000690 <quetbanphim+0x2a8>)
 800046a:	701a      	strb	r2, [r3, #0]
 800046c:	e036      	b.n	80004dc <quetbanphim+0xf4>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800046e:	2102      	movs	r1, #2
 8000470:	4886      	ldr	r0, [pc, #536]	; (800068c <quetbanphim+0x2a4>)
 8000472:	f000 fefb 	bl	800126c <HAL_GPIO_ReadPin>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d114      	bne.n	80004a6 <quetbanphim+0xbe>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 800047c:	bf00      	nop
 800047e:	2102      	movs	r1, #2
 8000480:	4882      	ldr	r0, [pc, #520]	; (800068c <quetbanphim+0x2a4>)
 8000482:	f000 fef3 	bl	800126c <HAL_GPIO_ReadPin>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f8      	beq.n	800047e <quetbanphim+0x96>
		var[count] = 7;
 800048c:	4b80      	ldr	r3, [pc, #512]	; (8000690 <quetbanphim+0x2a8>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	4b81      	ldr	r3, [pc, #516]	; (8000698 <quetbanphim+0x2b0>)
 8000494:	2107      	movs	r1, #7
 8000496:	5499      	strb	r1, [r3, r2]
		count++;
 8000498:	4b7d      	ldr	r3, [pc, #500]	; (8000690 <quetbanphim+0x2a8>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b7b      	ldr	r3, [pc, #492]	; (8000690 <quetbanphim+0x2a8>)
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e01a      	b.n	80004dc <quetbanphim+0xf4>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 80004a6:	2101      	movs	r1, #1
 80004a8:	4878      	ldr	r0, [pc, #480]	; (800068c <quetbanphim+0x2a4>)
 80004aa:	f000 fedf 	bl	800126c <HAL_GPIO_ReadPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d113      	bne.n	80004dc <quetbanphim+0xf4>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0);
 80004b4:	bf00      	nop
 80004b6:	2101      	movs	r1, #1
 80004b8:	4874      	ldr	r0, [pc, #464]	; (800068c <quetbanphim+0x2a4>)
 80004ba:	f000 fed7 	bl	800126c <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d0f8      	beq.n	80004b6 <quetbanphim+0xce>
		count--;
 80004c4:	4b72      	ldr	r3, [pc, #456]	; (8000690 <quetbanphim+0x2a8>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	4b70      	ldr	r3, [pc, #448]	; (8000690 <quetbanphim+0x2a8>)
 80004ce:	701a      	strb	r2, [r3, #0]
		var[count] = 15;
 80004d0:	4b6f      	ldr	r3, [pc, #444]	; (8000690 <quetbanphim+0x2a8>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b70      	ldr	r3, [pc, #448]	; (8000698 <quetbanphim+0x2b0>)
 80004d8:	210f      	movs	r1, #15
 80004da:	5499      	strb	r1, [r3, r2]
	}
	// Quet cot 2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	486a      	ldr	r0, [pc, #424]	; (800068c <quetbanphim+0x2a4>)
 80004e2:	f000 feda 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	4868      	ldr	r0, [pc, #416]	; (800068c <quetbanphim+0x2a4>)
 80004ec:	f000 fed5 	bl	800129a <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 80004f0:	2108      	movs	r1, #8
 80004f2:	4866      	ldr	r0, [pc, #408]	; (800068c <quetbanphim+0x2a4>)
 80004f4:	f000 feba 	bl	800126c <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d114      	bne.n	8000528 <quetbanphim+0x140>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0);
 80004fe:	bf00      	nop
 8000500:	2108      	movs	r1, #8
 8000502:	4862      	ldr	r0, [pc, #392]	; (800068c <quetbanphim+0x2a4>)
 8000504:	f000 feb2 	bl	800126c <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f8      	beq.n	8000500 <quetbanphim+0x118>
		var[count] = 2;
 800050e:	4b60      	ldr	r3, [pc, #384]	; (8000690 <quetbanphim+0x2a8>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	461a      	mov	r2, r3
 8000514:	4b60      	ldr	r3, [pc, #384]	; (8000698 <quetbanphim+0x2b0>)
 8000516:	2102      	movs	r1, #2
 8000518:	5499      	strb	r1, [r3, r2]
		count++;
 800051a:	4b5d      	ldr	r3, [pc, #372]	; (8000690 <quetbanphim+0x2a8>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	3301      	adds	r3, #1
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b5b      	ldr	r3, [pc, #364]	; (8000690 <quetbanphim+0x2a8>)
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e052      	b.n	80005ce <quetbanphim+0x1e6>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000528:	2104      	movs	r1, #4
 800052a:	4858      	ldr	r0, [pc, #352]	; (800068c <quetbanphim+0x2a4>)
 800052c:	f000 fe9e 	bl	800126c <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d114      	bne.n	8000560 <quetbanphim+0x178>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0);
 8000536:	bf00      	nop
 8000538:	2104      	movs	r1, #4
 800053a:	4854      	ldr	r0, [pc, #336]	; (800068c <quetbanphim+0x2a4>)
 800053c:	f000 fe96 	bl	800126c <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f8      	beq.n	8000538 <quetbanphim+0x150>
		var[count] = 5;
 8000546:	4b52      	ldr	r3, [pc, #328]	; (8000690 <quetbanphim+0x2a8>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	461a      	mov	r2, r3
 800054c:	4b52      	ldr	r3, [pc, #328]	; (8000698 <quetbanphim+0x2b0>)
 800054e:	2105      	movs	r1, #5
 8000550:	5499      	strb	r1, [r3, r2]
		count++;
 8000552:	4b4f      	ldr	r3, [pc, #316]	; (8000690 <quetbanphim+0x2a8>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b4d      	ldr	r3, [pc, #308]	; (8000690 <quetbanphim+0x2a8>)
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	e036      	b.n	80005ce <quetbanphim+0x1e6>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000560:	2102      	movs	r1, #2
 8000562:	484a      	ldr	r0, [pc, #296]	; (800068c <quetbanphim+0x2a4>)
 8000564:	f000 fe82 	bl	800126c <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d114      	bne.n	8000598 <quetbanphim+0x1b0>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 800056e:	bf00      	nop
 8000570:	2102      	movs	r1, #2
 8000572:	4846      	ldr	r0, [pc, #280]	; (800068c <quetbanphim+0x2a4>)
 8000574:	f000 fe7a 	bl	800126c <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f8      	beq.n	8000570 <quetbanphim+0x188>
		var[count] = 8;
 800057e:	4b44      	ldr	r3, [pc, #272]	; (8000690 <quetbanphim+0x2a8>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	4b44      	ldr	r3, [pc, #272]	; (8000698 <quetbanphim+0x2b0>)
 8000586:	2108      	movs	r1, #8
 8000588:	5499      	strb	r1, [r3, r2]
		count++;
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <quetbanphim+0x2a8>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b3f      	ldr	r3, [pc, #252]	; (8000690 <quetbanphim+0x2a8>)
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	e01a      	b.n	80005ce <quetbanphim+0x1e6>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000598:	2101      	movs	r1, #1
 800059a:	483c      	ldr	r0, [pc, #240]	; (800068c <quetbanphim+0x2a4>)
 800059c:	f000 fe66 	bl	800126c <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d113      	bne.n	80005ce <quetbanphim+0x1e6>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0);
 80005a6:	bf00      	nop
 80005a8:	2101      	movs	r1, #1
 80005aa:	4838      	ldr	r0, [pc, #224]	; (800068c <quetbanphim+0x2a4>)
 80005ac:	f000 fe5e 	bl	800126c <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f8      	beq.n	80005a8 <quetbanphim+0x1c0>
		count++;
 80005b6:	4b36      	ldr	r3, [pc, #216]	; (8000690 <quetbanphim+0x2a8>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b34      	ldr	r3, [pc, #208]	; (8000690 <quetbanphim+0x2a8>)
 80005c0:	701a      	strb	r2, [r3, #0]
		var[count] = 0;
 80005c2:	4b33      	ldr	r3, [pc, #204]	; (8000690 <quetbanphim+0x2a8>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b33      	ldr	r3, [pc, #204]	; (8000698 <quetbanphim+0x2b0>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	5499      	strb	r1, [r3, r2]
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2140      	movs	r1, #64	; 0x40
 80005d2:	482e      	ldr	r0, [pc, #184]	; (800068c <quetbanphim+0x2a4>)
 80005d4:	f000 fe61 	bl	800129a <HAL_GPIO_WritePin>

	//quet cot 3
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2120      	movs	r1, #32
 80005dc:	482b      	ldr	r0, [pc, #172]	; (800068c <quetbanphim+0x2a4>)
 80005de:	f000 fe5c 	bl	800129a <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 80005e2:	2108      	movs	r1, #8
 80005e4:	4829      	ldr	r0, [pc, #164]	; (800068c <quetbanphim+0x2a4>)
 80005e6:	f000 fe41 	bl	800126c <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d114      	bne.n	800061a <quetbanphim+0x232>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0);
 80005f0:	bf00      	nop
 80005f2:	2108      	movs	r1, #8
 80005f4:	4825      	ldr	r0, [pc, #148]	; (800068c <quetbanphim+0x2a4>)
 80005f6:	f000 fe39 	bl	800126c <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0f8      	beq.n	80005f2 <quetbanphim+0x20a>
		var[count] = 3;
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <quetbanphim+0x2a8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <quetbanphim+0x2b0>)
 8000608:	2103      	movs	r1, #3
 800060a:	5499      	strb	r1, [r3, r2]
		count++;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <quetbanphim+0x2a8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <quetbanphim+0x2a8>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e057      	b.n	80006ca <quetbanphim+0x2e2>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 800061a:	2104      	movs	r1, #4
 800061c:	481b      	ldr	r0, [pc, #108]	; (800068c <quetbanphim+0x2a4>)
 800061e:	f000 fe25 	bl	800126c <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d114      	bne.n	8000652 <quetbanphim+0x26a>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0);
 8000628:	bf00      	nop
 800062a:	2104      	movs	r1, #4
 800062c:	4817      	ldr	r0, [pc, #92]	; (800068c <quetbanphim+0x2a4>)
 800062e:	f000 fe1d 	bl	800126c <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0f8      	beq.n	800062a <quetbanphim+0x242>
		var[count] = 6;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <quetbanphim+0x2a8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <quetbanphim+0x2b0>)
 8000640:	2106      	movs	r1, #6
 8000642:	5499      	strb	r1, [r3, r2]
		count++;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <quetbanphim+0x2a8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <quetbanphim+0x2a8>)
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e03b      	b.n	80006ca <quetbanphim+0x2e2>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000652:	2102      	movs	r1, #2
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <quetbanphim+0x2a4>)
 8000656:	f000 fe09 	bl	800126c <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d11d      	bne.n	800069c <quetbanphim+0x2b4>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 8000660:	bf00      	nop
 8000662:	2102      	movs	r1, #2
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <quetbanphim+0x2a4>)
 8000666:	f000 fe01 	bl	800126c <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f8      	beq.n	8000662 <quetbanphim+0x27a>
		var[count] = 9;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <quetbanphim+0x2a8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <quetbanphim+0x2b0>)
 8000678:	2109      	movs	r1, #9
 800067a:	5499      	strb	r1, [r3, r2]
		count++;
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <quetbanphim+0x2a8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <quetbanphim+0x2a8>)
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e01f      	b.n	80006ca <quetbanphim+0x2e2>
 800068a:	bf00      	nop
 800068c:	40010800 	.word	0x40010800
 8000690:	2000009c 	.word	0x2000009c
 8000694:	2000009e 	.word	0x2000009e
 8000698:	20000000 	.word	0x20000000
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 800069c:	2101      	movs	r1, #1
 800069e:	486a      	ldr	r0, [pc, #424]	; (8000848 <quetbanphim+0x460>)
 80006a0:	f000 fde4 	bl	800126c <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10f      	bne.n	80006ca <quetbanphim+0x2e2>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0);
 80006aa:	bf00      	nop
 80006ac:	2101      	movs	r1, #1
 80006ae:	4866      	ldr	r0, [pc, #408]	; (8000848 <quetbanphim+0x460>)
 80006b0:	f000 fddc 	bl	800126c <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f8      	beq.n	80006ac <quetbanphim+0x2c4>
		count++;
 80006ba:	4b64      	ldr	r3, [pc, #400]	; (800084c <quetbanphim+0x464>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b62      	ldr	r3, [pc, #392]	; (800084c <quetbanphim+0x464>)
 80006c4:	701a      	strb	r2, [r3, #0]
		CheckPassWord();
 80006c6:	f7ff fe19 	bl	80002fc <CheckPassWord>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2120      	movs	r1, #32
 80006ce:	485e      	ldr	r0, [pc, #376]	; (8000848 <quetbanphim+0x460>)
 80006d0:	f000 fde3 	bl	800129a <HAL_GPIO_WritePin>
	// quét cột 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	485b      	ldr	r0, [pc, #364]	; (8000848 <quetbanphim+0x460>)
 80006da:	f000 fdde 	bl	800129a <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 80006de:	2108      	movs	r1, #8
 80006e0:	4859      	ldr	r0, [pc, #356]	; (8000848 <quetbanphim+0x460>)
 80006e2:	f000 fdc3 	bl	800126c <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d114      	bne.n	8000716 <quetbanphim+0x32e>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0);
 80006ec:	bf00      	nop
 80006ee:	2108      	movs	r1, #8
 80006f0:	4855      	ldr	r0, [pc, #340]	; (8000848 <quetbanphim+0x460>)
 80006f2:	f000 fdbb 	bl	800126c <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <quetbanphim+0x306>
		var[count] = 11;
 80006fc:	4b53      	ldr	r3, [pc, #332]	; (800084c <quetbanphim+0x464>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b53      	ldr	r3, [pc, #332]	; (8000850 <quetbanphim+0x468>)
 8000704:	210b      	movs	r1, #11
 8000706:	5499      	strb	r1, [r3, r2]
		count++;
 8000708:	4b50      	ldr	r3, [pc, #320]	; (800084c <quetbanphim+0x464>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b4e      	ldr	r3, [pc, #312]	; (800084c <quetbanphim+0x464>)
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e052      	b.n	80007bc <quetbanphim+0x3d4>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000716:	2104      	movs	r1, #4
 8000718:	484b      	ldr	r0, [pc, #300]	; (8000848 <quetbanphim+0x460>)
 800071a:	f000 fda7 	bl	800126c <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d114      	bne.n	800074e <quetbanphim+0x366>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0);
 8000724:	bf00      	nop
 8000726:	2104      	movs	r1, #4
 8000728:	4847      	ldr	r0, [pc, #284]	; (8000848 <quetbanphim+0x460>)
 800072a:	f000 fd9f 	bl	800126c <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0f8      	beq.n	8000726 <quetbanphim+0x33e>
		var[count] = 12;
 8000734:	4b45      	ldr	r3, [pc, #276]	; (800084c <quetbanphim+0x464>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b45      	ldr	r3, [pc, #276]	; (8000850 <quetbanphim+0x468>)
 800073c:	210c      	movs	r1, #12
 800073e:	5499      	strb	r1, [r3, r2]
		count++;
 8000740:	4b42      	ldr	r3, [pc, #264]	; (800084c <quetbanphim+0x464>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b40      	ldr	r3, [pc, #256]	; (800084c <quetbanphim+0x464>)
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e036      	b.n	80007bc <quetbanphim+0x3d4>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800074e:	2102      	movs	r1, #2
 8000750:	483d      	ldr	r0, [pc, #244]	; (8000848 <quetbanphim+0x460>)
 8000752:	f000 fd8b 	bl	800126c <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d114      	bne.n	8000786 <quetbanphim+0x39e>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 800075c:	bf00      	nop
 800075e:	2102      	movs	r1, #2
 8000760:	4839      	ldr	r0, [pc, #228]	; (8000848 <quetbanphim+0x460>)
 8000762:	f000 fd83 	bl	800126c <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0f8      	beq.n	800075e <quetbanphim+0x376>
		var[count] = 13;
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <quetbanphim+0x464>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b37      	ldr	r3, [pc, #220]	; (8000850 <quetbanphim+0x468>)
 8000774:	210d      	movs	r1, #13
 8000776:	5499      	strb	r1, [r3, r2]
		count++;
 8000778:	4b34      	ldr	r3, [pc, #208]	; (800084c <quetbanphim+0x464>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <quetbanphim+0x464>)
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e01a      	b.n	80007bc <quetbanphim+0x3d4>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000786:	2101      	movs	r1, #1
 8000788:	482f      	ldr	r0, [pc, #188]	; (8000848 <quetbanphim+0x460>)
 800078a:	f000 fd6f 	bl	800126c <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d113      	bne.n	80007bc <quetbanphim+0x3d4>
	{
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0);
 8000794:	bf00      	nop
 8000796:	2101      	movs	r1, #1
 8000798:	482b      	ldr	r0, [pc, #172]	; (8000848 <quetbanphim+0x460>)
 800079a:	f000 fd67 	bl	800126c <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0f8      	beq.n	8000796 <quetbanphim+0x3ae>
		var[count] = 14;
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <quetbanphim+0x464>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <quetbanphim+0x468>)
 80007ac:	210e      	movs	r1, #14
 80007ae:	5499      	strb	r1, [r3, r2]
		count++;
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <quetbanphim+0x464>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <quetbanphim+0x464>)
 80007ba:	701a      	strb	r2, [r3, #0]
	}
	if(test < count)
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <quetbanphim+0x46c>)
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <quetbanphim+0x464>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d214      	bcs.n	80007f2 <quetbanphim+0x40a>
	{
		sprintf(buffer,"%d",var[count-1]);
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <quetbanphim+0x464>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a20      	ldr	r2, [pc, #128]	; (8000850 <quetbanphim+0x468>)
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	461a      	mov	r2, r3
 80007d4:	4920      	ldr	r1, [pc, #128]	; (8000858 <quetbanphim+0x470>)
 80007d6:	4821      	ldr	r0, [pc, #132]	; (800085c <quetbanphim+0x474>)
 80007d8:	f001 fe40 	bl	800245c <siprintf>
		lcd_put_cur(1, count + 2);
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <quetbanphim+0x464>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3302      	adds	r3, #2
 80007e2:	4619      	mov	r1, r3
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fd63 	bl	80002b0 <lcd_put_cur>
		lcd_send_string(buffer);
 80007ea:	481c      	ldr	r0, [pc, #112]	; (800085c <quetbanphim+0x474>)
 80007ec:	f7ff fd4b 	bl	8000286 <lcd_send_string>
 80007f0:	e00f      	b.n	8000812 <quetbanphim+0x42a>
	}
	else if (test > count)
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <quetbanphim+0x46c>)
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <quetbanphim+0x464>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d909      	bls.n	8000812 <quetbanphim+0x42a>
	{
		lcd_put_cur(1, count + 3);
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <quetbanphim+0x464>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3303      	adds	r3, #3
 8000804:	4619      	mov	r1, r3
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff fd52 	bl	80002b0 <lcd_put_cur>
		lcd_send_string(" ");
 800080c:	4814      	ldr	r0, [pc, #80]	; (8000860 <quetbanphim+0x478>)
 800080e:	f7ff fd3a 	bl	8000286 <lcd_send_string>
	}
	if(count == 9){
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <quetbanphim+0x464>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b09      	cmp	r3, #9
 8000818:	d10f      	bne.n	800083a <quetbanphim+0x452>
		count = 0;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <quetbanphim+0x464>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8000820:	f7ff fd65 	bl	80002ee <lcd_clear>
		HAL_Delay(1000);
 8000824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000828:	f000 fa94 	bl	8000d54 <HAL_Delay>
		lcd_put_cur(0, 3);
 800082c:	2103      	movs	r1, #3
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fd3e 	bl	80002b0 <lcd_put_cur>
		lcd_send_string("Nhap mat khau");
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <quetbanphim+0x47c>)
 8000836:	f7ff fd26 	bl	8000286 <lcd_send_string>

	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	2110      	movs	r1, #16
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <quetbanphim+0x460>)
 8000840:	f000 fd2b 	bl	800129a <HAL_GPIO_WritePin>


}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40010800 	.word	0x40010800
 800084c:	2000009c 	.word	0x2000009c
 8000850:	20000000 	.word	0x20000000
 8000854:	2000009e 	.word	0x2000009e
 8000858:	08002d08 	.word	0x08002d08
 800085c:	20000100 	.word	0x20000100
 8000860:	08002d0c 	.word	0x08002d0c
 8000864:	08002cf8 	.word	0x08002cf8

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f000 fa10 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f000 f822 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f000 f894 	bl	80009a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000878:	f000 f864 	bl	8000944 <MX_I2C1_Init>
  lcd_init();
 800087c:	f7ff fcc6 	bl	800020c <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_put_cur(0, 3);
 8000880:	2103      	movs	r1, #3
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fd14 	bl	80002b0 <lcd_put_cur>
  lcd_send_string("Nhap mat khau");
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <main+0x48>)
 800088a:	f7ff fcfc 	bl	8000286 <lcd_send_string>
  HAL_Delay(1000);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f000 fa5f 	bl	8000d54 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_13, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <main+0x4c>)
 800089e:	f000 fcfc 	bl	800129a <HAL_GPIO_WritePin>
	  quetbanphim();
 80008a2:	f7ff fda1 	bl	80003e8 <quetbanphim>
	  HAL_Delay(100);
 80008a6:	2064      	movs	r0, #100	; 0x64
 80008a8:	f000 fa54 	bl	8000d54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_13, 0);
 80008ac:	e7f3      	b.n	8000896 <main+0x2e>
 80008ae:	bf00      	nop
 80008b0:	08002cf8 	.word	0x08002cf8
 80008b4:	40011000 	.word	0x40011000

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b090      	sub	sp, #64	; 0x40
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	2228      	movs	r2, #40	; 0x28
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fdc0 	bl	800244c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4618      	mov	r0, r3
 8000902:	f001 f97f 	bl	8001c04 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800090c:	f000 f8c0 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2102      	movs	r1, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fbea 	bl	8002104 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000936:	f000 f8ab 	bl	8000a90 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3740      	adds	r7, #64	; 0x40
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_I2C1_Init+0x50>)
 800094a:	4a13      	ldr	r2, [pc, #76]	; (8000998 <MX_I2C1_Init+0x54>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_I2C1_Init+0x50>)
 8000950:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_I2C1_Init+0x58>)
 8000952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_I2C1_Init+0x50>)
 8000962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_I2C1_Init+0x50>)
 8000982:	f000 fca3 	bl	80012cc <HAL_I2C_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800098c:	f000 f880 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000ac 	.word	0x200000ac
 8000998:	40005400 	.word	0x40005400
 800099c:	000186a0 	.word	0x000186a0

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_GPIO_Init+0xe4>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <MX_GPIO_Init+0xe4>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xe4>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1a:	481b      	ldr	r0, [pc, #108]	; (8000a88 <MX_GPIO_Init+0xe8>)
 8000a1c:	f000 fc3d 	bl	800129a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	21f0      	movs	r1, #240	; 0xf0
 8000a24:	4819      	ldr	r0, [pc, #100]	; (8000a8c <MX_GPIO_Init+0xec>)
 8000a26:	f000 fc38 	bl	800129a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_GPIO_Init+0xe8>)
 8000a44:	f000 fa8e 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a48:	230f      	movs	r3, #15
 8000a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xec>)
 8000a5c:	f000 fa82 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a60:	23f0      	movs	r3, #240	; 0xf0
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_GPIO_Init+0xec>)
 8000a78:	f000 fa74 	bl	8000f64 <HAL_GPIO_Init>

}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40011000 	.word	0x40011000
 8000a8c:	40010800 	.word	0x40010800

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_MspInit+0x5c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <HAL_MspInit+0x5c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x5c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_MspInit+0x60>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_MspInit+0x60>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010000 	.word	0x40010000

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <HAL_I2C_MspInit+0x70>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d123      	bne.n	8000b68 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_I2C_MspInit+0x74>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_I2C_MspInit+0x74>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_I2C_MspInit+0x74>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0308 	and.w	r3, r3, #8
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b38:	23c0      	movs	r3, #192	; 0xc0
 8000b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <HAL_I2C_MspInit+0x78>)
 8000b4c:	f000 fa0a 	bl	8000f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_I2C_MspInit+0x74>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_I2C_MspInit+0x74>)
 8000b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b5a:	61d3      	str	r3, [r2, #28]
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_I2C_MspInit+0x74>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010c00 	.word	0x40010c00

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f8ab 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f001 fbfc 	bl	80023f8 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20005000 	.word	0x20005000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	200000a0 	.word	0x200000a0
 8000c34:	20000120 	.word	0x20000120

08000c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c44:	f7ff fff8 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c4a:	490c      	ldr	r1, [pc, #48]	; (8000c7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c60:	4c09      	ldr	r4, [pc, #36]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f001 fbc9 	bl	8002404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c72:	f7ff fdf9 	bl	8000868 <main>
  bx lr
 8000c76:	4770      	bx	lr
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c80:	08002d78 	.word	0x08002d78
  ldr r2, =_sbss
 8000c84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c88:	2000011c 	.word	0x2000011c

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x28>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x28>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f92b 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fef6 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f935 	bl	8000f4a <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f90b 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000010 	.word	0x20000010
 8000d14:	20000018 	.word	0x20000018
 8000d18:	20000014 	.word	0x20000014

08000d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_IncTick+0x1c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x20>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a03      	ldr	r2, [pc, #12]	; (8000d3c <HAL_IncTick+0x20>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000018 	.word	0x20000018
 8000d3c:	20000108 	.word	0x20000108

08000d40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <HAL_GetTick+0x10>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	20000108 	.word	0x20000108

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff fff0 	bl	8000d40 <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffe0 	bl	8000d40 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000018 	.word	0x20000018

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff49 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5e 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b08b      	sub	sp, #44	; 0x2c
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e169      	b.n	800124c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 8158 	bne.w	8001246 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a9a      	ldr	r2, [pc, #616]	; (8001204 <HAL_GPIO_Init+0x2a0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d05e      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fa0:	4a98      	ldr	r2, [pc, #608]	; (8001204 <HAL_GPIO_Init+0x2a0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d875      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fa6:	4a98      	ldr	r2, [pc, #608]	; (8001208 <HAL_GPIO_Init+0x2a4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d058      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fac:	4a96      	ldr	r2, [pc, #600]	; (8001208 <HAL_GPIO_Init+0x2a4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d86f      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fb2:	4a96      	ldr	r2, [pc, #600]	; (800120c <HAL_GPIO_Init+0x2a8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d052      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fb8:	4a94      	ldr	r2, [pc, #592]	; (800120c <HAL_GPIO_Init+0x2a8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d869      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fbe:	4a94      	ldr	r2, [pc, #592]	; (8001210 <HAL_GPIO_Init+0x2ac>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d04c      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fc4:	4a92      	ldr	r2, [pc, #584]	; (8001210 <HAL_GPIO_Init+0x2ac>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d863      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fca:	4a92      	ldr	r2, [pc, #584]	; (8001214 <HAL_GPIO_Init+0x2b0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d046      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fd0:	4a90      	ldr	r2, [pc, #576]	; (8001214 <HAL_GPIO_Init+0x2b0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d85d      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d82a      	bhi.n	8001030 <HAL_GPIO_Init+0xcc>
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	d859      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fde:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <HAL_GPIO_Init+0x80>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	0800105f 	.word	0x0800105f
 8000fe8:	08001039 	.word	0x08001039
 8000fec:	0800104b 	.word	0x0800104b
 8000ff0:	0800108d 	.word	0x0800108d
 8000ff4:	08001093 	.word	0x08001093
 8000ff8:	08001093 	.word	0x08001093
 8000ffc:	08001093 	.word	0x08001093
 8001000:	08001093 	.word	0x08001093
 8001004:	08001093 	.word	0x08001093
 8001008:	08001093 	.word	0x08001093
 800100c:	08001093 	.word	0x08001093
 8001010:	08001093 	.word	0x08001093
 8001014:	08001093 	.word	0x08001093
 8001018:	08001093 	.word	0x08001093
 800101c:	08001093 	.word	0x08001093
 8001020:	08001093 	.word	0x08001093
 8001024:	08001093 	.word	0x08001093
 8001028:	08001041 	.word	0x08001041
 800102c:	08001055 	.word	0x08001055
 8001030:	4a79      	ldr	r2, [pc, #484]	; (8001218 <HAL_GPIO_Init+0x2b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001036:	e02c      	b.n	8001092 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e029      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	3304      	adds	r3, #4
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e024      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	3308      	adds	r3, #8
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e01f      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	330c      	adds	r3, #12
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e01a      	b.n	8001094 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001066:	2304      	movs	r3, #4
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e013      	b.n	8001094 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001074:	2308      	movs	r3, #8
 8001076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	611a      	str	r2, [r3, #16]
          break;
 800107e:	e009      	b.n	8001094 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	615a      	str	r2, [r3, #20]
          break;
 800108a:	e003      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x130>
          break;
 8001092:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d801      	bhi.n	800109e <HAL_GPIO_Init+0x13a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	e001      	b.n	80010a2 <HAL_GPIO_Init+0x13e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3304      	adds	r3, #4
 80010a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2bff      	cmp	r3, #255	; 0xff
 80010a8:	d802      	bhi.n	80010b0 <HAL_GPIO_Init+0x14c>
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	e002      	b.n	80010b6 <HAL_GPIO_Init+0x152>
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	3b08      	subs	r3, #8
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	210f      	movs	r1, #15
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	6a39      	ldr	r1, [r7, #32]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80b1 	beq.w	8001246 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e4:	4b4d      	ldr	r3, [pc, #308]	; (800121c <HAL_GPIO_Init+0x2b8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <HAL_GPIO_Init+0x2b8>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b4a      	ldr	r3, [pc, #296]	; (800121c <HAL_GPIO_Init+0x2b8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <HAL_GPIO_Init+0x2bc>)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a40      	ldr	r2, [pc, #256]	; (8001224 <HAL_GPIO_Init+0x2c0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d013      	beq.n	8001150 <HAL_GPIO_Init+0x1ec>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a3f      	ldr	r2, [pc, #252]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00d      	beq.n	800114c <HAL_GPIO_Init+0x1e8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a3e      	ldr	r2, [pc, #248]	; (800122c <HAL_GPIO_Init+0x2c8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x1e4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <HAL_GPIO_Init+0x2cc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_GPIO_Init+0x1e0>
 8001140:	2303      	movs	r3, #3
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001144:	2304      	movs	r3, #4
 8001146:	e004      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001148:	2302      	movs	r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001150:	2300      	movs	r3, #0
 8001152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001154:	f002 0203 	and.w	r2, r2, #3
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	4093      	lsls	r3, r2
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001162:	492f      	ldr	r1, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x2bc>)
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	492c      	ldr	r1, [pc, #176]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	4928      	ldr	r1, [pc, #160]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001194:	4013      	ands	r3, r2
 8001196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	4922      	ldr	r1, [pc, #136]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	60cb      	str	r3, [r1, #12]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	491e      	ldr	r1, [pc, #120]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4918      	ldr	r1, [pc, #96]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4914      	ldr	r1, [pc, #80]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d021      	beq.n	8001238 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	490e      	ldr	r1, [pc, #56]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e021      	b.n	8001246 <HAL_GPIO_Init+0x2e2>
 8001202:	bf00      	nop
 8001204:	10320000 	.word	0x10320000
 8001208:	10310000 	.word	0x10310000
 800120c:	10220000 	.word	0x10220000
 8001210:	10210000 	.word	0x10210000
 8001214:	10120000 	.word	0x10120000
 8001218:	10110000 	.word	0x10110000
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000
 8001224:	40010800 	.word	0x40010800
 8001228:	40010c00 	.word	0x40010c00
 800122c:	40011000 	.word	0x40011000
 8001230:	40011400 	.word	0x40011400
 8001234:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_GPIO_Init+0x304>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	43db      	mvns	r3, r3
 8001240:	4909      	ldr	r1, [pc, #36]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001242:	4013      	ands	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	3301      	adds	r3, #1
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	fa22 f303 	lsr.w	r3, r2, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	f47f ae8e 	bne.w	8000f78 <HAL_GPIO_Init+0x14>
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	372c      	adds	r7, #44	; 0x2c
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e001      	b.n	800128e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]
 80012a6:	4613      	mov	r3, r2
 80012a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012aa:	787b      	ldrb	r3, [r7, #1]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b6:	e003      	b.n	80012c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	611a      	str	r2, [r3, #16]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e12b      	b.n	8001536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d106      	bne.n	80012f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fc04 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2224      	movs	r2, #36	; 0x24
 80012fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800132e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001330:	f001 f830 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8001334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a81      	ldr	r2, [pc, #516]	; (8001540 <HAL_I2C_Init+0x274>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d807      	bhi.n	8001350 <HAL_I2C_Init+0x84>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4a80      	ldr	r2, [pc, #512]	; (8001544 <HAL_I2C_Init+0x278>)
 8001344:	4293      	cmp	r3, r2
 8001346:	bf94      	ite	ls
 8001348:	2301      	movls	r3, #1
 800134a:	2300      	movhi	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	e006      	b.n	800135e <HAL_I2C_Init+0x92>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a7d      	ldr	r2, [pc, #500]	; (8001548 <HAL_I2C_Init+0x27c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	bf94      	ite	ls
 8001358:	2301      	movls	r3, #1
 800135a:	2300      	movhi	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0e7      	b.n	8001536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4a78      	ldr	r2, [pc, #480]	; (800154c <HAL_I2C_Init+0x280>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	430a      	orrs	r2, r1
 8001384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <HAL_I2C_Init+0x274>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d802      	bhi.n	80013a0 <HAL_I2C_Init+0xd4>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3301      	adds	r3, #1
 800139e:	e009      	b.n	80013b4 <HAL_I2C_Init+0xe8>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a69      	ldr	r2, [pc, #420]	; (8001550 <HAL_I2C_Init+0x284>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	3301      	adds	r3, #1
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	495c      	ldr	r1, [pc, #368]	; (8001540 <HAL_I2C_Init+0x274>)
 80013d0:	428b      	cmp	r3, r1
 80013d2:	d819      	bhi.n	8001408 <HAL_I2C_Init+0x13c>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e2:	1c59      	adds	r1, r3, #1
 80013e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013e8:	400b      	ands	r3, r1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00a      	beq.n	8001404 <HAL_I2C_Init+0x138>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1e59      	subs	r1, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001402:	e051      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001404:	2304      	movs	r3, #4
 8001406:	e04f      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d111      	bne.n	8001434 <HAL_I2C_Init+0x168>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001422:	3301      	adds	r3, #1
 8001424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e012      	b.n	800145a <HAL_I2C_Init+0x18e>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e58      	subs	r0, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	0099      	lsls	r1, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	fbb0 f3f3 	udiv	r3, r0, r3
 800144a:	3301      	adds	r3, #1
 800144c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Init+0x196>
 800145e:	2301      	movs	r3, #1
 8001460:	e022      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10e      	bne.n	8001488 <HAL_I2C_Init+0x1bc>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e58      	subs	r0, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6859      	ldr	r1, [r3, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	440b      	add	r3, r1
 8001478:	fbb0 f3f3 	udiv	r3, r0, r3
 800147c:	3301      	adds	r3, #1
 800147e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001486:	e00f      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	0099      	lsls	r1, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	6809      	ldr	r1, [r1, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69da      	ldr	r2, [r3, #28]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6911      	ldr	r1, [r2, #16]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68d2      	ldr	r2, [r2, #12]
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	000186a0 	.word	0x000186a0
 8001544:	001e847f 	.word	0x001e847f
 8001548:	003d08ff 	.word	0x003d08ff
 800154c:	431bde83 	.word	0x431bde83
 8001550:	10624dd3 	.word	0x10624dd3

08001554 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	461a      	mov	r2, r3
 8001560:	460b      	mov	r3, r1
 8001562:	817b      	strh	r3, [r7, #10]
 8001564:	4613      	mov	r3, r2
 8001566:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff fbea 	bl	8000d40 <HAL_GetTick>
 800156c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b20      	cmp	r3, #32
 8001578:	f040 80e0 	bne.w	800173c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2319      	movs	r3, #25
 8001582:	2201      	movs	r2, #1
 8001584:	4970      	ldr	r1, [pc, #448]	; (8001748 <HAL_I2C_Master_Transmit+0x1f4>)
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f964 	bl	8001854 <I2C_WaitOnFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001592:	2302      	movs	r3, #2
 8001594:	e0d3      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_I2C_Master_Transmit+0x50>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e0cc      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d007      	beq.n	80015ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0201 	orr.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2221      	movs	r2, #33	; 0x21
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2210      	movs	r2, #16
 80015e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	893a      	ldrh	r2, [r7, #8]
 80015fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a50      	ldr	r2, [pc, #320]	; (800174c <HAL_I2C_Master_Transmit+0x1f8>)
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800160c:	8979      	ldrh	r1, [r7, #10]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	6a3a      	ldr	r2, [r7, #32]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f89c 	bl	8001750 <I2C_MasterRequestWrite>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e08d      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001638:	e066      	b.n	8001708 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	6a39      	ldr	r1, [r7, #32]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fa22 	bl	8001a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00d      	beq.n	8001666 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2b04      	cmp	r3, #4
 8001650:	d107      	bne.n	8001662 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001660:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06b      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	3b01      	subs	r3, #1
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d11b      	bne.n	80016dc <HAL_I2C_Master_Transmit+0x188>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d017      	beq.n	80016dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	6a39      	ldr	r1, [r7, #32]
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 fa19 	bl	8001b18 <I2C_WaitOnBTFFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00d      	beq.n	8001708 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d107      	bne.n	8001704 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001702:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e01a      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d194      	bne.n	800163a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e000      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800173c:	2302      	movs	r3, #2
  }
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	00100002 	.word	0x00100002
 800174c:	ffff0000 	.word	0xffff0000

08001750 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	460b      	mov	r3, r1
 800175e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d006      	beq.n	800177a <I2C_MasterRequestWrite+0x2a>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d003      	beq.n	800177a <I2C_MasterRequestWrite+0x2a>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001778:	d108      	bne.n	800178c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e00b      	b.n	80017a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	2b12      	cmp	r3, #18
 8001792:	d107      	bne.n	80017a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f84f 	bl	8001854 <I2C_WaitOnFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00d      	beq.n	80017d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ca:	d103      	bne.n	80017d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e035      	b.n	8001844 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e0:	d108      	bne.n	80017f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017e2:	897b      	ldrh	r3, [r7, #10]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	e01b      	b.n	800182c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017f4:	897b      	ldrh	r3, [r7, #10]
 80017f6:	11db      	asrs	r3, r3, #7
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f003 0306 	and.w	r3, r3, #6
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f063 030f 	orn	r3, r3, #15
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <I2C_MasterRequestWrite+0xfc>)
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f898 	bl	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e010      	b.n	8001844 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001822:	897b      	ldrh	r3, [r7, #10]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <I2C_MasterRequestWrite+0x100>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f888 	bl	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	00010008 	.word	0x00010008
 8001850:	00010002 	.word	0x00010002

08001854 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001864:	e048      	b.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d044      	beq.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff fa67 	bl	8000d40 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_WaitOnFlagUntilTimeout+0x30>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d139      	bne.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10d      	bne.n	80018aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	43da      	mvns	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4013      	ands	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	e00c      	b.n	80018c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	43da      	mvns	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4013      	ands	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d116      	bne.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e023      	b.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10d      	bne.n	800191e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	43da      	mvns	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4013      	ands	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	e00c      	b.n	8001938 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	43da      	mvns	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4013      	ands	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	429a      	cmp	r2, r3
 800193c:	d093      	beq.n	8001866 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001956:	e071      	b.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001966:	d123      	bne.n	80019b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001976:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001980:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e067      	b.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d041      	beq.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b8:	f7ff f9c2 	bl	8000d40 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d302      	bcc.n	80019ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d136      	bne.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10c      	bne.n	80019f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4013      	ands	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	2300      	moveq	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	e00b      	b.n	8001a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	43da      	mvns	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	4013      	ands	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf14      	ite	ne
 8001a04:	2301      	movne	r3, #1
 8001a06:	2300      	moveq	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e021      	b.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10c      	bne.n	8001a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4013      	ands	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e00b      	b.n	8001a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f af6d 	bne.w	8001958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a94:	e034      	b.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f886 	bl	8001ba8 <I2C_IsAcknowledgeFailed>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e034      	b.n	8001b10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d028      	beq.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aae:	f7ff f947 	bl	8000d40 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d302      	bcc.n	8001ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11d      	bne.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	2b80      	cmp	r3, #128	; 0x80
 8001ad0:	d016      	beq.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e007      	b.n	8001b10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b80      	cmp	r3, #128	; 0x80
 8001b0c:	d1c3      	bne.n	8001a96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b24:	e034      	b.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f83e 	bl	8001ba8 <I2C_IsAcknowledgeFailed>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e034      	b.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d028      	beq.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7ff f8ff 	bl	8000d40 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d11d      	bne.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d016      	beq.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e007      	b.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d1c3      	bne.n	8001b26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d11b      	bne.n	8001bf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e26c      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c24:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d00c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c30:	4b8f      	ldr	r3, [pc, #572]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d112      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
 8001c3c:	4b8c      	ldr	r3, [pc, #560]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b89      	ldr	r3, [pc, #548]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d06c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x12c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d168      	bne.n	8001d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e246      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76>
 8001c6c:	4b80      	ldr	r3, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e02e      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xbc>
 8001ca6:	4b72      	ldr	r3, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a71      	ldr	r2, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f82e 	bl	8000d40 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f82a 	bl	8000d40 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1fa      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe4>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff f81a 	bl	8000d40 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f816 	bl	8000d40 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1e6      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x10c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1ba      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4939      	ldr	r1, [pc, #228]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ffcf 	bl	8000d40 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7fe ffcb 	bl	8000d40 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e19b      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4927      	ldr	r1, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe ffae 	bl	8000d40 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7fe ffaa 	bl	8000d40 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e17a      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d03a      	beq.n	8001e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe ff8e 	bl	8000d40 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7fe ff8a 	bl	8000d40 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e15a      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 fab8 	bl	80023bc <RCC_Delay>
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe ff74 	bl	8000d40 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ff70 	bl	8000d40 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d908      	bls.n	8001e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e140      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	42420000 	.word	0x42420000
 8001e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e9      	bne.n	8001e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a6 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b97      	ldr	r3, [pc, #604]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a93      	ldr	r2, [pc, #588]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_RCC_OscConfig+0x4f8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a8a      	ldr	r2, [pc, #552]	; (80020fc <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7fe ff31 	bl	8000d40 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7fe ff2d 	bl	8000d40 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0fd      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001f08:	4b7b      	ldr	r3, [pc, #492]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a7a      	ldr	r2, [pc, #488]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e02d      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x334>
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a75      	ldr	r2, [pc, #468]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x356>
 8001f40:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a6c      	ldr	r2, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	4b67      	ldr	r3, [pc, #412]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b64      	ldr	r3, [pc, #400]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a63      	ldr	r2, [pc, #396]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fee1 	bl	8000d40 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fedd 	bl	8000d40 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0ab      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x37e>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fecb 	bl	8000d40 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fec7 	bl	8000d40 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e095      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b48      	ldr	r3, [pc, #288]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a47      	ldr	r2, [pc, #284]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8081 	beq.w	80020ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d061      	beq.n	80020bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d146      	bne.n	800208e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_OscConfig+0x4fc>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fe9b 	bl	8000d40 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe fe97 	bl	8000d40 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e067      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	492d      	ldr	r1, [pc, #180]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a19      	ldr	r1, [r3, #32]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	430b      	orrs	r3, r1
 800205a:	4927      	ldr	r1, [pc, #156]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x4fc>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe fe6b 	bl	8000d40 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7fe fe67 	bl	8000d40 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e037      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x46a>
 800208c:	e02f      	b.n	80020ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_RCC_OscConfig+0x4fc>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fe54 	bl	8000d40 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7fe fe50 	bl	8000d40 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e020      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x498>
 80020ba:	e018      	b.n	80020ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e013      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	42420060 	.word	0x42420060

08002104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0d0      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d910      	bls.n	8002148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 0207 	bic.w	r2, r3, #7
 800212e:	4965      	ldr	r1, [pc, #404]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002182:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d040      	beq.n	8002224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e073      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06b      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4936      	ldr	r1, [pc, #216]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f4:	f7fe fda4 	bl	8000d40 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7fe fda0 	bl	8000d40 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e053      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d210      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 0207 	bic.w	r2, r3, #7
 800223a:	4922      	ldr	r1, [pc, #136]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490a      	ldr	r1, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1cc>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1d0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fd02 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08002d10 	.word	0x08002d10
 80022d0:	20000010 	.word	0x20000010
 80022d4:	20000014 	.word	0x20000014

080022d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_RCC_GetSysClockFreq+0x94>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x30>
 8002302:	2b08      	cmp	r3, #8
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x36>
 8002306:	e027      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 800230a:	613b      	str	r3, [r7, #16]
      break;
 800230c:	e027      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_GetSysClockFreq+0x94>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0c5b      	lsrs	r3, r3, #17
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	4a11      	ldr	r2, [pc, #68]	; (8002378 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 800233a:	fb02 f203 	mul.w	r2, r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e004      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <HAL_RCC_GetSysClockFreq+0xa4>)
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	613b      	str	r3, [r7, #16]
      break;
 8002356:	e002      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 800235a:	613b      	str	r3, [r7, #16]
      break;
 800235c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235e:	693b      	ldr	r3, [r7, #16]
}
 8002360:	4618      	mov	r0, r3
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	007a1200 	.word	0x007a1200
 8002374:	08002d28 	.word	0x08002d28
 8002378:	08002d38 	.word	0x08002d38
 800237c:	003d0900 	.word	0x003d0900

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <HAL_RCC_GetHCLKFreq+0x10>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	20000010 	.word	0x20000010

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff2 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08002d20 	.word	0x08002d20

080023bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <RCC_Delay+0x34>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <RCC_Delay+0x38>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0a5b      	lsrs	r3, r3, #9
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d8:	bf00      	nop
  }
  while (Delay --);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	60fa      	str	r2, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f9      	bne.n	80023d8 <RCC_Delay+0x1c>
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	20000010 	.word	0x20000010
 80023f4:	10624dd3 	.word	0x10624dd3

080023f8 <__errno>:
 80023f8:	4b01      	ldr	r3, [pc, #4]	; (8002400 <__errno+0x8>)
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000001c 	.word	0x2000001c

08002404 <__libc_init_array>:
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	2600      	movs	r6, #0
 8002408:	4d0c      	ldr	r5, [pc, #48]	; (800243c <__libc_init_array+0x38>)
 800240a:	4c0d      	ldr	r4, [pc, #52]	; (8002440 <__libc_init_array+0x3c>)
 800240c:	1b64      	subs	r4, r4, r5
 800240e:	10a4      	asrs	r4, r4, #2
 8002410:	42a6      	cmp	r6, r4
 8002412:	d109      	bne.n	8002428 <__libc_init_array+0x24>
 8002414:	f000 fc5c 	bl	8002cd0 <_init>
 8002418:	2600      	movs	r6, #0
 800241a:	4d0a      	ldr	r5, [pc, #40]	; (8002444 <__libc_init_array+0x40>)
 800241c:	4c0a      	ldr	r4, [pc, #40]	; (8002448 <__libc_init_array+0x44>)
 800241e:	1b64      	subs	r4, r4, r5
 8002420:	10a4      	asrs	r4, r4, #2
 8002422:	42a6      	cmp	r6, r4
 8002424:	d105      	bne.n	8002432 <__libc_init_array+0x2e>
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	f855 3b04 	ldr.w	r3, [r5], #4
 800242c:	4798      	blx	r3
 800242e:	3601      	adds	r6, #1
 8002430:	e7ee      	b.n	8002410 <__libc_init_array+0xc>
 8002432:	f855 3b04 	ldr.w	r3, [r5], #4
 8002436:	4798      	blx	r3
 8002438:	3601      	adds	r6, #1
 800243a:	e7f2      	b.n	8002422 <__libc_init_array+0x1e>
 800243c:	08002d70 	.word	0x08002d70
 8002440:	08002d70 	.word	0x08002d70
 8002444:	08002d70 	.word	0x08002d70
 8002448:	08002d74 	.word	0x08002d74

0800244c <memset>:
 800244c:	4603      	mov	r3, r0
 800244e:	4402      	add	r2, r0
 8002450:	4293      	cmp	r3, r2
 8002452:	d100      	bne.n	8002456 <memset+0xa>
 8002454:	4770      	bx	lr
 8002456:	f803 1b01 	strb.w	r1, [r3], #1
 800245a:	e7f9      	b.n	8002450 <memset+0x4>

0800245c <siprintf>:
 800245c:	b40e      	push	{r1, r2, r3}
 800245e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002462:	b500      	push	{lr}
 8002464:	b09c      	sub	sp, #112	; 0x70
 8002466:	ab1d      	add	r3, sp, #116	; 0x74
 8002468:	9002      	str	r0, [sp, #8]
 800246a:	9006      	str	r0, [sp, #24]
 800246c:	9107      	str	r1, [sp, #28]
 800246e:	9104      	str	r1, [sp, #16]
 8002470:	4808      	ldr	r0, [pc, #32]	; (8002494 <siprintf+0x38>)
 8002472:	4909      	ldr	r1, [pc, #36]	; (8002498 <siprintf+0x3c>)
 8002474:	f853 2b04 	ldr.w	r2, [r3], #4
 8002478:	9105      	str	r1, [sp, #20]
 800247a:	6800      	ldr	r0, [r0, #0]
 800247c:	a902      	add	r1, sp, #8
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	f000 f868 	bl	8002554 <_svfiprintf_r>
 8002484:	2200      	movs	r2, #0
 8002486:	9b02      	ldr	r3, [sp, #8]
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	b01c      	add	sp, #112	; 0x70
 800248c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002490:	b003      	add	sp, #12
 8002492:	4770      	bx	lr
 8002494:	2000001c 	.word	0x2000001c
 8002498:	ffff0208 	.word	0xffff0208

0800249c <__ssputs_r>:
 800249c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a0:	688e      	ldr	r6, [r1, #8]
 80024a2:	4682      	mov	sl, r0
 80024a4:	429e      	cmp	r6, r3
 80024a6:	460c      	mov	r4, r1
 80024a8:	4690      	mov	r8, r2
 80024aa:	461f      	mov	r7, r3
 80024ac:	d838      	bhi.n	8002520 <__ssputs_r+0x84>
 80024ae:	898a      	ldrh	r2, [r1, #12]
 80024b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024b4:	d032      	beq.n	800251c <__ssputs_r+0x80>
 80024b6:	6825      	ldr	r5, [r4, #0]
 80024b8:	6909      	ldr	r1, [r1, #16]
 80024ba:	3301      	adds	r3, #1
 80024bc:	eba5 0901 	sub.w	r9, r5, r1
 80024c0:	6965      	ldr	r5, [r4, #20]
 80024c2:	444b      	add	r3, r9
 80024c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024cc:	106d      	asrs	r5, r5, #1
 80024ce:	429d      	cmp	r5, r3
 80024d0:	bf38      	it	cc
 80024d2:	461d      	movcc	r5, r3
 80024d4:	0553      	lsls	r3, r2, #21
 80024d6:	d531      	bpl.n	800253c <__ssputs_r+0xa0>
 80024d8:	4629      	mov	r1, r5
 80024da:	f000 fb53 	bl	8002b84 <_malloc_r>
 80024de:	4606      	mov	r6, r0
 80024e0:	b950      	cbnz	r0, 80024f8 <__ssputs_r+0x5c>
 80024e2:	230c      	movs	r3, #12
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f8ca 3000 	str.w	r3, [sl]
 80024ec:	89a3      	ldrh	r3, [r4, #12]
 80024ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f2:	81a3      	strh	r3, [r4, #12]
 80024f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f8:	464a      	mov	r2, r9
 80024fa:	6921      	ldr	r1, [r4, #16]
 80024fc:	f000 face 	bl	8002a9c <memcpy>
 8002500:	89a3      	ldrh	r3, [r4, #12]
 8002502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250a:	81a3      	strh	r3, [r4, #12]
 800250c:	6126      	str	r6, [r4, #16]
 800250e:	444e      	add	r6, r9
 8002510:	6026      	str	r6, [r4, #0]
 8002512:	463e      	mov	r6, r7
 8002514:	6165      	str	r5, [r4, #20]
 8002516:	eba5 0509 	sub.w	r5, r5, r9
 800251a:	60a5      	str	r5, [r4, #8]
 800251c:	42be      	cmp	r6, r7
 800251e:	d900      	bls.n	8002522 <__ssputs_r+0x86>
 8002520:	463e      	mov	r6, r7
 8002522:	4632      	mov	r2, r6
 8002524:	4641      	mov	r1, r8
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	f000 fac6 	bl	8002ab8 <memmove>
 800252c:	68a3      	ldr	r3, [r4, #8]
 800252e:	6822      	ldr	r2, [r4, #0]
 8002530:	1b9b      	subs	r3, r3, r6
 8002532:	4432      	add	r2, r6
 8002534:	2000      	movs	r0, #0
 8002536:	60a3      	str	r3, [r4, #8]
 8002538:	6022      	str	r2, [r4, #0]
 800253a:	e7db      	b.n	80024f4 <__ssputs_r+0x58>
 800253c:	462a      	mov	r2, r5
 800253e:	f000 fb7b 	bl	8002c38 <_realloc_r>
 8002542:	4606      	mov	r6, r0
 8002544:	2800      	cmp	r0, #0
 8002546:	d1e1      	bne.n	800250c <__ssputs_r+0x70>
 8002548:	4650      	mov	r0, sl
 800254a:	6921      	ldr	r1, [r4, #16]
 800254c:	f000 face 	bl	8002aec <_free_r>
 8002550:	e7c7      	b.n	80024e2 <__ssputs_r+0x46>
	...

08002554 <_svfiprintf_r>:
 8002554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002558:	4698      	mov	r8, r3
 800255a:	898b      	ldrh	r3, [r1, #12]
 800255c:	4607      	mov	r7, r0
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	460d      	mov	r5, r1
 8002562:	4614      	mov	r4, r2
 8002564:	b09d      	sub	sp, #116	; 0x74
 8002566:	d50e      	bpl.n	8002586 <_svfiprintf_r+0x32>
 8002568:	690b      	ldr	r3, [r1, #16]
 800256a:	b963      	cbnz	r3, 8002586 <_svfiprintf_r+0x32>
 800256c:	2140      	movs	r1, #64	; 0x40
 800256e:	f000 fb09 	bl	8002b84 <_malloc_r>
 8002572:	6028      	str	r0, [r5, #0]
 8002574:	6128      	str	r0, [r5, #16]
 8002576:	b920      	cbnz	r0, 8002582 <_svfiprintf_r+0x2e>
 8002578:	230c      	movs	r3, #12
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	e0d1      	b.n	8002726 <_svfiprintf_r+0x1d2>
 8002582:	2340      	movs	r3, #64	; 0x40
 8002584:	616b      	str	r3, [r5, #20]
 8002586:	2300      	movs	r3, #0
 8002588:	9309      	str	r3, [sp, #36]	; 0x24
 800258a:	2320      	movs	r3, #32
 800258c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002590:	2330      	movs	r3, #48	; 0x30
 8002592:	f04f 0901 	mov.w	r9, #1
 8002596:	f8cd 800c 	str.w	r8, [sp, #12]
 800259a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002740 <_svfiprintf_r+0x1ec>
 800259e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025a2:	4623      	mov	r3, r4
 80025a4:	469a      	mov	sl, r3
 80025a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025aa:	b10a      	cbz	r2, 80025b0 <_svfiprintf_r+0x5c>
 80025ac:	2a25      	cmp	r2, #37	; 0x25
 80025ae:	d1f9      	bne.n	80025a4 <_svfiprintf_r+0x50>
 80025b0:	ebba 0b04 	subs.w	fp, sl, r4
 80025b4:	d00b      	beq.n	80025ce <_svfiprintf_r+0x7a>
 80025b6:	465b      	mov	r3, fp
 80025b8:	4622      	mov	r2, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	4638      	mov	r0, r7
 80025be:	f7ff ff6d 	bl	800249c <__ssputs_r>
 80025c2:	3001      	adds	r0, #1
 80025c4:	f000 80aa 	beq.w	800271c <_svfiprintf_r+0x1c8>
 80025c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025ca:	445a      	add	r2, fp
 80025cc:	9209      	str	r2, [sp, #36]	; 0x24
 80025ce:	f89a 3000 	ldrb.w	r3, [sl]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80a2 	beq.w	800271c <_svfiprintf_r+0x1c8>
 80025d8:	2300      	movs	r3, #0
 80025da:	f04f 32ff 	mov.w	r2, #4294967295
 80025de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025e2:	f10a 0a01 	add.w	sl, sl, #1
 80025e6:	9304      	str	r3, [sp, #16]
 80025e8:	9307      	str	r3, [sp, #28]
 80025ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025ee:	931a      	str	r3, [sp, #104]	; 0x68
 80025f0:	4654      	mov	r4, sl
 80025f2:	2205      	movs	r2, #5
 80025f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025f8:	4851      	ldr	r0, [pc, #324]	; (8002740 <_svfiprintf_r+0x1ec>)
 80025fa:	f000 fa41 	bl	8002a80 <memchr>
 80025fe:	9a04      	ldr	r2, [sp, #16]
 8002600:	b9d8      	cbnz	r0, 800263a <_svfiprintf_r+0xe6>
 8002602:	06d0      	lsls	r0, r2, #27
 8002604:	bf44      	itt	mi
 8002606:	2320      	movmi	r3, #32
 8002608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800260c:	0711      	lsls	r1, r2, #28
 800260e:	bf44      	itt	mi
 8002610:	232b      	movmi	r3, #43	; 0x2b
 8002612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002616:	f89a 3000 	ldrb.w	r3, [sl]
 800261a:	2b2a      	cmp	r3, #42	; 0x2a
 800261c:	d015      	beq.n	800264a <_svfiprintf_r+0xf6>
 800261e:	4654      	mov	r4, sl
 8002620:	2000      	movs	r0, #0
 8002622:	f04f 0c0a 	mov.w	ip, #10
 8002626:	9a07      	ldr	r2, [sp, #28]
 8002628:	4621      	mov	r1, r4
 800262a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800262e:	3b30      	subs	r3, #48	; 0x30
 8002630:	2b09      	cmp	r3, #9
 8002632:	d94e      	bls.n	80026d2 <_svfiprintf_r+0x17e>
 8002634:	b1b0      	cbz	r0, 8002664 <_svfiprintf_r+0x110>
 8002636:	9207      	str	r2, [sp, #28]
 8002638:	e014      	b.n	8002664 <_svfiprintf_r+0x110>
 800263a:	eba0 0308 	sub.w	r3, r0, r8
 800263e:	fa09 f303 	lsl.w	r3, r9, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	46a2      	mov	sl, r4
 8002646:	9304      	str	r3, [sp, #16]
 8002648:	e7d2      	b.n	80025f0 <_svfiprintf_r+0x9c>
 800264a:	9b03      	ldr	r3, [sp, #12]
 800264c:	1d19      	adds	r1, r3, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	9103      	str	r1, [sp, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	bfbb      	ittet	lt
 8002656:	425b      	neglt	r3, r3
 8002658:	f042 0202 	orrlt.w	r2, r2, #2
 800265c:	9307      	strge	r3, [sp, #28]
 800265e:	9307      	strlt	r3, [sp, #28]
 8002660:	bfb8      	it	lt
 8002662:	9204      	strlt	r2, [sp, #16]
 8002664:	7823      	ldrb	r3, [r4, #0]
 8002666:	2b2e      	cmp	r3, #46	; 0x2e
 8002668:	d10c      	bne.n	8002684 <_svfiprintf_r+0x130>
 800266a:	7863      	ldrb	r3, [r4, #1]
 800266c:	2b2a      	cmp	r3, #42	; 0x2a
 800266e:	d135      	bne.n	80026dc <_svfiprintf_r+0x188>
 8002670:	9b03      	ldr	r3, [sp, #12]
 8002672:	3402      	adds	r4, #2
 8002674:	1d1a      	adds	r2, r3, #4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	9203      	str	r2, [sp, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	bfb8      	it	lt
 800267e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002682:	9305      	str	r3, [sp, #20]
 8002684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002750 <_svfiprintf_r+0x1fc>
 8002688:	2203      	movs	r2, #3
 800268a:	4650      	mov	r0, sl
 800268c:	7821      	ldrb	r1, [r4, #0]
 800268e:	f000 f9f7 	bl	8002a80 <memchr>
 8002692:	b140      	cbz	r0, 80026a6 <_svfiprintf_r+0x152>
 8002694:	2340      	movs	r3, #64	; 0x40
 8002696:	eba0 000a 	sub.w	r0, r0, sl
 800269a:	fa03 f000 	lsl.w	r0, r3, r0
 800269e:	9b04      	ldr	r3, [sp, #16]
 80026a0:	3401      	adds	r4, #1
 80026a2:	4303      	orrs	r3, r0
 80026a4:	9304      	str	r3, [sp, #16]
 80026a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026aa:	2206      	movs	r2, #6
 80026ac:	4825      	ldr	r0, [pc, #148]	; (8002744 <_svfiprintf_r+0x1f0>)
 80026ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026b2:	f000 f9e5 	bl	8002a80 <memchr>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d038      	beq.n	800272c <_svfiprintf_r+0x1d8>
 80026ba:	4b23      	ldr	r3, [pc, #140]	; (8002748 <_svfiprintf_r+0x1f4>)
 80026bc:	bb1b      	cbnz	r3, 8002706 <_svfiprintf_r+0x1b2>
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	3307      	adds	r3, #7
 80026c2:	f023 0307 	bic.w	r3, r3, #7
 80026c6:	3308      	adds	r3, #8
 80026c8:	9303      	str	r3, [sp, #12]
 80026ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026cc:	4433      	add	r3, r6
 80026ce:	9309      	str	r3, [sp, #36]	; 0x24
 80026d0:	e767      	b.n	80025a2 <_svfiprintf_r+0x4e>
 80026d2:	460c      	mov	r4, r1
 80026d4:	2001      	movs	r0, #1
 80026d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80026da:	e7a5      	b.n	8002628 <_svfiprintf_r+0xd4>
 80026dc:	2300      	movs	r3, #0
 80026de:	f04f 0c0a 	mov.w	ip, #10
 80026e2:	4619      	mov	r1, r3
 80026e4:	3401      	adds	r4, #1
 80026e6:	9305      	str	r3, [sp, #20]
 80026e8:	4620      	mov	r0, r4
 80026ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026ee:	3a30      	subs	r2, #48	; 0x30
 80026f0:	2a09      	cmp	r2, #9
 80026f2:	d903      	bls.n	80026fc <_svfiprintf_r+0x1a8>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0c5      	beq.n	8002684 <_svfiprintf_r+0x130>
 80026f8:	9105      	str	r1, [sp, #20]
 80026fa:	e7c3      	b.n	8002684 <_svfiprintf_r+0x130>
 80026fc:	4604      	mov	r4, r0
 80026fe:	2301      	movs	r3, #1
 8002700:	fb0c 2101 	mla	r1, ip, r1, r2
 8002704:	e7f0      	b.n	80026e8 <_svfiprintf_r+0x194>
 8002706:	ab03      	add	r3, sp, #12
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	462a      	mov	r2, r5
 800270c:	4638      	mov	r0, r7
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <_svfiprintf_r+0x1f8>)
 8002710:	a904      	add	r1, sp, #16
 8002712:	f3af 8000 	nop.w
 8002716:	1c42      	adds	r2, r0, #1
 8002718:	4606      	mov	r6, r0
 800271a:	d1d6      	bne.n	80026ca <_svfiprintf_r+0x176>
 800271c:	89ab      	ldrh	r3, [r5, #12]
 800271e:	065b      	lsls	r3, r3, #25
 8002720:	f53f af2c 	bmi.w	800257c <_svfiprintf_r+0x28>
 8002724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002726:	b01d      	add	sp, #116	; 0x74
 8002728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272c:	ab03      	add	r3, sp, #12
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	462a      	mov	r2, r5
 8002732:	4638      	mov	r0, r7
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <_svfiprintf_r+0x1f8>)
 8002736:	a904      	add	r1, sp, #16
 8002738:	f000 f87c 	bl	8002834 <_printf_i>
 800273c:	e7eb      	b.n	8002716 <_svfiprintf_r+0x1c2>
 800273e:	bf00      	nop
 8002740:	08002d3a 	.word	0x08002d3a
 8002744:	08002d44 	.word	0x08002d44
 8002748:	00000000 	.word	0x00000000
 800274c:	0800249d 	.word	0x0800249d
 8002750:	08002d40 	.word	0x08002d40

08002754 <_printf_common>:
 8002754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002758:	4616      	mov	r6, r2
 800275a:	4699      	mov	r9, r3
 800275c:	688a      	ldr	r2, [r1, #8]
 800275e:	690b      	ldr	r3, [r1, #16]
 8002760:	4607      	mov	r7, r0
 8002762:	4293      	cmp	r3, r2
 8002764:	bfb8      	it	lt
 8002766:	4613      	movlt	r3, r2
 8002768:	6033      	str	r3, [r6, #0]
 800276a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800276e:	460c      	mov	r4, r1
 8002770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002774:	b10a      	cbz	r2, 800277a <_printf_common+0x26>
 8002776:	3301      	adds	r3, #1
 8002778:	6033      	str	r3, [r6, #0]
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	0699      	lsls	r1, r3, #26
 800277e:	bf42      	ittt	mi
 8002780:	6833      	ldrmi	r3, [r6, #0]
 8002782:	3302      	addmi	r3, #2
 8002784:	6033      	strmi	r3, [r6, #0]
 8002786:	6825      	ldr	r5, [r4, #0]
 8002788:	f015 0506 	ands.w	r5, r5, #6
 800278c:	d106      	bne.n	800279c <_printf_common+0x48>
 800278e:	f104 0a19 	add.w	sl, r4, #25
 8002792:	68e3      	ldr	r3, [r4, #12]
 8002794:	6832      	ldr	r2, [r6, #0]
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	42ab      	cmp	r3, r5
 800279a:	dc28      	bgt.n	80027ee <_printf_common+0x9a>
 800279c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027a0:	1e13      	subs	r3, r2, #0
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	bf18      	it	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	0692      	lsls	r2, r2, #26
 80027aa:	d42d      	bmi.n	8002808 <_printf_common+0xb4>
 80027ac:	4649      	mov	r1, r9
 80027ae:	4638      	mov	r0, r7
 80027b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027b4:	47c0      	blx	r8
 80027b6:	3001      	adds	r0, #1
 80027b8:	d020      	beq.n	80027fc <_printf_common+0xa8>
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	68e5      	ldr	r5, [r4, #12]
 80027be:	f003 0306 	and.w	r3, r3, #6
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	bf18      	it	ne
 80027c6:	2500      	movne	r5, #0
 80027c8:	6832      	ldr	r2, [r6, #0]
 80027ca:	f04f 0600 	mov.w	r6, #0
 80027ce:	68a3      	ldr	r3, [r4, #8]
 80027d0:	bf08      	it	eq
 80027d2:	1aad      	subeq	r5, r5, r2
 80027d4:	6922      	ldr	r2, [r4, #16]
 80027d6:	bf08      	it	eq
 80027d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027dc:	4293      	cmp	r3, r2
 80027de:	bfc4      	itt	gt
 80027e0:	1a9b      	subgt	r3, r3, r2
 80027e2:	18ed      	addgt	r5, r5, r3
 80027e4:	341a      	adds	r4, #26
 80027e6:	42b5      	cmp	r5, r6
 80027e8:	d11a      	bne.n	8002820 <_printf_common+0xcc>
 80027ea:	2000      	movs	r0, #0
 80027ec:	e008      	b.n	8002800 <_printf_common+0xac>
 80027ee:	2301      	movs	r3, #1
 80027f0:	4652      	mov	r2, sl
 80027f2:	4649      	mov	r1, r9
 80027f4:	4638      	mov	r0, r7
 80027f6:	47c0      	blx	r8
 80027f8:	3001      	adds	r0, #1
 80027fa:	d103      	bne.n	8002804 <_printf_common+0xb0>
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002804:	3501      	adds	r5, #1
 8002806:	e7c4      	b.n	8002792 <_printf_common+0x3e>
 8002808:	2030      	movs	r0, #48	; 0x30
 800280a:	18e1      	adds	r1, r4, r3
 800280c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002816:	4422      	add	r2, r4
 8002818:	3302      	adds	r3, #2
 800281a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800281e:	e7c5      	b.n	80027ac <_printf_common+0x58>
 8002820:	2301      	movs	r3, #1
 8002822:	4622      	mov	r2, r4
 8002824:	4649      	mov	r1, r9
 8002826:	4638      	mov	r0, r7
 8002828:	47c0      	blx	r8
 800282a:	3001      	adds	r0, #1
 800282c:	d0e6      	beq.n	80027fc <_printf_common+0xa8>
 800282e:	3601      	adds	r6, #1
 8002830:	e7d9      	b.n	80027e6 <_printf_common+0x92>
	...

08002834 <_printf_i>:
 8002834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002838:	460c      	mov	r4, r1
 800283a:	7e27      	ldrb	r7, [r4, #24]
 800283c:	4691      	mov	r9, r2
 800283e:	2f78      	cmp	r7, #120	; 0x78
 8002840:	4680      	mov	r8, r0
 8002842:	469a      	mov	sl, r3
 8002844:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002846:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800284a:	d807      	bhi.n	800285c <_printf_i+0x28>
 800284c:	2f62      	cmp	r7, #98	; 0x62
 800284e:	d80a      	bhi.n	8002866 <_printf_i+0x32>
 8002850:	2f00      	cmp	r7, #0
 8002852:	f000 80d9 	beq.w	8002a08 <_printf_i+0x1d4>
 8002856:	2f58      	cmp	r7, #88	; 0x58
 8002858:	f000 80a4 	beq.w	80029a4 <_printf_i+0x170>
 800285c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002864:	e03a      	b.n	80028dc <_printf_i+0xa8>
 8002866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800286a:	2b15      	cmp	r3, #21
 800286c:	d8f6      	bhi.n	800285c <_printf_i+0x28>
 800286e:	a001      	add	r0, pc, #4	; (adr r0, 8002874 <_printf_i+0x40>)
 8002870:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002874:	080028cd 	.word	0x080028cd
 8002878:	080028e1 	.word	0x080028e1
 800287c:	0800285d 	.word	0x0800285d
 8002880:	0800285d 	.word	0x0800285d
 8002884:	0800285d 	.word	0x0800285d
 8002888:	0800285d 	.word	0x0800285d
 800288c:	080028e1 	.word	0x080028e1
 8002890:	0800285d 	.word	0x0800285d
 8002894:	0800285d 	.word	0x0800285d
 8002898:	0800285d 	.word	0x0800285d
 800289c:	0800285d 	.word	0x0800285d
 80028a0:	080029ef 	.word	0x080029ef
 80028a4:	08002911 	.word	0x08002911
 80028a8:	080029d1 	.word	0x080029d1
 80028ac:	0800285d 	.word	0x0800285d
 80028b0:	0800285d 	.word	0x0800285d
 80028b4:	08002a11 	.word	0x08002a11
 80028b8:	0800285d 	.word	0x0800285d
 80028bc:	08002911 	.word	0x08002911
 80028c0:	0800285d 	.word	0x0800285d
 80028c4:	0800285d 	.word	0x0800285d
 80028c8:	080029d9 	.word	0x080029d9
 80028cc:	680b      	ldr	r3, [r1, #0]
 80028ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028d2:	1d1a      	adds	r2, r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	600a      	str	r2, [r1, #0]
 80028d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028dc:	2301      	movs	r3, #1
 80028de:	e0a4      	b.n	8002a2a <_printf_i+0x1f6>
 80028e0:	6825      	ldr	r5, [r4, #0]
 80028e2:	6808      	ldr	r0, [r1, #0]
 80028e4:	062e      	lsls	r6, r5, #24
 80028e6:	f100 0304 	add.w	r3, r0, #4
 80028ea:	d50a      	bpl.n	8002902 <_printf_i+0xce>
 80028ec:	6805      	ldr	r5, [r0, #0]
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	2d00      	cmp	r5, #0
 80028f2:	da03      	bge.n	80028fc <_printf_i+0xc8>
 80028f4:	232d      	movs	r3, #45	; 0x2d
 80028f6:	426d      	negs	r5, r5
 80028f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028fc:	230a      	movs	r3, #10
 80028fe:	485e      	ldr	r0, [pc, #376]	; (8002a78 <_printf_i+0x244>)
 8002900:	e019      	b.n	8002936 <_printf_i+0x102>
 8002902:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002906:	6805      	ldr	r5, [r0, #0]
 8002908:	600b      	str	r3, [r1, #0]
 800290a:	bf18      	it	ne
 800290c:	b22d      	sxthne	r5, r5
 800290e:	e7ef      	b.n	80028f0 <_printf_i+0xbc>
 8002910:	680b      	ldr	r3, [r1, #0]
 8002912:	6825      	ldr	r5, [r4, #0]
 8002914:	1d18      	adds	r0, r3, #4
 8002916:	6008      	str	r0, [r1, #0]
 8002918:	0628      	lsls	r0, r5, #24
 800291a:	d501      	bpl.n	8002920 <_printf_i+0xec>
 800291c:	681d      	ldr	r5, [r3, #0]
 800291e:	e002      	b.n	8002926 <_printf_i+0xf2>
 8002920:	0669      	lsls	r1, r5, #25
 8002922:	d5fb      	bpl.n	800291c <_printf_i+0xe8>
 8002924:	881d      	ldrh	r5, [r3, #0]
 8002926:	2f6f      	cmp	r7, #111	; 0x6f
 8002928:	bf0c      	ite	eq
 800292a:	2308      	moveq	r3, #8
 800292c:	230a      	movne	r3, #10
 800292e:	4852      	ldr	r0, [pc, #328]	; (8002a78 <_printf_i+0x244>)
 8002930:	2100      	movs	r1, #0
 8002932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002936:	6866      	ldr	r6, [r4, #4]
 8002938:	2e00      	cmp	r6, #0
 800293a:	bfa8      	it	ge
 800293c:	6821      	ldrge	r1, [r4, #0]
 800293e:	60a6      	str	r6, [r4, #8]
 8002940:	bfa4      	itt	ge
 8002942:	f021 0104 	bicge.w	r1, r1, #4
 8002946:	6021      	strge	r1, [r4, #0]
 8002948:	b90d      	cbnz	r5, 800294e <_printf_i+0x11a>
 800294a:	2e00      	cmp	r6, #0
 800294c:	d04d      	beq.n	80029ea <_printf_i+0x1b6>
 800294e:	4616      	mov	r6, r2
 8002950:	fbb5 f1f3 	udiv	r1, r5, r3
 8002954:	fb03 5711 	mls	r7, r3, r1, r5
 8002958:	5dc7      	ldrb	r7, [r0, r7]
 800295a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800295e:	462f      	mov	r7, r5
 8002960:	42bb      	cmp	r3, r7
 8002962:	460d      	mov	r5, r1
 8002964:	d9f4      	bls.n	8002950 <_printf_i+0x11c>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d10b      	bne.n	8002982 <_printf_i+0x14e>
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	07df      	lsls	r7, r3, #31
 800296e:	d508      	bpl.n	8002982 <_printf_i+0x14e>
 8002970:	6923      	ldr	r3, [r4, #16]
 8002972:	6861      	ldr	r1, [r4, #4]
 8002974:	4299      	cmp	r1, r3
 8002976:	bfde      	ittt	le
 8002978:	2330      	movle	r3, #48	; 0x30
 800297a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800297e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002982:	1b92      	subs	r2, r2, r6
 8002984:	6122      	str	r2, [r4, #16]
 8002986:	464b      	mov	r3, r9
 8002988:	4621      	mov	r1, r4
 800298a:	4640      	mov	r0, r8
 800298c:	f8cd a000 	str.w	sl, [sp]
 8002990:	aa03      	add	r2, sp, #12
 8002992:	f7ff fedf 	bl	8002754 <_printf_common>
 8002996:	3001      	adds	r0, #1
 8002998:	d14c      	bne.n	8002a34 <_printf_i+0x200>
 800299a:	f04f 30ff 	mov.w	r0, #4294967295
 800299e:	b004      	add	sp, #16
 80029a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a4:	4834      	ldr	r0, [pc, #208]	; (8002a78 <_printf_i+0x244>)
 80029a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80029aa:	680e      	ldr	r6, [r1, #0]
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80029b2:	061f      	lsls	r7, r3, #24
 80029b4:	600e      	str	r6, [r1, #0]
 80029b6:	d514      	bpl.n	80029e2 <_printf_i+0x1ae>
 80029b8:	07d9      	lsls	r1, r3, #31
 80029ba:	bf44      	itt	mi
 80029bc:	f043 0320 	orrmi.w	r3, r3, #32
 80029c0:	6023      	strmi	r3, [r4, #0]
 80029c2:	b91d      	cbnz	r5, 80029cc <_printf_i+0x198>
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	f023 0320 	bic.w	r3, r3, #32
 80029ca:	6023      	str	r3, [r4, #0]
 80029cc:	2310      	movs	r3, #16
 80029ce:	e7af      	b.n	8002930 <_printf_i+0xfc>
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	f043 0320 	orr.w	r3, r3, #32
 80029d6:	6023      	str	r3, [r4, #0]
 80029d8:	2378      	movs	r3, #120	; 0x78
 80029da:	4828      	ldr	r0, [pc, #160]	; (8002a7c <_printf_i+0x248>)
 80029dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029e0:	e7e3      	b.n	80029aa <_printf_i+0x176>
 80029e2:	065e      	lsls	r6, r3, #25
 80029e4:	bf48      	it	mi
 80029e6:	b2ad      	uxthmi	r5, r5
 80029e8:	e7e6      	b.n	80029b8 <_printf_i+0x184>
 80029ea:	4616      	mov	r6, r2
 80029ec:	e7bb      	b.n	8002966 <_printf_i+0x132>
 80029ee:	680b      	ldr	r3, [r1, #0]
 80029f0:	6826      	ldr	r6, [r4, #0]
 80029f2:	1d1d      	adds	r5, r3, #4
 80029f4:	6960      	ldr	r0, [r4, #20]
 80029f6:	600d      	str	r5, [r1, #0]
 80029f8:	0635      	lsls	r5, r6, #24
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	d501      	bpl.n	8002a02 <_printf_i+0x1ce>
 80029fe:	6018      	str	r0, [r3, #0]
 8002a00:	e002      	b.n	8002a08 <_printf_i+0x1d4>
 8002a02:	0671      	lsls	r1, r6, #25
 8002a04:	d5fb      	bpl.n	80029fe <_printf_i+0x1ca>
 8002a06:	8018      	strh	r0, [r3, #0]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	4616      	mov	r6, r2
 8002a0c:	6123      	str	r3, [r4, #16]
 8002a0e:	e7ba      	b.n	8002986 <_printf_i+0x152>
 8002a10:	680b      	ldr	r3, [r1, #0]
 8002a12:	1d1a      	adds	r2, r3, #4
 8002a14:	600a      	str	r2, [r1, #0]
 8002a16:	681e      	ldr	r6, [r3, #0]
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	6862      	ldr	r2, [r4, #4]
 8002a1e:	f000 f82f 	bl	8002a80 <memchr>
 8002a22:	b108      	cbz	r0, 8002a28 <_printf_i+0x1f4>
 8002a24:	1b80      	subs	r0, r0, r6
 8002a26:	6060      	str	r0, [r4, #4]
 8002a28:	6863      	ldr	r3, [r4, #4]
 8002a2a:	6123      	str	r3, [r4, #16]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a32:	e7a8      	b.n	8002986 <_printf_i+0x152>
 8002a34:	4632      	mov	r2, r6
 8002a36:	4649      	mov	r1, r9
 8002a38:	4640      	mov	r0, r8
 8002a3a:	6923      	ldr	r3, [r4, #16]
 8002a3c:	47d0      	blx	sl
 8002a3e:	3001      	adds	r0, #1
 8002a40:	d0ab      	beq.n	800299a <_printf_i+0x166>
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	079b      	lsls	r3, r3, #30
 8002a46:	d413      	bmi.n	8002a70 <_printf_i+0x23c>
 8002a48:	68e0      	ldr	r0, [r4, #12]
 8002a4a:	9b03      	ldr	r3, [sp, #12]
 8002a4c:	4298      	cmp	r0, r3
 8002a4e:	bfb8      	it	lt
 8002a50:	4618      	movlt	r0, r3
 8002a52:	e7a4      	b.n	800299e <_printf_i+0x16a>
 8002a54:	2301      	movs	r3, #1
 8002a56:	4632      	mov	r2, r6
 8002a58:	4649      	mov	r1, r9
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	47d0      	blx	sl
 8002a5e:	3001      	adds	r0, #1
 8002a60:	d09b      	beq.n	800299a <_printf_i+0x166>
 8002a62:	3501      	adds	r5, #1
 8002a64:	68e3      	ldr	r3, [r4, #12]
 8002a66:	9903      	ldr	r1, [sp, #12]
 8002a68:	1a5b      	subs	r3, r3, r1
 8002a6a:	42ab      	cmp	r3, r5
 8002a6c:	dcf2      	bgt.n	8002a54 <_printf_i+0x220>
 8002a6e:	e7eb      	b.n	8002a48 <_printf_i+0x214>
 8002a70:	2500      	movs	r5, #0
 8002a72:	f104 0619 	add.w	r6, r4, #25
 8002a76:	e7f5      	b.n	8002a64 <_printf_i+0x230>
 8002a78:	08002d4b 	.word	0x08002d4b
 8002a7c:	08002d5c 	.word	0x08002d5c

08002a80 <memchr>:
 8002a80:	4603      	mov	r3, r0
 8002a82:	b510      	push	{r4, lr}
 8002a84:	b2c9      	uxtb	r1, r1
 8002a86:	4402      	add	r2, r0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	d101      	bne.n	8002a92 <memchr+0x12>
 8002a8e:	2000      	movs	r0, #0
 8002a90:	e003      	b.n	8002a9a <memchr+0x1a>
 8002a92:	7804      	ldrb	r4, [r0, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	428c      	cmp	r4, r1
 8002a98:	d1f6      	bne.n	8002a88 <memchr+0x8>
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <memcpy>:
 8002a9c:	440a      	add	r2, r1
 8002a9e:	4291      	cmp	r1, r2
 8002aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002aa4:	d100      	bne.n	8002aa8 <memcpy+0xc>
 8002aa6:	4770      	bx	lr
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002aae:	4291      	cmp	r1, r2
 8002ab0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ab4:	d1f9      	bne.n	8002aaa <memcpy+0xe>
 8002ab6:	bd10      	pop	{r4, pc}

08002ab8 <memmove>:
 8002ab8:	4288      	cmp	r0, r1
 8002aba:	b510      	push	{r4, lr}
 8002abc:	eb01 0402 	add.w	r4, r1, r2
 8002ac0:	d902      	bls.n	8002ac8 <memmove+0x10>
 8002ac2:	4284      	cmp	r4, r0
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	d807      	bhi.n	8002ad8 <memmove+0x20>
 8002ac8:	1e43      	subs	r3, r0, #1
 8002aca:	42a1      	cmp	r1, r4
 8002acc:	d008      	beq.n	8002ae0 <memmove+0x28>
 8002ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ad6:	e7f8      	b.n	8002aca <memmove+0x12>
 8002ad8:	4601      	mov	r1, r0
 8002ada:	4402      	add	r2, r0
 8002adc:	428a      	cmp	r2, r1
 8002ade:	d100      	bne.n	8002ae2 <memmove+0x2a>
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002aea:	e7f7      	b.n	8002adc <memmove+0x24>

08002aec <_free_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	4605      	mov	r5, r0
 8002af0:	2900      	cmp	r1, #0
 8002af2:	d043      	beq.n	8002b7c <_free_r+0x90>
 8002af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002af8:	1f0c      	subs	r4, r1, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bfb8      	it	lt
 8002afe:	18e4      	addlt	r4, r4, r3
 8002b00:	f000 f8d0 	bl	8002ca4 <__malloc_lock>
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <_free_r+0x94>)
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	4610      	mov	r0, r2
 8002b0a:	b933      	cbnz	r3, 8002b1a <_free_r+0x2e>
 8002b0c:	6063      	str	r3, [r4, #4]
 8002b0e:	6014      	str	r4, [r2, #0]
 8002b10:	4628      	mov	r0, r5
 8002b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b16:	f000 b8cb 	b.w	8002cb0 <__malloc_unlock>
 8002b1a:	42a3      	cmp	r3, r4
 8002b1c:	d90a      	bls.n	8002b34 <_free_r+0x48>
 8002b1e:	6821      	ldr	r1, [r4, #0]
 8002b20:	1862      	adds	r2, r4, r1
 8002b22:	4293      	cmp	r3, r2
 8002b24:	bf01      	itttt	eq
 8002b26:	681a      	ldreq	r2, [r3, #0]
 8002b28:	685b      	ldreq	r3, [r3, #4]
 8002b2a:	1852      	addeq	r2, r2, r1
 8002b2c:	6022      	streq	r2, [r4, #0]
 8002b2e:	6063      	str	r3, [r4, #4]
 8002b30:	6004      	str	r4, [r0, #0]
 8002b32:	e7ed      	b.n	8002b10 <_free_r+0x24>
 8002b34:	461a      	mov	r2, r3
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	b10b      	cbz	r3, 8002b3e <_free_r+0x52>
 8002b3a:	42a3      	cmp	r3, r4
 8002b3c:	d9fa      	bls.n	8002b34 <_free_r+0x48>
 8002b3e:	6811      	ldr	r1, [r2, #0]
 8002b40:	1850      	adds	r0, r2, r1
 8002b42:	42a0      	cmp	r0, r4
 8002b44:	d10b      	bne.n	8002b5e <_free_r+0x72>
 8002b46:	6820      	ldr	r0, [r4, #0]
 8002b48:	4401      	add	r1, r0
 8002b4a:	1850      	adds	r0, r2, r1
 8002b4c:	4283      	cmp	r3, r0
 8002b4e:	6011      	str	r1, [r2, #0]
 8002b50:	d1de      	bne.n	8002b10 <_free_r+0x24>
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4401      	add	r1, r0
 8002b58:	6011      	str	r1, [r2, #0]
 8002b5a:	6053      	str	r3, [r2, #4]
 8002b5c:	e7d8      	b.n	8002b10 <_free_r+0x24>
 8002b5e:	d902      	bls.n	8002b66 <_free_r+0x7a>
 8002b60:	230c      	movs	r3, #12
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	e7d4      	b.n	8002b10 <_free_r+0x24>
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	1821      	adds	r1, r4, r0
 8002b6a:	428b      	cmp	r3, r1
 8002b6c:	bf01      	itttt	eq
 8002b6e:	6819      	ldreq	r1, [r3, #0]
 8002b70:	685b      	ldreq	r3, [r3, #4]
 8002b72:	1809      	addeq	r1, r1, r0
 8002b74:	6021      	streq	r1, [r4, #0]
 8002b76:	6063      	str	r3, [r4, #4]
 8002b78:	6054      	str	r4, [r2, #4]
 8002b7a:	e7c9      	b.n	8002b10 <_free_r+0x24>
 8002b7c:	bd38      	pop	{r3, r4, r5, pc}
 8002b7e:	bf00      	nop
 8002b80:	200000a4 	.word	0x200000a4

08002b84 <_malloc_r>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	1ccd      	adds	r5, r1, #3
 8002b88:	f025 0503 	bic.w	r5, r5, #3
 8002b8c:	3508      	adds	r5, #8
 8002b8e:	2d0c      	cmp	r5, #12
 8002b90:	bf38      	it	cc
 8002b92:	250c      	movcc	r5, #12
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	4606      	mov	r6, r0
 8002b98:	db01      	blt.n	8002b9e <_malloc_r+0x1a>
 8002b9a:	42a9      	cmp	r1, r5
 8002b9c:	d903      	bls.n	8002ba6 <_malloc_r+0x22>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	6033      	str	r3, [r6, #0]
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba6:	f000 f87d 	bl	8002ca4 <__malloc_lock>
 8002baa:	4921      	ldr	r1, [pc, #132]	; (8002c30 <_malloc_r+0xac>)
 8002bac:	680a      	ldr	r2, [r1, #0]
 8002bae:	4614      	mov	r4, r2
 8002bb0:	b99c      	cbnz	r4, 8002bda <_malloc_r+0x56>
 8002bb2:	4f20      	ldr	r7, [pc, #128]	; (8002c34 <_malloc_r+0xb0>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b923      	cbnz	r3, 8002bc2 <_malloc_r+0x3e>
 8002bb8:	4621      	mov	r1, r4
 8002bba:	4630      	mov	r0, r6
 8002bbc:	f000 f862 	bl	8002c84 <_sbrk_r>
 8002bc0:	6038      	str	r0, [r7, #0]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	f000 f85d 	bl	8002c84 <_sbrk_r>
 8002bca:	1c43      	adds	r3, r0, #1
 8002bcc:	d123      	bne.n	8002c16 <_malloc_r+0x92>
 8002bce:	230c      	movs	r3, #12
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	6033      	str	r3, [r6, #0]
 8002bd4:	f000 f86c 	bl	8002cb0 <__malloc_unlock>
 8002bd8:	e7e3      	b.n	8002ba2 <_malloc_r+0x1e>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	1b5b      	subs	r3, r3, r5
 8002bde:	d417      	bmi.n	8002c10 <_malloc_r+0x8c>
 8002be0:	2b0b      	cmp	r3, #11
 8002be2:	d903      	bls.n	8002bec <_malloc_r+0x68>
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	441c      	add	r4, r3
 8002be8:	6025      	str	r5, [r4, #0]
 8002bea:	e004      	b.n	8002bf6 <_malloc_r+0x72>
 8002bec:	6863      	ldr	r3, [r4, #4]
 8002bee:	42a2      	cmp	r2, r4
 8002bf0:	bf0c      	ite	eq
 8002bf2:	600b      	streq	r3, [r1, #0]
 8002bf4:	6053      	strne	r3, [r2, #4]
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	f000 f85a 	bl	8002cb0 <__malloc_unlock>
 8002bfc:	f104 000b 	add.w	r0, r4, #11
 8002c00:	1d23      	adds	r3, r4, #4
 8002c02:	f020 0007 	bic.w	r0, r0, #7
 8002c06:	1ac2      	subs	r2, r0, r3
 8002c08:	d0cc      	beq.n	8002ba4 <_malloc_r+0x20>
 8002c0a:	1a1b      	subs	r3, r3, r0
 8002c0c:	50a3      	str	r3, [r4, r2]
 8002c0e:	e7c9      	b.n	8002ba4 <_malloc_r+0x20>
 8002c10:	4622      	mov	r2, r4
 8002c12:	6864      	ldr	r4, [r4, #4]
 8002c14:	e7cc      	b.n	8002bb0 <_malloc_r+0x2c>
 8002c16:	1cc4      	adds	r4, r0, #3
 8002c18:	f024 0403 	bic.w	r4, r4, #3
 8002c1c:	42a0      	cmp	r0, r4
 8002c1e:	d0e3      	beq.n	8002be8 <_malloc_r+0x64>
 8002c20:	1a21      	subs	r1, r4, r0
 8002c22:	4630      	mov	r0, r6
 8002c24:	f000 f82e 	bl	8002c84 <_sbrk_r>
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d1dd      	bne.n	8002be8 <_malloc_r+0x64>
 8002c2c:	e7cf      	b.n	8002bce <_malloc_r+0x4a>
 8002c2e:	bf00      	nop
 8002c30:	200000a4 	.word	0x200000a4
 8002c34:	200000a8 	.word	0x200000a8

08002c38 <_realloc_r>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	4607      	mov	r7, r0
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	460e      	mov	r6, r1
 8002c40:	b921      	cbnz	r1, 8002c4c <_realloc_r+0x14>
 8002c42:	4611      	mov	r1, r2
 8002c44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c48:	f7ff bf9c 	b.w	8002b84 <_malloc_r>
 8002c4c:	b922      	cbnz	r2, 8002c58 <_realloc_r+0x20>
 8002c4e:	f7ff ff4d 	bl	8002aec <_free_r>
 8002c52:	4625      	mov	r5, r4
 8002c54:	4628      	mov	r0, r5
 8002c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c58:	f000 f830 	bl	8002cbc <_malloc_usable_size_r>
 8002c5c:	42a0      	cmp	r0, r4
 8002c5e:	d20f      	bcs.n	8002c80 <_realloc_r+0x48>
 8002c60:	4621      	mov	r1, r4
 8002c62:	4638      	mov	r0, r7
 8002c64:	f7ff ff8e 	bl	8002b84 <_malloc_r>
 8002c68:	4605      	mov	r5, r0
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d0f2      	beq.n	8002c54 <_realloc_r+0x1c>
 8002c6e:	4631      	mov	r1, r6
 8002c70:	4622      	mov	r2, r4
 8002c72:	f7ff ff13 	bl	8002a9c <memcpy>
 8002c76:	4631      	mov	r1, r6
 8002c78:	4638      	mov	r0, r7
 8002c7a:	f7ff ff37 	bl	8002aec <_free_r>
 8002c7e:	e7e9      	b.n	8002c54 <_realloc_r+0x1c>
 8002c80:	4635      	mov	r5, r6
 8002c82:	e7e7      	b.n	8002c54 <_realloc_r+0x1c>

08002c84 <_sbrk_r>:
 8002c84:	b538      	push	{r3, r4, r5, lr}
 8002c86:	2300      	movs	r3, #0
 8002c88:	4d05      	ldr	r5, [pc, #20]	; (8002ca0 <_sbrk_r+0x1c>)
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	602b      	str	r3, [r5, #0]
 8002c90:	f7fd ff9c 	bl	8000bcc <_sbrk>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_sbrk_r+0x1a>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_sbrk_r+0x1a>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	2000010c 	.word	0x2000010c

08002ca4 <__malloc_lock>:
 8002ca4:	4801      	ldr	r0, [pc, #4]	; (8002cac <__malloc_lock+0x8>)
 8002ca6:	f000 b811 	b.w	8002ccc <__retarget_lock_acquire_recursive>
 8002caa:	bf00      	nop
 8002cac:	20000114 	.word	0x20000114

08002cb0 <__malloc_unlock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <__malloc_unlock+0x8>)
 8002cb2:	f000 b80c 	b.w	8002cce <__retarget_lock_release_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	20000114 	.word	0x20000114

08002cbc <_malloc_usable_size_r>:
 8002cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc0:	1f18      	subs	r0, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bfbc      	itt	lt
 8002cc6:	580b      	ldrlt	r3, [r1, r0]
 8002cc8:	18c0      	addlt	r0, r0, r3
 8002cca:	4770      	bx	lr

08002ccc <__retarget_lock_acquire_recursive>:
 8002ccc:	4770      	bx	lr

08002cce <__retarget_lock_release_recursive>:
 8002cce:	4770      	bx	lr

08002cd0 <_init>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	bf00      	nop
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr

08002cdc <_fini>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	bf00      	nop
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr
