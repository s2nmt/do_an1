
pn532.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004578  08004578  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004578  08004578  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004578  08004578  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  080045f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080045f0  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3ae  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b6  00000000  00000000  0002f447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00031500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00032198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c1  00000000  00000000  00032d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaff  00000000  00000000  0004b541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fe8  00000000  00000000  0005a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cbc  00000000  00000000  000e307c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080042e4 	.word	0x080042e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080042e4 	.word	0x080042e4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0cc      	sub	sp, #304	; 0x130
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
	  uint8_t buff[255];
	  uint8_t uid[MIFARE_UID_MAX_LENGTH];
	  int32_t uid_len = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  uint32_t check = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800015e:	f000 ffb3 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000162:	f000 f863 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000166:	f000 f92b 	bl	80003c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800016a:	f000 f89b 	bl	80002a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800016e:	f000 f8c7 	bl	8000300 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8fb 	bl	800036c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PN532 pn532;
  /* USER CODE END 2 */
  //PN532_SPI_Init(&pn532);
  PN532_I2C_Init(&pn532);
 8000176:	463b      	mov	r3, r7
 8000178:	4618      	mov	r0, r3
 800017a:	f000 fd83 	bl	8000c84 <PN532_I2C_Init>
  PN532_GetFirmwareVersion(&pn532, buff);
 800017e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000182:	463b      	mov	r3, r7
 8000184:	4611      	mov	r1, r2
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fbd2 	bl	8000930 <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 800018c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000190:	463b      	mov	r3, r7
 8000192:	4611      	mov	r1, r2
 8000194:	4618      	mov	r0, r3
 8000196:	f000 fbcb 	bl	8000930 <PN532_GetFirmwareVersion>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d103      	bne.n	80001a8 <main+0x5c>
   // printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
	  check = 1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80001a6:	e002      	b.n	80001ae <main+0x62>
  } else {
   // return -1;
	  check = 0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  }
  PN532_SamConfiguration(&pn532);
 80001ae:	463b      	mov	r3, r7
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 fbe1 	bl	8000978 <PN532_SamConfiguration>
  check = 2;
 80001b6:	2302      	movs	r3, #2
 80001b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80001bc:	f107 0118 	add.w	r1, r7, #24
 80001c0:	4638      	mov	r0, r7
 80001c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001c6:	2200      	movs	r2, #0
 80001c8:	f000 fbf8 	bl	80009bc <PN532_ReadPassiveTarget>
 80001cc:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	    if (uid_len == PN532_STATUS_ERROR) {
 80001d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80001d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001d8:	d103      	bne.n	80001e2 <main+0x96>
	      printf(".");
 80001da:	202e      	movs	r0, #46	; 0x2e
 80001dc:	f003 f868 	bl	80032b0 <putchar>
 80001e0:	e7ec      	b.n	80001bc <main+0x70>
	    } else {
	      printf("Found card with UID: ");
 80001e2:	480f      	ldr	r0, [pc, #60]	; (8000220 <main+0xd4>)
 80001e4:	f003 f84c 	bl	8003280 <iprintf>
	      for (uint8_t i = 0; i < uid_len; i++) {
 80001e8:	2300      	movs	r3, #0
 80001ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80001ee:	e00d      	b.n	800020c <main+0xc0>
	        printf("%02x ", uid[i]);
 80001f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80001f4:	f107 0218 	add.w	r2, r7, #24
 80001f8:	5cd3      	ldrb	r3, [r2, r3]
 80001fa:	4619      	mov	r1, r3
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0xd8>)
 80001fe:	f003 f83f 	bl	8003280 <iprintf>
	      for (uint8_t i = 0; i < uid_len; i++) {
 8000202:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000206:	3301      	adds	r3, #1
 8000208:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800020c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000210:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000214:	429a      	cmp	r2, r3
 8000216:	dceb      	bgt.n	80001f0 <main+0xa4>
	      }
	      printf("\r\n");
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <main+0xdc>)
 800021a:	f003 f8cb 	bl	80033b4 <puts>
	    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 800021e:	e7cd      	b.n	80001bc <main+0x70>
 8000220:	080042fc 	.word	0x080042fc
 8000224:	08004314 	.word	0x08004314
 8000228:	0800431c 	.word	0x0800431c

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b090      	sub	sp, #64	; 0x40
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 f818 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fa6a 	bl	800273c <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800026e:	f000 f8f7 	bl	8000460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fcd6 	bl	8002c3c <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000296:	f000 f8e3 	bl	8000460 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002aa:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <MX_I2C1_Init+0x54>)
 80002ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002b0:	4a12      	ldr	r2, [pc, #72]	; (80002fc <MX_I2C1_Init+0x58>)
 80002b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002e2:	f001 f9f7 	bl	80016d4 <HAL_I2C_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002ec:	f000 f8b8 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000098 	.word	0x20000098
 80002f8:	40005400 	.word	0x40005400
 80002fc:	000186a0 	.word	0x000186a0

08000300 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_SPI1_Init+0x64>)
 8000306:	4a18      	ldr	r2, [pc, #96]	; (8000368 <MX_SPI1_Init+0x68>)
 8000308:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <MX_SPI1_Init+0x64>)
 800030c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000310:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_SPI1_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_SPI1_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_SPI1_Init+0x64>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_SPI1_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_SPI1_Init+0x64>)
 800032c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000330:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_SPI1_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <MX_SPI1_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_SPI1_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <MX_SPI1_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_SPI1_Init+0x64>)
 800034c:	220a      	movs	r2, #10
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000350:	4804      	ldr	r0, [pc, #16]	; (8000364 <MX_SPI1_Init+0x64>)
 8000352:	f002 fe01 	bl	8002f58 <HAL_SPI_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800035c:	f000 f880 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000134 	.word	0x20000134
 8000368:	40013000 	.word	0x40013000

0800036c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_USART1_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 80003a4:	f002 fe5c 	bl	8003060 <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ae:	f000 f857 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000ec 	.word	0x200000ec
 80003bc:	40013800 	.word	0x40013800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <MX_GPIO_Init+0x98>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <MX_GPIO_Init+0x98>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_GPIO_Init+0x98>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_GPIO_Init+0x98>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a19      	ldr	r2, [pc, #100]	; (8000458 <MX_GPIO_Init+0x98>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_GPIO_Init+0x98>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2101      	movs	r1, #1
 8000408:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_GPIO_Init+0x9c>)
 800040a:	f001 f94b 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PN532_RST_Pin|PN532_REQ_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	210a      	movs	r1, #10
 8000412:	4812      	ldr	r0, [pc, #72]	; (800045c <MX_GPIO_Init+0x9c>)
 8000414:	f001 f946 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8000418:	2301      	movs	r3, #1
 800041a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000420:	2301      	movs	r3, #1
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2302      	movs	r3, #2
 8000426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 0308 	add.w	r3, r7, #8
 800042c:	4619      	mov	r1, r3
 800042e:	480b      	ldr	r0, [pc, #44]	; (800045c <MX_GPIO_Init+0x9c>)
 8000430:	f000 ffb4 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PN532_RST_Pin PN532_REQ_Pin */
  GPIO_InitStruct.Pin = PN532_RST_Pin|PN532_REQ_Pin;
 8000434:	230a      	movs	r3, #10
 8000436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043c:	2301      	movs	r3, #1
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2302      	movs	r3, #2
 8000442:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0308 	add.w	r3, r7, #8
 8000448:	4619      	mov	r1, r3
 800044a:	4804      	ldr	r0, [pc, #16]	; (800045c <MX_GPIO_Init+0x9c>)
 800044c:	f000 ffa6 	bl	800139c <HAL_GPIO_Init>

}
 8000450:	bf00      	nop
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	40010c00 	.word	0x40010c00

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>

0800046a <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800046a:	b580      	push	{r7, lr}
 800046c:	b0c8      	sub	sp, #288	; 0x120
 800046e:	af00      	add	r7, sp, #0
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	6018      	str	r0, [r3, #0]
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	6019      	str	r1, [r3, #0]
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000480:	1dbb      	adds	r3, r7, #6
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	2bff      	cmp	r3, #255	; 0xff
 8000486:	d803      	bhi.n	8000490 <PN532_WriteFrame+0x26>
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d102      	bne.n	8000496 <PN532_WriteFrame+0x2c>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000490:	f04f 33ff 	mov.w	r3, #4294967295
 8000494:	e080      	b.n	8000598 <PN532_WriteFrame+0x12e>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	22ff      	movs	r2, #255	; 0xff
 80004b2:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80004ba:	e00e      	b.n	80004da <PN532_WriteFrame+0x70>
        checksum += frame[i];
 80004bc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80004c0:	f107 0214 	add.w	r2, r7, #20
 80004c4:	5cd2      	ldrb	r2, [r2, r3]
 80004c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80004ca:	4413      	add	r3, r2
 80004cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80004d0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80004d4:	3301      	adds	r3, #1
 80004d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80004da:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d9ec      	bls.n	80004bc <PN532_WriteFrame+0x52>
    }
    frame[3] = length & 0xFF;
 80004e2:	1dbb      	adds	r3, r7, #6
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80004ee:	1dbb      	adds	r3, r7, #6
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	425b      	negs	r3, r3
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80004fe:	2300      	movs	r3, #0
 8000500:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000504:	e01d      	b.n	8000542 <PN532_WriteFrame+0xd8>
        frame[5 + i] = data[i];
 8000506:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800050a:	f107 0208 	add.w	r2, r7, #8
 800050e:	6812      	ldr	r2, [r2, #0]
 8000510:	441a      	add	r2, r3
 8000512:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000516:	3305      	adds	r3, #5
 8000518:	7811      	ldrb	r1, [r2, #0]
 800051a:	f107 0214 	add.w	r2, r7, #20
 800051e:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000520:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000524:	f107 0208 	add.w	r2, r7, #8
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	4413      	add	r3, r2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000532:	4413      	add	r3, r2
 8000534:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000538:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800053c:	3301      	adds	r3, #1
 800053e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000542:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000546:	b29b      	uxth	r3, r3
 8000548:	1dba      	adds	r2, r7, #6
 800054a:	8812      	ldrh	r2, [r2, #0]
 800054c:	429a      	cmp	r2, r3
 800054e:	d8da      	bhi.n	8000506 <PN532_WriteFrame+0x9c>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	3305      	adds	r3, #5
 8000556:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 800055a:	43d2      	mvns	r2, r2
 800055c:	b2d1      	uxtb	r1, r2
 800055e:	f107 0214 	add.w	r2, r7, #20
 8000562:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	3306      	adds	r3, #6
 800056a:	f107 0214 	add.w	r2, r7, #20
 800056e:	2100      	movs	r1, #0
 8000570:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	1dba      	adds	r2, r7, #6
 800057c:	8812      	ldrh	r2, [r2, #0]
 800057e:	3207      	adds	r2, #7
 8000580:	b291      	uxth	r1, r2
 8000582:	f107 0214 	add.w	r2, r7, #20
 8000586:	4610      	mov	r0, r2
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <PN532_WriteFrame+0x12c>
        return PN532_STATUS_ERROR;
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	e000      	b.n	8000598 <PN532_WriteFrame+0x12e>
    }
    return PN532_STATUS_OK;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b0c8      	sub	sp, #288	; 0x120
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	6018      	str	r0, [r3, #0]
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	6019      	str	r1, [r3, #0]
 80005b6:	1dbb      	adds	r3, r7, #6
 80005b8:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	1dba      	adds	r2, r7, #6
 80005ca:	8812      	ldrh	r2, [r2, #0]
 80005cc:	3207      	adds	r2, #7
 80005ce:	b291      	uxth	r1, r2
 80005d0:	f107 0214 	add.w	r2, r7, #20
 80005d4:	4610      	mov	r0, r2
 80005d6:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 80005de:	e014      	b.n	800060a <PN532_ReadFrame+0x66>
        offset += 1;
 80005e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80005e4:	3301      	adds	r3, #1
 80005e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 80005ea:	1dbb      	adds	r3, r7, #6
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	1dda      	adds	r2, r3, #7
 80005f0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80005f4:	429a      	cmp	r2, r3
 80005f6:	da08      	bge.n	800060a <PN532_ReadFrame+0x66>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	484e      	ldr	r0, [pc, #312]	; (800073c <PN532_ReadFrame+0x198>)
 8000602:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	e092      	b.n	8000730 <PN532_ReadFrame+0x18c>
    while (buff[offset] == 0x00) {
 800060a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800060e:	f107 0214 	add.w	r2, r7, #20
 8000612:	5cd3      	ldrb	r3, [r2, r3]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0e3      	beq.n	80005e0 <PN532_ReadFrame+0x3c>
        }
    }
    if (buff[offset] != 0xFF) {
 8000618:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800061c:	f107 0214 	add.w	r2, r7, #20
 8000620:	5cd3      	ldrb	r3, [r2, r3]
 8000622:	2bff      	cmp	r3, #255	; 0xff
 8000624:	d008      	beq.n	8000638 <PN532_ReadFrame+0x94>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4843      	ldr	r0, [pc, #268]	; (800073c <PN532_ReadFrame+0x198>)
 8000630:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e07b      	b.n	8000730 <PN532_ReadFrame+0x18c>
    }
    offset += 1;
 8000638:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800063c:	3301      	adds	r3, #1
 800063e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8000642:	1dbb      	adds	r3, r7, #6
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	1dda      	adds	r2, r3, #7
 8000648:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800064c:	429a      	cmp	r2, r3
 800064e:	da08      	bge.n	8000662 <PN532_ReadFrame+0xbe>
        pn532->log("Response contains no data!");
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4839      	ldr	r0, [pc, #228]	; (8000740 <PN532_ReadFrame+0x19c>)
 800065a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	e066      	b.n	8000730 <PN532_ReadFrame+0x18c>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000662:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000666:	f107 0214 	add.w	r2, r7, #20
 800066a:	5cd3      	ldrb	r3, [r2, r3]
 800066c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000670:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000674:	3301      	adds	r3, #1
 8000676:	f107 0214 	add.w	r2, r7, #20
 800067a:	5cd2      	ldrb	r2, [r2, r3]
 800067c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000680:	4413      	add	r3, r2
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d008      	beq.n	800069a <PN532_ReadFrame+0xf6>
        pn532->log("Response length checksum did not match length!");
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	482c      	ldr	r0, [pc, #176]	; (8000744 <PN532_ReadFrame+0x1a0>)
 8000692:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	e04a      	b.n	8000730 <PN532_ReadFrame+0x18c>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800069a:	2300      	movs	r3, #0
 800069c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80006a0:	e012      	b.n	80006c8 <PN532_ReadFrame+0x124>
        checksum += buff[offset + 2 + i];
 80006a2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80006a6:	1c9a      	adds	r2, r3, #2
 80006a8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80006ac:	4413      	add	r3, r2
 80006ae:	f107 0214 	add.w	r2, r7, #20
 80006b2:	5cd2      	ldrb	r2, [r2, r3]
 80006b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80006b8:	4413      	add	r3, r2
 80006ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80006be:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80006c2:	3301      	adds	r3, #1
 80006c4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80006c8:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 80006cc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d2e6      	bcs.n	80006a2 <PN532_ReadFrame+0xfe>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 80006d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <PN532_ReadFrame+0x14a>
        pn532->log("Response checksum did not match expected checksum");
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4818      	ldr	r0, [pc, #96]	; (8000748 <PN532_ReadFrame+0x1a4>)
 80006e6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	e020      	b.n	8000730 <PN532_ReadFrame+0x18c>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80006f4:	e014      	b.n	8000720 <PN532_ReadFrame+0x17c>
        response[i] = buff[offset + 2 + i];
 80006f6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80006fa:	1c9a      	adds	r2, r3, #2
 80006fc:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000700:	441a      	add	r2, r3
 8000702:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000706:	f107 0108 	add.w	r1, r7, #8
 800070a:	6809      	ldr	r1, [r1, #0]
 800070c:	440b      	add	r3, r1
 800070e:	f107 0114 	add.w	r1, r7, #20
 8000712:	5c8a      	ldrb	r2, [r1, r2]
 8000714:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000716:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800071a:	3301      	adds	r3, #1
 800071c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000720:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8000724:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000728:	429a      	cmp	r2, r3
 800072a:	d3e4      	bcc.n	80006f6 <PN532_ReadFrame+0x152>
    }
    return frame_len;
 800072c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000730:	4618      	mov	r0, r3
 8000732:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08004320 	.word	0x08004320
 8000740:	08004354 	.word	0x08004354
 8000744:	08004370 	.word	0x08004370
 8000748:	080043a0 	.word	0x080043a0

0800074c <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b0c7      	sub	sp, #284	; 0x11c
 8000750:	af00      	add	r7, sp, #0
 8000752:	f107 040c 	add.w	r4, r7, #12
 8000756:	6020      	str	r0, [r4, #0]
 8000758:	4608      	mov	r0, r1
 800075a:	1d39      	adds	r1, r7, #4
 800075c:	600a      	str	r2, [r1, #0]
 800075e:	4619      	mov	r1, r3
 8000760:	f107 030b 	add.w	r3, r7, #11
 8000764:	4602      	mov	r2, r0
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	460a      	mov	r2, r1
 800076e:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	22d4      	movs	r2, #212	; 0xd4
 8000776:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	f107 020b 	add.w	r2, r7, #11
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000784:	2300      	movs	r3, #0
 8000786:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800078a:	e010      	b.n	80007ae <PN532_CallFunction+0x62>
        buff[2 + i] = params[i];
 800078c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000790:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000794:	441a      	add	r2, r3
 8000796:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800079a:	3302      	adds	r3, #2
 800079c:	7811      	ldrb	r1, [r2, #0]
 800079e:	f107 0210 	add.w	r2, r7, #16
 80007a2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 80007a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007a8:	3301      	adds	r3, #1
 80007aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80007ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d8e7      	bhi.n	800078c <PN532_CallFunction+0x40>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80007bc:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80007c0:	3302      	adds	r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f107 0110 	add.w	r1, r7, #16
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	f7ff fe4c 	bl	800046a <PN532_WriteFrame>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00d      	beq.n	80007f4 <PN532_CallFunction+0xa8>
        pn532->wakeup();
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	484d      	ldr	r0, [pc, #308]	; (8000920 <PN532_CallFunction+0x1d4>)
 80007ec:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	e08f      	b.n	8000914 <PN532_CallFunction+0x1c8>
    }
    if (!pn532->wait_ready(timeout)) {
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000800:	4798      	blx	r3
 8000802:	4603      	mov	r3, r0
 8000804:	f083 0301 	eor.w	r3, r3, #1
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <PN532_CallFunction+0xc8>
        return PN532_STATUS_ERROR;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	e07f      	b.n	8000914 <PN532_CallFunction+0x1c8>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f107 0210 	add.w	r2, r7, #16
 8000820:	2106      	movs	r1, #6
 8000822:	4610      	mov	r0, r2
 8000824:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800082c:	e018      	b.n	8000860 <PN532_CallFunction+0x114>
        if (PN532_ACK[i] != buff[i]) {
 800082e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000832:	4a3c      	ldr	r2, [pc, #240]	; (8000924 <PN532_CallFunction+0x1d8>)
 8000834:	5cd2      	ldrb	r2, [r2, r3]
 8000836:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800083a:	f107 0110 	add.w	r1, r7, #16
 800083e:	5ccb      	ldrb	r3, [r1, r3]
 8000840:	429a      	cmp	r2, r3
 8000842:	d008      	beq.n	8000856 <PN532_CallFunction+0x10a>
            pn532->log("Did not receive expected ACK from PN532!");
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4836      	ldr	r0, [pc, #216]	; (8000928 <PN532_CallFunction+0x1dc>)
 800084e:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	e05e      	b.n	8000914 <PN532_CallFunction+0x1c8>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000856:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800085a:	3301      	adds	r3, #1
 800085c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000860:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000864:	2b05      	cmp	r3, #5
 8000866:	d9e2      	bls.n	800082e <PN532_CallFunction+0xe2>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000874:	4798      	blx	r3
 8000876:	4603      	mov	r3, r0
 8000878:	f083 0301 	eor.w	r3, r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <PN532_CallFunction+0x13c>
        return PN532_STATUS_ERROR;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	e045      	b.n	8000914 <PN532_CallFunction+0x1c8>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3302      	adds	r3, #2
 8000890:	b29a      	uxth	r2, r3
 8000892:	f107 0110 	add.w	r1, r7, #16
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	6818      	ldr	r0, [r3, #0]
 800089c:	f7ff fe82 	bl	80005a4 <PN532_ReadFrame>
 80008a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2bd5      	cmp	r3, #213	; 0xd5
 80008ac:	d109      	bne.n	80008c2 <PN532_CallFunction+0x176>
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	785b      	ldrb	r3, [r3, #1]
 80008b4:	461a      	mov	r2, r3
 80008b6:	f107 030b 	add.w	r3, r7, #11
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	429a      	cmp	r2, r3
 80008c0:	d008      	beq.n	80008d4 <PN532_CallFunction+0x188>
        pn532->log("Received unexpected command response!");
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	4818      	ldr	r0, [pc, #96]	; (800092c <PN532_CallFunction+0x1e0>)
 80008cc:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e01f      	b.n	8000914 <PN532_CallFunction+0x1c8>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80008da:	e010      	b.n	80008fe <PN532_CallFunction+0x1b2>
        response[i] = buff[i + 2];
 80008dc:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80008e0:	1c9a      	adds	r2, r3, #2
 80008e2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80008e6:	1d39      	adds	r1, r7, #4
 80008e8:	6809      	ldr	r1, [r1, #0]
 80008ea:	440b      	add	r3, r1
 80008ec:	f107 0110 	add.w	r1, r7, #16
 80008f0:	5c8a      	ldrb	r2, [r1, r2]
 80008f2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 80008f4:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80008f8:	3301      	adds	r3, #1
 80008fa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80008fe:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000902:	b29b      	uxth	r3, r3
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	8812      	ldrh	r2, [r2, #0]
 800090a:	429a      	cmp	r2, r3
 800090c:	d8e6      	bhi.n	80008dc <PN532_CallFunction+0x190>
    }
    // The the number of bytes read
    return frame_len - 2;
 800090e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000912:	3b02      	subs	r3, #2
}
 8000914:	4618      	mov	r0, r3
 8000916:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800091a:	46bd      	mov	sp, r7
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	bf00      	nop
 8000920:	080043d4 	.word	0x080043d4
 8000924:	080044ac 	.word	0x080044ac
 8000928:	080043e8 	.word	0x080043e8
 800092c:	08004414 	.word	0x08004414

08000930 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af04      	add	r7, sp, #16
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 800093a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800093e:	9302      	str	r3, [sp, #8]
 8000940:	2300      	movs	r3, #0
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	2300      	movs	r3, #0
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2304      	movs	r3, #4
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	2102      	movs	r1, #2
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fefc 	bl	800074c <PN532_CallFunction>
 8000954:	4603      	mov	r3, r0
 8000956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095a:	d106      	bne.n	800096a <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <PN532_GetFirmwareVersion+0x44>)
 8000962:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	e000      	b.n	800096c <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	0800443c 	.word	0x0800443c

08000978 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af04      	add	r7, sp, #16
 800097e:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <PN532_SamConfiguration+0x40>)
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	4611      	mov	r1, r2
 800098a:	8019      	strh	r1, [r3, #0]
 800098c:	3302      	adds	r3, #2
 800098e:	0c12      	lsrs	r2, r2, #16
 8000990:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000996:	9302      	str	r3, [sp, #8]
 8000998:	2303      	movs	r3, #3
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2114      	movs	r1, #20
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fecf 	bl	800074c <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08004458 	.word	0x08004458

080009bc <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	; 0x40
 80009c0:	af04      	add	r7, sp, #16
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	4613      	mov	r3, r2
 80009ca:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 80009cc:	2301      	movs	r3, #1
 80009ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 80009d8:	f107 0210 	add.w	r2, r7, #16
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	9302      	str	r3, [sp, #8]
 80009e0:	2302      	movs	r3, #2
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2313      	movs	r3, #19
 80009ec:	214a      	movs	r1, #74	; 0x4a
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff feac 	bl	800074c <PN532_CallFunction>
 80009f4:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	da02      	bge.n	8000a02 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	e02f      	b.n	8000a62 <PN532_ReadPassiveTarget+0xa6>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000a02:	7c3b      	ldrb	r3, [r7, #16]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d006      	beq.n	8000a16 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4817      	ldr	r0, [pc, #92]	; (8000a6c <PN532_ReadPassiveTarget+0xb0>)
 8000a0e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	e025      	b.n	8000a62 <PN532_ReadPassiveTarget+0xa6>
    }
    if (buff[5] > 7) {
 8000a16:	7d7b      	ldrb	r3, [r7, #21]
 8000a18:	2b07      	cmp	r3, #7
 8000a1a:	d906      	bls.n	8000a2a <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4813      	ldr	r0, [pc, #76]	; (8000a70 <PN532_ReadPassiveTarget+0xb4>)
 8000a22:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	e01b      	b.n	8000a62 <PN532_ReadPassiveTarget+0xa6>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a30:	e011      	b.n	8000a56 <PN532_ReadPassiveTarget+0x9a>
        response[i] = buff[6 + i];
 8000a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a36:	1d9a      	adds	r2, r3, #6
 8000a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	440b      	add	r3, r1
 8000a40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000a44:	440a      	add	r2, r1
 8000a46:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000a4a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a50:	3301      	adds	r3, #1
 8000a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a56:	7d7b      	ldrb	r3, [r7, #21]
 8000a58:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3e8      	bcc.n	8000a32 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000a60:	7d7b      	ldrb	r3, [r7, #21]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3730      	adds	r7, #48	; 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	0800445c 	.word	0x0800445c
 8000a70:	0800447c 	.word	0x0800447c

08000a74 <PN532_Reset>:
extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <PN532_Reset+0x3c>)
 8000a7e:	f000 fe11 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000a82:	2064      	movs	r0, #100	; 0x64
 8000a84:	f000 fb82 	bl	800118c <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <PN532_Reset+0x3c>)
 8000a8e:	f000 fe09 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a96:	f000 fb79 	bl	800118c <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <PN532_Reset+0x3c>)
 8000aa0:	f000 fe00 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	; 0x64
 8000aa6:	f000 fb71 	bl	800118c <HAL_Delay>
    return PN532_STATUS_OK;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010800 	.word	0x40010800

08000ab4 <PN532_Log>:

void PN532_Log(const char* log) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <PN532_Log+0x18>)
 8000ac0:	f002 fbde 	bl	8003280 <iprintf>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	080044a4 	.word	0x080044a4

08000ad0 <i2c_read>:
 * End: SPI
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t* data, uint16_t count) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	220a      	movs	r2, #10
 8000ae0:	9200      	str	r2, [sp, #0]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	2148      	movs	r1, #72	; 0x48
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <i2c_read+0x24>)
 8000ae8:	f001 f836 	bl	8001b58 <HAL_I2C_Master_Receive>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000098 	.word	0x20000098

08000af8 <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	220a      	movs	r2, #10
 8000b08:	9200      	str	r2, [sp, #0]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	2148      	movs	r1, #72	; 0x48
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <i2c_write+0x24>)
 8000b10:	f000 ff24 	bl	800195c <HAL_I2C_Master_Transmit>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000098 	.word	0x20000098

08000b20 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	466b      	mov	r3, sp
 8000b2e:	461d      	mov	r5, r3
    uint8_t status[] = {0x00};
 8000b30:	2300      	movs	r3, #0
 8000b32:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	1c5c      	adds	r4, r3, #1
 8000b38:	1e63      	subs	r3, r4, #1
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f04f 0100 	mov.w	r1, #0
 8000b44:	f04f 0200 	mov.w	r2, #0
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	00cb      	lsls	r3, r1, #3
 8000b4e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b52:	00c2      	lsls	r2, r0, #3
 8000b54:	4623      	mov	r3, r4
 8000b56:	4618      	mov	r0, r3
 8000b58:	f04f 0100 	mov.w	r1, #0
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	00cb      	lsls	r3, r1, #3
 8000b66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b6a:	00c2      	lsls	r2, r0, #3
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	3307      	adds	r3, #7
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	ebad 0d03 	sub.w	sp, sp, r3
 8000b78:	466b      	mov	r3, sp
 8000b7a:	3300      	adds	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2101      	movs	r1, #1
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ffa3 	bl	8000ad0 <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8000b8a:	7a3b      	ldrb	r3, [r7, #8]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d002      	beq.n	8000b96 <PN532_I2C_ReadData+0x76>
        return PN532_STATUS_ERROR;
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	e01b      	b.n	8000bce <PN532_I2C_ReadData+0xae>
    }
    i2c_read(frame, count + 1);
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	f7ff ff95 	bl	8000ad0 <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]
 8000baa:	e00a      	b.n	8000bc2 <PN532_I2C_ReadData+0xa2>
        data[i] = frame[i + 1];
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	440b      	add	r3, r1
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	5c8a      	ldrb	r2, [r1, r2]
 8000bba:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	75fb      	strb	r3, [r7, #23]
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8ef      	bhi.n	8000bac <PN532_I2C_ReadData+0x8c>
    }
    return PN532_STATUS_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	46ad      	mov	sp, r5
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bdb0      	pop	{r4, r5, r7, pc}

08000bd8 <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	4619      	mov	r1, r3
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff85 	bl	8000af8 <i2c_write>
    return PN532_STATUS_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8000c00:	2300      	movs	r3, #0
 8000c02:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8000c04:	f000 fab8 	bl	8001178 <HAL_GetTick>
 8000c08:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8000c0a:	e00d      	b.n	8000c28 <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	2101      	movs	r1, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff5c 	bl	8000ad0 <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 8000c18:	7a3b      	ldrb	r3, [r7, #8]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d101      	bne.n	8000c22 <PN532_I2C_WaitReady+0x2a>
            return true;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00b      	b.n	8000c3a <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 8000c22:	2005      	movs	r0, #5
 8000c24:	f000 fab2 	bl	800118c <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8000c28:	f000 faa6 	bl	8001178 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8e9      	bhi.n	8000c0c <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    // TODO
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <PN532_I2C_Wakeup+0x3c>)
 8000c4e:	f000 fd29 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c52:	2064      	movs	r0, #100	; 0x64
 8000c54:	f000 fa9a 	bl	800118c <HAL_Delay>
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <PN532_I2C_Wakeup+0x3c>)
 8000c5e:	f000 fd21 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	; 0x64
 8000c64:	f000 fa92 	bl	800118c <HAL_Delay>
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <PN532_I2C_Wakeup+0x3c>)
 8000c6e:	f000 fd19 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c76:	f000 fa89 	bl	800118c <HAL_Delay>
    return PN532_STATUS_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <PN532_I2C_Init+0x3c>)
 8000c90:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <PN532_I2C_Init+0x40>)
 8000c96:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <PN532_I2C_Init+0x44>)
 8000c9c:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <PN532_I2C_Init+0x48>)
 8000ca2:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <PN532_I2C_Init+0x4c>)
 8000ca8:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <PN532_I2C_Init+0x50>)
 8000cae:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	4798      	blx	r3
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08000a75 	.word	0x08000a75
 8000cc4:	08000b21 	.word	0x08000b21
 8000cc8:	08000bd9 	.word	0x08000bd9
 8000ccc:	08000bf9 	.word	0x08000bf9
 8000cd0:	08000c45 	.word	0x08000c45
 8000cd4:	08000ab5 	.word	0x08000ab5

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_MspInit+0x5c>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_MspInit+0x5c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MspInit+0x60>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_MspInit+0x60>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000

08000d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_I2C_MspInit+0x70>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d123      	bne.n	8000da4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d74:	23c0      	movs	r3, #192	; 0xc0
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <HAL_I2C_MspInit+0x78>)
 8000d88:	f000 fb08 	bl	800139c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d96:	61d3      	str	r3, [r2, #28]
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d12f      	bne.n	8000e38 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_SPI_MspInit+0x8c>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_SPI_MspInit+0x8c>)
 8000dde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_SPI_MspInit+0x8c>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_SPI_MspInit+0x8c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_SPI_MspInit+0x8c>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_SPI_MspInit+0x8c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e08:	23a0      	movs	r3, #160	; 0xa0
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480b      	ldr	r0, [pc, #44]	; (8000e48 <HAL_SPI_MspInit+0x90>)
 8000e1c:	f000 fabe 	bl	800139c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e20:	2340      	movs	r3, #64	; 0x40
 8000e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_SPI_MspInit+0x90>)
 8000e34:	f000 fab2 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40013000 	.word	0x40013000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010800 	.word	0x40010800

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <HAL_UART_MspInit+0x8c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d131      	bne.n	8000ed0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_UART_MspInit+0x90>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <HAL_UART_MspInit+0x90>)
 8000e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_UART_MspInit+0x90>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_UART_MspInit+0x90>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_UART_MspInit+0x90>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_UART_MspInit+0x90>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <HAL_UART_MspInit+0x94>)
 8000eb2:	f000 fa73 	bl	800139c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_UART_MspInit+0x94>)
 8000ecc:	f000 fa66 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40013800 	.word	0x40013800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f913 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e00a      	b.n	8000f5a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f44:	f3af 8000 	nop.w
 8000f48:	4601      	mov	r1, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	60ba      	str	r2, [r7, #8]
 8000f50:	b2ca      	uxtb	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dbf0      	blt.n	8000f44 <_read+0x12>
	}

return len;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e009      	b.n	8000f92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbf1      	blt.n	8000f7e <_write+0x12>
	}
	return len;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_close>:

int _close(int file)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fca:	605a      	str	r2, [r3, #4]
	return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <_isatty>:

int _isatty(int file)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	return 1;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f002 f8f2 	bl	800321c <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20005000 	.word	0x20005000
 8001064:	00000400 	.word	0x00000400
 8001068:	2000008c 	.word	0x2000008c
 800106c:	200001a0 	.word	0x200001a0

08001070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800107c:	f7ff fff8 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001082:	490c      	ldr	r1, [pc, #48]	; (80010b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001084:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001098:	4c09      	ldr	r4, [pc, #36]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f002 f8bf 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010aa:	f7ff f84f 	bl	800014c <main>
  bx lr
 80010ae:	4770      	bx	lr
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b8:	08004580 	.word	0x08004580
  ldr r2, =_sbss
 80010bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010c0:	200001a0 	.word	0x200001a0

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_Init+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_Init+0x28>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f92b 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	200f      	movs	r0, #15
 80010e0:	f000 f808 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fdf8 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f935 	bl	8001382 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f000 f90b 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	20000008 	.word	0x20000008
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x1c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_IncTick+0x20>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_IncTick+0x20>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	20000008 	.word	0x20000008
 8001174:	2000018c 	.word	0x2000018c

08001178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b02      	ldr	r3, [pc, #8]	; (8001188 <HAL_GetTick+0x10>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	2000018c 	.word	0x2000018c

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff fff0 	bl	8001178 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffe0 	bl	8001178 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff90 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff49 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff5e 	bl	800121c <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff90 	bl	800128c <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5f 	bl	8001238 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffb0 	bl	80012f0 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b08b      	sub	sp, #44	; 0x2c
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	e169      	b.n	8001684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013b0:	2201      	movs	r2, #1
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8158 	bne.w	800167e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a9a      	ldr	r2, [pc, #616]	; (800163c <HAL_GPIO_Init+0x2a0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d05e      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013d8:	4a98      	ldr	r2, [pc, #608]	; (800163c <HAL_GPIO_Init+0x2a0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d875      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013de:	4a98      	ldr	r2, [pc, #608]	; (8001640 <HAL_GPIO_Init+0x2a4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d058      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013e4:	4a96      	ldr	r2, [pc, #600]	; (8001640 <HAL_GPIO_Init+0x2a4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d86f      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013ea:	4a96      	ldr	r2, [pc, #600]	; (8001644 <HAL_GPIO_Init+0x2a8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d052      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013f0:	4a94      	ldr	r2, [pc, #592]	; (8001644 <HAL_GPIO_Init+0x2a8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d869      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013f6:	4a94      	ldr	r2, [pc, #592]	; (8001648 <HAL_GPIO_Init+0x2ac>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d04c      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013fc:	4a92      	ldr	r2, [pc, #584]	; (8001648 <HAL_GPIO_Init+0x2ac>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d863      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 8001402:	4a92      	ldr	r2, [pc, #584]	; (800164c <HAL_GPIO_Init+0x2b0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d046      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 8001408:	4a90      	ldr	r2, [pc, #576]	; (800164c <HAL_GPIO_Init+0x2b0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d85d      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 800140e:	2b12      	cmp	r3, #18
 8001410:	d82a      	bhi.n	8001468 <HAL_GPIO_Init+0xcc>
 8001412:	2b12      	cmp	r3, #18
 8001414:	d859      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <HAL_GPIO_Init+0x80>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	08001497 	.word	0x08001497
 8001420:	08001471 	.word	0x08001471
 8001424:	08001483 	.word	0x08001483
 8001428:	080014c5 	.word	0x080014c5
 800142c:	080014cb 	.word	0x080014cb
 8001430:	080014cb 	.word	0x080014cb
 8001434:	080014cb 	.word	0x080014cb
 8001438:	080014cb 	.word	0x080014cb
 800143c:	080014cb 	.word	0x080014cb
 8001440:	080014cb 	.word	0x080014cb
 8001444:	080014cb 	.word	0x080014cb
 8001448:	080014cb 	.word	0x080014cb
 800144c:	080014cb 	.word	0x080014cb
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014cb 	.word	0x080014cb
 8001458:	080014cb 	.word	0x080014cb
 800145c:	080014cb 	.word	0x080014cb
 8001460:	08001479 	.word	0x08001479
 8001464:	0800148d 	.word	0x0800148d
 8001468:	4a79      	ldr	r2, [pc, #484]	; (8001650 <HAL_GPIO_Init+0x2b4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800146e:	e02c      	b.n	80014ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e029      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	3304      	adds	r3, #4
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e024      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	3308      	adds	r3, #8
 8001488:	623b      	str	r3, [r7, #32]
          break;
 800148a:	e01f      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	330c      	adds	r3, #12
 8001492:	623b      	str	r3, [r7, #32]
          break;
 8001494:	e01a      	b.n	80014cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800149e:	2304      	movs	r3, #4
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e013      	b.n	80014cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ac:	2308      	movs	r3, #8
 80014ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	611a      	str	r2, [r3, #16]
          break;
 80014b6:	e009      	b.n	80014cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	615a      	str	r2, [r3, #20]
          break;
 80014c2:	e003      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_Init+0x130>
          break;
 80014ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d801      	bhi.n	80014d6 <HAL_GPIO_Init+0x13a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	e001      	b.n	80014da <HAL_GPIO_Init+0x13e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3304      	adds	r3, #4
 80014da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2bff      	cmp	r3, #255	; 0xff
 80014e0:	d802      	bhi.n	80014e8 <HAL_GPIO_Init+0x14c>
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	e002      	b.n	80014ee <HAL_GPIO_Init+0x152>
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	3b08      	subs	r3, #8
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	210f      	movs	r1, #15
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	6a39      	ldr	r1, [r7, #32]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	431a      	orrs	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80b1 	beq.w	800167e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800151c:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a4c      	ldr	r2, [pc, #304]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_GPIO_Init+0x2bc>)
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a40      	ldr	r2, [pc, #256]	; (800165c <HAL_GPIO_Init+0x2c0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d013      	beq.n	8001588 <HAL_GPIO_Init+0x1ec>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a3f      	ldr	r2, [pc, #252]	; (8001660 <HAL_GPIO_Init+0x2c4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00d      	beq.n	8001584 <HAL_GPIO_Init+0x1e8>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3e      	ldr	r2, [pc, #248]	; (8001664 <HAL_GPIO_Init+0x2c8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_Init+0x1e4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a3d      	ldr	r2, [pc, #244]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_GPIO_Init+0x1e0>
 8001578:	2303      	movs	r3, #3
 800157a:	e006      	b.n	800158a <HAL_GPIO_Init+0x1ee>
 800157c:	2304      	movs	r3, #4
 800157e:	e004      	b.n	800158a <HAL_GPIO_Init+0x1ee>
 8001580:	2302      	movs	r3, #2
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0x1ee>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_GPIO_Init+0x1ee>
 8001588:	2300      	movs	r3, #0
 800158a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158c:	f002 0203 	and.w	r2, r2, #3
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4093      	lsls	r3, r2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800159a:	492f      	ldr	r1, [pc, #188]	; (8001658 <HAL_GPIO_Init+0x2bc>)
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	492c      	ldr	r1, [pc, #176]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4928      	ldr	r1, [pc, #160]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	4922      	ldr	r1, [pc, #136]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	491e      	ldr	r1, [pc, #120]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4918      	ldr	r1, [pc, #96]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	43db      	mvns	r3, r3
 800161a:	4914      	ldr	r1, [pc, #80]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800161c:	4013      	ands	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d021      	beq.n	8001670 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	490e      	ldr	r1, [pc, #56]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e021      	b.n	800167e <HAL_GPIO_Init+0x2e2>
 800163a:	bf00      	nop
 800163c:	10320000 	.word	0x10320000
 8001640:	10310000 	.word	0x10310000
 8001644:	10220000 	.word	0x10220000
 8001648:	10210000 	.word	0x10210000
 800164c:	10120000 	.word	0x10120000
 8001650:	10110000 	.word	0x10110000
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40011000 	.word	0x40011000
 8001668:	40011400 	.word	0x40011400
 800166c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_GPIO_Init+0x304>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	43db      	mvns	r3, r3
 8001678:	4909      	ldr	r1, [pc, #36]	; (80016a0 <HAL_GPIO_Init+0x304>)
 800167a:	4013      	ands	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	3301      	adds	r3, #1
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	f47f ae8e 	bne.w	80013b0 <HAL_GPIO_Init+0x14>
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	372c      	adds	r7, #44	; 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016c0:	e003      	b.n	80016ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	611a      	str	r2, [r3, #16]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e12b      	b.n	800193e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fb1e 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2224      	movs	r2, #36	; 0x24
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001738:	f001 fbc8 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 800173c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a81      	ldr	r2, [pc, #516]	; (8001948 <HAL_I2C_Init+0x274>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d807      	bhi.n	8001758 <HAL_I2C_Init+0x84>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4a80      	ldr	r2, [pc, #512]	; (800194c <HAL_I2C_Init+0x278>)
 800174c:	4293      	cmp	r3, r2
 800174e:	bf94      	ite	ls
 8001750:	2301      	movls	r3, #1
 8001752:	2300      	movhi	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e006      	b.n	8001766 <HAL_I2C_Init+0x92>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a7d      	ldr	r2, [pc, #500]	; (8001950 <HAL_I2C_Init+0x27c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	bf94      	ite	ls
 8001760:	2301      	movls	r3, #1
 8001762:	2300      	movhi	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0e7      	b.n	800193e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4a78      	ldr	r2, [pc, #480]	; (8001954 <HAL_I2C_Init+0x280>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0c9b      	lsrs	r3, r3, #18
 8001778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a6a      	ldr	r2, [pc, #424]	; (8001948 <HAL_I2C_Init+0x274>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d802      	bhi.n	80017a8 <HAL_I2C_Init+0xd4>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3301      	adds	r3, #1
 80017a6:	e009      	b.n	80017bc <HAL_I2C_Init+0xe8>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	4a69      	ldr	r2, [pc, #420]	; (8001958 <HAL_I2C_Init+0x284>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	495c      	ldr	r1, [pc, #368]	; (8001948 <HAL_I2C_Init+0x274>)
 80017d8:	428b      	cmp	r3, r1
 80017da:	d819      	bhi.n	8001810 <HAL_I2C_Init+0x13c>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1e59      	subs	r1, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017f0:	400b      	ands	r3, r1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00a      	beq.n	800180c <HAL_I2C_Init+0x138>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1e59      	subs	r1, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fbb1 f3f3 	udiv	r3, r1, r3
 8001804:	3301      	adds	r3, #1
 8001806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180a:	e051      	b.n	80018b0 <HAL_I2C_Init+0x1dc>
 800180c:	2304      	movs	r3, #4
 800180e:	e04f      	b.n	80018b0 <HAL_I2C_Init+0x1dc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d111      	bne.n	800183c <HAL_I2C_Init+0x168>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e58      	subs	r0, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	440b      	add	r3, r1
 8001826:	fbb0 f3f3 	udiv	r3, r0, r3
 800182a:	3301      	adds	r3, #1
 800182c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	e012      	b.n	8001862 <HAL_I2C_Init+0x18e>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	0099      	lsls	r1, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001852:	3301      	adds	r3, #1
 8001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Init+0x196>
 8001866:	2301      	movs	r3, #1
 8001868:	e022      	b.n	80018b0 <HAL_I2C_Init+0x1dc>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10e      	bne.n	8001890 <HAL_I2C_Init+0x1bc>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1e58      	subs	r0, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	440b      	add	r3, r1
 8001880:	fbb0 f3f3 	udiv	r3, r0, r3
 8001884:	3301      	adds	r3, #1
 8001886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188e:	e00f      	b.n	80018b0 <HAL_I2C_Init+0x1dc>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e58      	subs	r0, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	0099      	lsls	r1, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	6809      	ldr	r1, [r1, #0]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6911      	ldr	r1, [r2, #16]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68d2      	ldr	r2, [r2, #12]
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	000186a0 	.word	0x000186a0
 800194c:	001e847f 	.word	0x001e847f
 8001950:	003d08ff 	.word	0x003d08ff
 8001954:	431bde83 	.word	0x431bde83
 8001958:	10624dd3 	.word	0x10624dd3

0800195c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	817b      	strh	r3, [r7, #10]
 800196c:	4613      	mov	r3, r2
 800196e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff fc02 	bl	8001178 <HAL_GetTick>
 8001974:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b20      	cmp	r3, #32
 8001980:	f040 80e0 	bne.w	8001b44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2319      	movs	r3, #25
 800198a:	2201      	movs	r2, #1
 800198c:	4970      	ldr	r1, [pc, #448]	; (8001b50 <HAL_I2C_Master_Transmit+0x1f4>)
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fc9e 	bl	80022d0 <I2C_WaitOnFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800199a:	2302      	movs	r3, #2
 800199c:	e0d3      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_I2C_Master_Transmit+0x50>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e0cc      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d007      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2221      	movs	r2, #33	; 0x21
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2210      	movs	r2, #16
 80019ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a50      	ldr	r2, [pc, #320]	; (8001b54 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a14:	8979      	ldrh	r1, [r7, #10]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	6a3a      	ldr	r2, [r7, #32]
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fb08 	bl	8002030 <I2C_MasterRequestWrite>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e08d      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a40:	e066      	b.n	8001b10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fd5c 	bl	8002504 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00d      	beq.n	8001a6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d107      	bne.n	8001a6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06b      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_I2C_Master_Transmit+0x188>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	6a39      	ldr	r1, [r7, #32]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fd53 	bl	8002594 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d107      	bne.n	8001b0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e01a      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d194      	bne.n	8001a42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	00100002 	.word	0x00100002
 8001b54:	ffff0000 	.word	0xffff0000

08001b58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	461a      	mov	r2, r3
 8001b64:	460b      	mov	r3, r1
 8001b66:	817b      	strh	r3, [r7, #10]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff fb02 	bl	8001178 <HAL_GetTick>
 8001b74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	f040 824b 	bne.w	800201a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2319      	movs	r3, #25
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	497f      	ldr	r1, [pc, #508]	; (8001d8c <HAL_I2C_Master_Receive+0x234>)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fb9e 	bl	80022d0 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e23e      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_I2C_Master_Receive+0x54>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e237      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d007      	beq.n	8001bd2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2222      	movs	r2, #34	; 0x22
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2210      	movs	r2, #16
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	893a      	ldrh	r2, [r7, #8]
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a5f      	ldr	r2, [pc, #380]	; (8001d90 <HAL_I2C_Master_Receive+0x238>)
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c14:	8979      	ldrh	r1, [r7, #10]
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 fa8a 	bl	8002134 <I2C_MasterRequestRead>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1f8      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d113      	bne.n	8001c5a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e1cc      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d11e      	bne.n	8001ca0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c72:	b672      	cpsid	i
}
 8001c74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c9c:	b662      	cpsie	i
}
 8001c9e:	e035      	b.n	8001d0c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d11e      	bne.n	8001ce6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ce2:	b662      	cpsie	i
}
 8001ce4:	e012      	b.n	8001d0c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001d0c:	e172      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	f200 811f 	bhi.w	8001f56 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d123      	bne.n	8001d68 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 fc7d 	bl	8002624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e173      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d66:	e145      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d152      	bne.n	8001e16 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	2200      	movs	r2, #0
 8001d78:	4906      	ldr	r1, [pc, #24]	; (8001d94 <HAL_I2C_Master_Receive+0x23c>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 faa8 	bl	80022d0 <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e148      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
 8001d8a:	bf00      	nop
 8001d8c:	00100002 	.word	0x00100002
 8001d90:	ffff0000 	.word	0xffff0000
 8001d94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dde:	b662      	cpsie	i
}
 8001de0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e14:	e0ee      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4981      	ldr	r1, [pc, #516]	; (8002024 <HAL_I2C_Master_Receive+0x4cc>)
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fa55 	bl	80022d0 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0f5      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e76:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <HAL_I2C_Master_Receive+0x4d0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	08db      	lsrs	r3, r3, #3
 8001e7c:	4a6b      	ldr	r2, [pc, #428]	; (800202c <HAL_I2C_Master_Receive+0x4d4>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0a1a      	lsrs	r2, r3, #8
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00da      	lsls	r2, r3, #3
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d118      	bne.n	8001ece <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f043 0220 	orr.w	r2, r3, #32
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ebe:	b662      	cpsie	i
}
 8001ec0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0a6      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d1d9      	bne.n	8001e90 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f1e:	b662      	cpsie	i
}
 8001f20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f54:	e04e      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fb62 	bl	8002624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e058      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d124      	bne.n	8001ff4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f ae88 	bne.w	8001d0e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800201a:	2302      	movs	r3, #2
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	00010004 	.word	0x00010004
 8002028:	20000000 	.word	0x20000000
 800202c:	14f8b589 	.word	0x14f8b589

08002030 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	460b      	mov	r3, r1
 800203e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d006      	beq.n	800205a <I2C_MasterRequestWrite+0x2a>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d003      	beq.n	800205a <I2C_MasterRequestWrite+0x2a>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002058:	d108      	bne.n	800206c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e00b      	b.n	8002084 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	2b12      	cmp	r3, #18
 8002072:	d107      	bne.n	8002084 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002082:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f91d 	bl	80022d0 <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020aa:	d103      	bne.n	80020b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e035      	b.n	8002124 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020c0:	d108      	bne.n	80020d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020c2:	897b      	ldrh	r3, [r7, #10]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	e01b      	b.n	800210c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020d4:	897b      	ldrh	r3, [r7, #10]
 80020d6:	11db      	asrs	r3, r3, #7
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f003 0306 	and.w	r3, r3, #6
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f063 030f 	orn	r3, r3, #15
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <I2C_MasterRequestWrite+0xfc>)
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f966 	bl	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e010      	b.n	8002124 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <I2C_MasterRequestWrite+0x100>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f956 	bl	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	00010008 	.word	0x00010008
 8002130:	00010002 	.word	0x00010002

08002134 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	460b      	mov	r3, r1
 8002142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002158:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d006      	beq.n	800216e <I2C_MasterRequestRead+0x3a>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d003      	beq.n	800216e <I2C_MasterRequestRead+0x3a>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800216c:	d108      	bne.n	8002180 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e00b      	b.n	8002198 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	2b11      	cmp	r3, #17
 8002186:	d107      	bne.n	8002198 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002196:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f893 	bl	80022d0 <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021be:	d103      	bne.n	80021c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e079      	b.n	80022c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021d4:	d108      	bne.n	80021e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	e05f      	b.n	80022a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021e8:	897b      	ldrh	r3, [r7, #10]
 80021ea:	11db      	asrs	r3, r3, #7
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0306 	and.w	r3, r3, #6
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f063 030f 	orn	r3, r3, #15
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4930      	ldr	r1, [pc, #192]	; (80022c8 <I2C_MasterRequestRead+0x194>)
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f8dc 	bl	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e054      	b.n	80022c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002216:	897b      	ldrh	r3, [r7, #10]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4929      	ldr	r1, [pc, #164]	; (80022cc <I2C_MasterRequestRead+0x198>)
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f8cc 	bl	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e044      	b.n	80022c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800225a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f831 	bl	80022d0 <I2C_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002282:	d103      	bne.n	800228c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e017      	b.n	80022c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002290:	897b      	ldrh	r3, [r7, #10]
 8002292:	11db      	asrs	r3, r3, #7
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 0306 	and.w	r3, r3, #6
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f063 030e 	orn	r3, r3, #14
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <I2C_MasterRequestRead+0x198>)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f888 	bl	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	00010008 	.word	0x00010008
 80022cc:	00010002 	.word	0x00010002

080022d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e0:	e048      	b.n	8002374 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d044      	beq.n	8002374 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7fe ff45 	bl	8001178 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d139      	bne.n	8002374 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	0c1b      	lsrs	r3, r3, #16
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10d      	bne.n	8002326 <I2C_WaitOnFlagUntilTimeout+0x56>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	43da      	mvns	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	e00c      	b.n	8002340 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	43da      	mvns	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4013      	ands	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	429a      	cmp	r2, r3
 8002344:	d116      	bne.n	8002374 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e023      	b.n	80023bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	0c1b      	lsrs	r3, r3, #16
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10d      	bne.n	800239a <I2C_WaitOnFlagUntilTimeout+0xca>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	43da      	mvns	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4013      	ands	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	e00c      	b.n	80023b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	43da      	mvns	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4013      	ands	r3, r2
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d093      	beq.n	80022e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d2:	e071      	b.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e2:	d123      	bne.n	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f043 0204 	orr.w	r2, r3, #4
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e067      	b.n	80024fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d041      	beq.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002434:	f7fe fea0 	bl	8001178 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d302      	bcc.n	800244a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d136      	bne.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d10c      	bne.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	e00b      	b.n	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	43da      	mvns	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4013      	ands	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e021      	b.n	80024fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10c      	bne.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	43da      	mvns	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4013      	ands	r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e00b      	b.n	80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4013      	ands	r3, r2
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf14      	ite	ne
 80024ee:	2301      	movne	r3, #1
 80024f0:	2300      	moveq	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f af6d 	bne.w	80023d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002510:	e034      	b.n	800257c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f8e3 	bl	80026de <I2C_IsAcknowledgeFailed>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e034      	b.n	800258c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d028      	beq.n	800257c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7fe fe25 	bl	8001178 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d11d      	bne.n	800257c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d016      	beq.n	800257c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e007      	b.n	800258c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b80      	cmp	r3, #128	; 0x80
 8002588:	d1c3      	bne.n	8002512 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a0:	e034      	b.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f89b 	bl	80026de <I2C_IsAcknowledgeFailed>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e034      	b.n	800261c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d028      	beq.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ba:	f7fe fddd 	bl	8001178 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d302      	bcc.n	80025d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d11d      	bne.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d016      	beq.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e007      	b.n	800261c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b04      	cmp	r3, #4
 8002618:	d1c3      	bne.n	80025a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002630:	e049      	b.n	80026c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b10      	cmp	r3, #16
 800263e:	d119      	bne.n	8002674 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0210 	mvn.w	r2, #16
 8002648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e030      	b.n	80026d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002674:	f7fe fd80 	bl	8001178 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	429a      	cmp	r2, r3
 8002682:	d302      	bcc.n	800268a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11d      	bne.n	80026c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d016      	beq.n	80026c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0220 	orr.w	r2, r3, #32
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e007      	b.n	80026d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d1ae      	bne.n	8002632 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f4:	d11b      	bne.n	800272e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f043 0204 	orr.w	r2, r3, #4
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
	...

0800273c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e26c      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8087 	beq.w	800286a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800275c:	4b92      	ldr	r3, [pc, #584]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b04      	cmp	r3, #4
 8002766:	d00c      	beq.n	8002782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002768:	4b8f      	ldr	r3, [pc, #572]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b08      	cmp	r3, #8
 8002772:	d112      	bne.n	800279a <HAL_RCC_OscConfig+0x5e>
 8002774:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d10b      	bne.n	800279a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d06c      	beq.n	8002868 <HAL_RCC_OscConfig+0x12c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d168      	bne.n	8002868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e246      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x76>
 80027a4:	4b80      	ldr	r3, [pc, #512]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7f      	ldr	r2, [pc, #508]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e02e      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x98>
 80027ba:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7a      	ldr	r2, [pc, #488]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e01d      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0xbc>
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6e      	ldr	r2, [pc, #440]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027f8:	4b6b      	ldr	r3, [pc, #428]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6a      	ldr	r2, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a67      	ldr	r2, [pc, #412]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7fe fcae 	bl	8001178 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe fcaa 	bl	8001178 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1fa      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0xe4>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe fc9a 	bl	8001178 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe fc96 	bl	8001178 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1e6      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x10c>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d063      	beq.n	800293e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002876:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b08      	cmp	r3, #8
 800288c:	d11c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x18c>
 800288e:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x176>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e1ba      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4939      	ldr	r1, [pc, #228]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	e03a      	b.n	800293e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d0:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fc4f 	bl	8001178 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe fc4b 	bl	8001178 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e19b      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4927      	ldr	r1, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
 8002910:	e015      	b.n	800293e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fc2e 	bl	8001178 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7fe fc2a 	bl	8001178 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e17a      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03a      	beq.n	80029c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d019      	beq.n	8002986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_RCC_OscConfig+0x274>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7fe fc0e 	bl	8001178 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7fe fc0a 	bl	8001178 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e15a      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800297e:	2001      	movs	r0, #1
 8002980:	f000 facc 	bl	8002f1c <RCC_Delay>
 8002984:	e01c      	b.n	80029c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_RCC_OscConfig+0x274>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7fe fbf4 	bl	8001178 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002992:	e00f      	b.n	80029b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe fbf0 	bl	8001178 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d908      	bls.n	80029b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e140      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	42420000 	.word	0x42420000
 80029b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	4b9e      	ldr	r3, [pc, #632]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e9      	bne.n	8002994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a6 	beq.w	8002b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b97      	ldr	r3, [pc, #604]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b94      	ldr	r3, [pc, #592]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a93      	ldr	r2, [pc, #588]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	61d3      	str	r3, [r2, #28]
 80029ea:	4b91      	ldr	r3, [pc, #580]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b8e      	ldr	r3, [pc, #568]	; (8002c34 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b8b      	ldr	r3, [pc, #556]	; (8002c34 <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a8a      	ldr	r2, [pc, #552]	; (8002c34 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fbb1 	bl	8001178 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe fbad 	bl	8001178 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0fd      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <HAL_RCC_OscConfig+0x4f8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x312>
 8002a40:	4b7b      	ldr	r3, [pc, #492]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a7a      	ldr	r2, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	e02d      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x334>
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4a75      	ldr	r2, [pc, #468]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6213      	str	r3, [r2, #32]
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x356>
 8002a78:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4a6c      	ldr	r2, [pc, #432]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6213      	str	r3, [r2, #32]
 8002a84:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a69      	ldr	r2, [pc, #420]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a92:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a66      	ldr	r2, [pc, #408]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	4b64      	ldr	r3, [pc, #400]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a63      	ldr	r2, [pc, #396]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d015      	beq.n	8002ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fb61 	bl	8001178 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fe fb5d 	bl	8001178 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0ab      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ee      	beq.n	8002aba <HAL_RCC_OscConfig+0x37e>
 8002adc:	e014      	b.n	8002b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fb4b 	bl	8001178 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fb47 	bl	8001178 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e095      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afc:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a47      	ldr	r2, [pc, #284]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8081 	beq.w	8002c26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d061      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d146      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCC_OscConfig+0x4fc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fb1b 	bl	8001178 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe fb17 	bl	8001178 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e067      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	492d      	ldr	r1, [pc, #180]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a19      	ldr	r1, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	430b      	orrs	r3, r1
 8002b92:	4927      	ldr	r1, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_RCC_OscConfig+0x4fc>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe faeb 	bl	8001178 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe fae7 	bl	8001178 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e037      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x46a>
 8002bc4:	e02f      	b.n	8002c26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <HAL_RCC_OscConfig+0x4fc>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fad4 	bl	8001178 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fad0 	bl	8001178 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e020      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x498>
 8002bf2:	e018      	b.n	8002c26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e013      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
 8002c38:	42420060 	.word	0x42420060

08002c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0d0      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d910      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4965      	ldr	r1, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ca2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d040      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d115      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e073      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06b      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4936      	ldr	r1, [pc, #216]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fa24 	bl	8001178 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7fe fa20 	bl	8001178 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e053      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d210      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4922      	ldr	r1, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 f821 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	5ccb      	ldrb	r3, [r1, r3]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1cc>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1d0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f982 	bl	80010f4 <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40021000 	.word	0x40021000
 8002e04:	080044b4 	.word	0x080044b4
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x30>
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0x36>
 8002e3e:	e027      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e42:	613b      	str	r3, [r7, #16]
      break;
 8002e44:	e027      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	0c9b      	lsrs	r3, r3, #18
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
 8002e52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d010      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	0c5b      	lsrs	r3, r3, #17
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e72:	fb02 f203 	mul.w	r2, r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e004      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	613b      	str	r3, [r7, #16]
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e92:	613b      	str	r3, [r7, #16]
      break;
 8002e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e96:	693b      	ldr	r3, [r7, #16]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	007a1200 	.word	0x007a1200
 8002eac:	080044cc 	.word	0x080044cc
 8002eb0:	080044dc 	.word	0x080044dc
 8002eb4:	003d0900 	.word	0x003d0900

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	20000000 	.word	0x20000000

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff2 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	080044c4 	.word	0x080044c4

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffde 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0adb      	lsrs	r3, r3, #11
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	080044c4 	.word	0x080044c4

08002f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <RCC_Delay+0x34>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <RCC_Delay+0x38>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a5b      	lsrs	r3, r3, #9
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f38:	bf00      	nop
  }
  while (Delay --);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	60fa      	str	r2, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f9      	bne.n	8002f38 <RCC_Delay+0x1c>
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	20000000 	.word	0x20000000
 8002f54:	10624dd3 	.word	0x10624dd3

08002f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e076      	b.n	8003058 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7a:	d009      	beq.n	8002f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
 8002f82:	e005      	b.n	8002f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd ff04 	bl	8000db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	ea42 0103 	orr.w	r1, r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	0c1a      	lsrs	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f002 0204 	and.w	r2, r2, #4
 8003036:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e042      	b.n	80030f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fee0 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f82b 	bl	8003100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800313a:	f023 030c 	bic.w	r3, r3, #12
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	430b      	orrs	r3, r1
 8003146:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2c      	ldr	r2, [pc, #176]	; (8003214 <UART_SetConfig+0x114>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d103      	bne.n	8003170 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7ff fec4 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	e002      	b.n	8003176 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003170:	f7ff feac 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8003174:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	441a      	add	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <UART_SetConfig+0x118>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	0119      	lsls	r1, r3, #4
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009a      	lsls	r2, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <UART_SetConfig+0x118>)
 80031ae:	fba3 0302 	umull	r0, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2064      	movs	r0, #100	; 0x64
 80031b6:	fb00 f303 	mul.w	r3, r0, r3
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	3332      	adds	r3, #50	; 0x32
 80031c0:	4a15      	ldr	r2, [pc, #84]	; (8003218 <UART_SetConfig+0x118>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031cc:	4419      	add	r1, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <UART_SetConfig+0x118>)
 80031e6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2064      	movs	r0, #100	; 0x64
 80031ee:	fb00 f303 	mul.w	r3, r0, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <UART_SetConfig+0x118>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	440a      	add	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40013800 	.word	0x40013800
 8003218:	51eb851f 	.word	0x51eb851f

0800321c <__errno>:
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <__errno+0x8>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	2000000c 	.word	0x2000000c

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	2600      	movs	r6, #0
 800322c:	4d0c      	ldr	r5, [pc, #48]	; (8003260 <__libc_init_array+0x38>)
 800322e:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 8003230:	1b64      	subs	r4, r4, r5
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	42a6      	cmp	r6, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	f001 f854 	bl	80042e4 <_init>
 800323c:	2600      	movs	r6, #0
 800323e:	4d0a      	ldr	r5, [pc, #40]	; (8003268 <__libc_init_array+0x40>)
 8003240:	4c0a      	ldr	r4, [pc, #40]	; (800326c <__libc_init_array+0x44>)
 8003242:	1b64      	subs	r4, r4, r5
 8003244:	10a4      	asrs	r4, r4, #2
 8003246:	42a6      	cmp	r6, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003250:	4798      	blx	r3
 8003252:	3601      	adds	r6, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	f855 3b04 	ldr.w	r3, [r5], #4
 800325a:	4798      	blx	r3
 800325c:	3601      	adds	r6, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	08004578 	.word	0x08004578
 8003264:	08004578 	.word	0x08004578
 8003268:	08004578 	.word	0x08004578
 800326c:	0800457c 	.word	0x0800457c

08003270 <memset>:
 8003270:	4603      	mov	r3, r0
 8003272:	4402      	add	r2, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <iprintf>:
 8003280:	b40f      	push	{r0, r1, r2, r3}
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <iprintf+0x2c>)
 8003284:	b513      	push	{r0, r1, r4, lr}
 8003286:	681c      	ldr	r4, [r3, #0]
 8003288:	b124      	cbz	r4, 8003294 <iprintf+0x14>
 800328a:	69a3      	ldr	r3, [r4, #24]
 800328c:	b913      	cbnz	r3, 8003294 <iprintf+0x14>
 800328e:	4620      	mov	r0, r4
 8003290:	f000 fa72 	bl	8003778 <__sinit>
 8003294:	ab05      	add	r3, sp, #20
 8003296:	4620      	mov	r0, r4
 8003298:	9a04      	ldr	r2, [sp, #16]
 800329a:	68a1      	ldr	r1, [r4, #8]
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	f000 fc3d 	bl	8003b1c <_vfiprintf_r>
 80032a2:	b002      	add	sp, #8
 80032a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a8:	b004      	add	sp, #16
 80032aa:	4770      	bx	lr
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <putchar>:
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <putchar+0x24>)
 80032b4:	4605      	mov	r5, r0
 80032b6:	681c      	ldr	r4, [r3, #0]
 80032b8:	b124      	cbz	r4, 80032c4 <putchar+0x14>
 80032ba:	69a3      	ldr	r3, [r4, #24]
 80032bc:	b913      	cbnz	r3, 80032c4 <putchar+0x14>
 80032be:	4620      	mov	r0, r4
 80032c0:	f000 fa5a 	bl	8003778 <__sinit>
 80032c4:	4629      	mov	r1, r5
 80032c6:	4620      	mov	r0, r4
 80032c8:	68a2      	ldr	r2, [r4, #8]
 80032ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ce:	f000 beeb 	b.w	80040a8 <_putc_r>
 80032d2:	bf00      	nop
 80032d4:	2000000c 	.word	0x2000000c

080032d8 <_puts_r>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	460e      	mov	r6, r1
 80032dc:	4605      	mov	r5, r0
 80032de:	b118      	cbz	r0, 80032e8 <_puts_r+0x10>
 80032e0:	6983      	ldr	r3, [r0, #24]
 80032e2:	b90b      	cbnz	r3, 80032e8 <_puts_r+0x10>
 80032e4:	f000 fa48 	bl	8003778 <__sinit>
 80032e8:	69ab      	ldr	r3, [r5, #24]
 80032ea:	68ac      	ldr	r4, [r5, #8]
 80032ec:	b913      	cbnz	r3, 80032f4 <_puts_r+0x1c>
 80032ee:	4628      	mov	r0, r5
 80032f0:	f000 fa42 	bl	8003778 <__sinit>
 80032f4:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <_puts_r+0xd0>)
 80032f6:	429c      	cmp	r4, r3
 80032f8:	d120      	bne.n	800333c <_puts_r+0x64>
 80032fa:	686c      	ldr	r4, [r5, #4]
 80032fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032fe:	07db      	lsls	r3, r3, #31
 8003300:	d405      	bmi.n	800330e <_puts_r+0x36>
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	0598      	lsls	r0, r3, #22
 8003306:	d402      	bmi.n	800330e <_puts_r+0x36>
 8003308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800330a:	f000 fad3 	bl	80038b4 <__retarget_lock_acquire_recursive>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	0719      	lsls	r1, r3, #28
 8003312:	d51d      	bpl.n	8003350 <_puts_r+0x78>
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	b1db      	cbz	r3, 8003350 <_puts_r+0x78>
 8003318:	3e01      	subs	r6, #1
 800331a:	68a3      	ldr	r3, [r4, #8]
 800331c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003320:	3b01      	subs	r3, #1
 8003322:	60a3      	str	r3, [r4, #8]
 8003324:	bb39      	cbnz	r1, 8003376 <_puts_r+0x9e>
 8003326:	2b00      	cmp	r3, #0
 8003328:	da38      	bge.n	800339c <_puts_r+0xc4>
 800332a:	4622      	mov	r2, r4
 800332c:	210a      	movs	r1, #10
 800332e:	4628      	mov	r0, r5
 8003330:	f000 f848 	bl	80033c4 <__swbuf_r>
 8003334:	3001      	adds	r0, #1
 8003336:	d011      	beq.n	800335c <_puts_r+0x84>
 8003338:	250a      	movs	r5, #10
 800333a:	e011      	b.n	8003360 <_puts_r+0x88>
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <_puts_r+0xd4>)
 800333e:	429c      	cmp	r4, r3
 8003340:	d101      	bne.n	8003346 <_puts_r+0x6e>
 8003342:	68ac      	ldr	r4, [r5, #8]
 8003344:	e7da      	b.n	80032fc <_puts_r+0x24>
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <_puts_r+0xd8>)
 8003348:	429c      	cmp	r4, r3
 800334a:	bf08      	it	eq
 800334c:	68ec      	ldreq	r4, [r5, #12]
 800334e:	e7d5      	b.n	80032fc <_puts_r+0x24>
 8003350:	4621      	mov	r1, r4
 8003352:	4628      	mov	r0, r5
 8003354:	f000 f888 	bl	8003468 <__swsetup_r>
 8003358:	2800      	cmp	r0, #0
 800335a:	d0dd      	beq.n	8003318 <_puts_r+0x40>
 800335c:	f04f 35ff 	mov.w	r5, #4294967295
 8003360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003362:	07da      	lsls	r2, r3, #31
 8003364:	d405      	bmi.n	8003372 <_puts_r+0x9a>
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	059b      	lsls	r3, r3, #22
 800336a:	d402      	bmi.n	8003372 <_puts_r+0x9a>
 800336c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336e:	f000 faa2 	bl	80038b6 <__retarget_lock_release_recursive>
 8003372:	4628      	mov	r0, r5
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	2b00      	cmp	r3, #0
 8003378:	da04      	bge.n	8003384 <_puts_r+0xac>
 800337a:	69a2      	ldr	r2, [r4, #24]
 800337c:	429a      	cmp	r2, r3
 800337e:	dc06      	bgt.n	800338e <_puts_r+0xb6>
 8003380:	290a      	cmp	r1, #10
 8003382:	d004      	beq.n	800338e <_puts_r+0xb6>
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	6022      	str	r2, [r4, #0]
 800338a:	7019      	strb	r1, [r3, #0]
 800338c:	e7c5      	b.n	800331a <_puts_r+0x42>
 800338e:	4622      	mov	r2, r4
 8003390:	4628      	mov	r0, r5
 8003392:	f000 f817 	bl	80033c4 <__swbuf_r>
 8003396:	3001      	adds	r0, #1
 8003398:	d1bf      	bne.n	800331a <_puts_r+0x42>
 800339a:	e7df      	b.n	800335c <_puts_r+0x84>
 800339c:	250a      	movs	r5, #10
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	6022      	str	r2, [r4, #0]
 80033a4:	701d      	strb	r5, [r3, #0]
 80033a6:	e7db      	b.n	8003360 <_puts_r+0x88>
 80033a8:	08004504 	.word	0x08004504
 80033ac:	08004524 	.word	0x08004524
 80033b0:	080044e4 	.word	0x080044e4

080033b4 <puts>:
 80033b4:	4b02      	ldr	r3, [pc, #8]	; (80033c0 <puts+0xc>)
 80033b6:	4601      	mov	r1, r0
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	f7ff bf8d 	b.w	80032d8 <_puts_r>
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <__swbuf_r>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	460e      	mov	r6, r1
 80033c8:	4614      	mov	r4, r2
 80033ca:	4605      	mov	r5, r0
 80033cc:	b118      	cbz	r0, 80033d6 <__swbuf_r+0x12>
 80033ce:	6983      	ldr	r3, [r0, #24]
 80033d0:	b90b      	cbnz	r3, 80033d6 <__swbuf_r+0x12>
 80033d2:	f000 f9d1 	bl	8003778 <__sinit>
 80033d6:	4b21      	ldr	r3, [pc, #132]	; (800345c <__swbuf_r+0x98>)
 80033d8:	429c      	cmp	r4, r3
 80033da:	d12b      	bne.n	8003434 <__swbuf_r+0x70>
 80033dc:	686c      	ldr	r4, [r5, #4]
 80033de:	69a3      	ldr	r3, [r4, #24]
 80033e0:	60a3      	str	r3, [r4, #8]
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	071a      	lsls	r2, r3, #28
 80033e6:	d52f      	bpl.n	8003448 <__swbuf_r+0x84>
 80033e8:	6923      	ldr	r3, [r4, #16]
 80033ea:	b36b      	cbz	r3, 8003448 <__swbuf_r+0x84>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	6820      	ldr	r0, [r4, #0]
 80033f0:	b2f6      	uxtb	r6, r6
 80033f2:	1ac0      	subs	r0, r0, r3
 80033f4:	6963      	ldr	r3, [r4, #20]
 80033f6:	4637      	mov	r7, r6
 80033f8:	4283      	cmp	r3, r0
 80033fa:	dc04      	bgt.n	8003406 <__swbuf_r+0x42>
 80033fc:	4621      	mov	r1, r4
 80033fe:	4628      	mov	r0, r5
 8003400:	f000 f926 	bl	8003650 <_fflush_r>
 8003404:	bb30      	cbnz	r0, 8003454 <__swbuf_r+0x90>
 8003406:	68a3      	ldr	r3, [r4, #8]
 8003408:	3001      	adds	r0, #1
 800340a:	3b01      	subs	r3, #1
 800340c:	60a3      	str	r3, [r4, #8]
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	6022      	str	r2, [r4, #0]
 8003414:	701e      	strb	r6, [r3, #0]
 8003416:	6963      	ldr	r3, [r4, #20]
 8003418:	4283      	cmp	r3, r0
 800341a:	d004      	beq.n	8003426 <__swbuf_r+0x62>
 800341c:	89a3      	ldrh	r3, [r4, #12]
 800341e:	07db      	lsls	r3, r3, #31
 8003420:	d506      	bpl.n	8003430 <__swbuf_r+0x6c>
 8003422:	2e0a      	cmp	r6, #10
 8003424:	d104      	bne.n	8003430 <__swbuf_r+0x6c>
 8003426:	4621      	mov	r1, r4
 8003428:	4628      	mov	r0, r5
 800342a:	f000 f911 	bl	8003650 <_fflush_r>
 800342e:	b988      	cbnz	r0, 8003454 <__swbuf_r+0x90>
 8003430:	4638      	mov	r0, r7
 8003432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <__swbuf_r+0x9c>)
 8003436:	429c      	cmp	r4, r3
 8003438:	d101      	bne.n	800343e <__swbuf_r+0x7a>
 800343a:	68ac      	ldr	r4, [r5, #8]
 800343c:	e7cf      	b.n	80033de <__swbuf_r+0x1a>
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <__swbuf_r+0xa0>)
 8003440:	429c      	cmp	r4, r3
 8003442:	bf08      	it	eq
 8003444:	68ec      	ldreq	r4, [r5, #12]
 8003446:	e7ca      	b.n	80033de <__swbuf_r+0x1a>
 8003448:	4621      	mov	r1, r4
 800344a:	4628      	mov	r0, r5
 800344c:	f000 f80c 	bl	8003468 <__swsetup_r>
 8003450:	2800      	cmp	r0, #0
 8003452:	d0cb      	beq.n	80033ec <__swbuf_r+0x28>
 8003454:	f04f 37ff 	mov.w	r7, #4294967295
 8003458:	e7ea      	b.n	8003430 <__swbuf_r+0x6c>
 800345a:	bf00      	nop
 800345c:	08004504 	.word	0x08004504
 8003460:	08004524 	.word	0x08004524
 8003464:	080044e4 	.word	0x080044e4

08003468 <__swsetup_r>:
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <__swsetup_r+0xcc>)
 800346a:	b570      	push	{r4, r5, r6, lr}
 800346c:	681d      	ldr	r5, [r3, #0]
 800346e:	4606      	mov	r6, r0
 8003470:	460c      	mov	r4, r1
 8003472:	b125      	cbz	r5, 800347e <__swsetup_r+0x16>
 8003474:	69ab      	ldr	r3, [r5, #24]
 8003476:	b913      	cbnz	r3, 800347e <__swsetup_r+0x16>
 8003478:	4628      	mov	r0, r5
 800347a:	f000 f97d 	bl	8003778 <__sinit>
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <__swsetup_r+0xd0>)
 8003480:	429c      	cmp	r4, r3
 8003482:	d10f      	bne.n	80034a4 <__swsetup_r+0x3c>
 8003484:	686c      	ldr	r4, [r5, #4]
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800348c:	0719      	lsls	r1, r3, #28
 800348e:	d42c      	bmi.n	80034ea <__swsetup_r+0x82>
 8003490:	06dd      	lsls	r5, r3, #27
 8003492:	d411      	bmi.n	80034b8 <__swsetup_r+0x50>
 8003494:	2309      	movs	r3, #9
 8003496:	6033      	str	r3, [r6, #0]
 8003498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	81a3      	strh	r3, [r4, #12]
 80034a2:	e03e      	b.n	8003522 <__swsetup_r+0xba>
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <__swsetup_r+0xd4>)
 80034a6:	429c      	cmp	r4, r3
 80034a8:	d101      	bne.n	80034ae <__swsetup_r+0x46>
 80034aa:	68ac      	ldr	r4, [r5, #8]
 80034ac:	e7eb      	b.n	8003486 <__swsetup_r+0x1e>
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <__swsetup_r+0xd8>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	bf08      	it	eq
 80034b4:	68ec      	ldreq	r4, [r5, #12]
 80034b6:	e7e6      	b.n	8003486 <__swsetup_r+0x1e>
 80034b8:	0758      	lsls	r0, r3, #29
 80034ba:	d512      	bpl.n	80034e2 <__swsetup_r+0x7a>
 80034bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034be:	b141      	cbz	r1, 80034d2 <__swsetup_r+0x6a>
 80034c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034c4:	4299      	cmp	r1, r3
 80034c6:	d002      	beq.n	80034ce <__swsetup_r+0x66>
 80034c8:	4630      	mov	r0, r6
 80034ca:	f000 fa59 	bl	8003980 <_free_r>
 80034ce:	2300      	movs	r3, #0
 80034d0:	6363      	str	r3, [r4, #52]	; 0x34
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034d8:	81a3      	strh	r3, [r4, #12]
 80034da:	2300      	movs	r3, #0
 80034dc:	6063      	str	r3, [r4, #4]
 80034de:	6923      	ldr	r3, [r4, #16]
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	6923      	ldr	r3, [r4, #16]
 80034ec:	b94b      	cbnz	r3, 8003502 <__swsetup_r+0x9a>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f8:	d003      	beq.n	8003502 <__swsetup_r+0x9a>
 80034fa:	4621      	mov	r1, r4
 80034fc:	4630      	mov	r0, r6
 80034fe:	f000 f9ff 	bl	8003900 <__smakebuf_r>
 8003502:	89a0      	ldrh	r0, [r4, #12]
 8003504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003508:	f010 0301 	ands.w	r3, r0, #1
 800350c:	d00a      	beq.n	8003524 <__swsetup_r+0xbc>
 800350e:	2300      	movs	r3, #0
 8003510:	60a3      	str	r3, [r4, #8]
 8003512:	6963      	ldr	r3, [r4, #20]
 8003514:	425b      	negs	r3, r3
 8003516:	61a3      	str	r3, [r4, #24]
 8003518:	6923      	ldr	r3, [r4, #16]
 800351a:	b943      	cbnz	r3, 800352e <__swsetup_r+0xc6>
 800351c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003520:	d1ba      	bne.n	8003498 <__swsetup_r+0x30>
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	0781      	lsls	r1, r0, #30
 8003526:	bf58      	it	pl
 8003528:	6963      	ldrpl	r3, [r4, #20]
 800352a:	60a3      	str	r3, [r4, #8]
 800352c:	e7f4      	b.n	8003518 <__swsetup_r+0xb0>
 800352e:	2000      	movs	r0, #0
 8003530:	e7f7      	b.n	8003522 <__swsetup_r+0xba>
 8003532:	bf00      	nop
 8003534:	2000000c 	.word	0x2000000c
 8003538:	08004504 	.word	0x08004504
 800353c:	08004524 	.word	0x08004524
 8003540:	080044e4 	.word	0x080044e4

08003544 <__sflush_r>:
 8003544:	898a      	ldrh	r2, [r1, #12]
 8003546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800354a:	4605      	mov	r5, r0
 800354c:	0710      	lsls	r0, r2, #28
 800354e:	460c      	mov	r4, r1
 8003550:	d458      	bmi.n	8003604 <__sflush_r+0xc0>
 8003552:	684b      	ldr	r3, [r1, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	dc05      	bgt.n	8003564 <__sflush_r+0x20>
 8003558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	dc02      	bgt.n	8003564 <__sflush_r+0x20>
 800355e:	2000      	movs	r0, #0
 8003560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003566:	2e00      	cmp	r6, #0
 8003568:	d0f9      	beq.n	800355e <__sflush_r+0x1a>
 800356a:	2300      	movs	r3, #0
 800356c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003570:	682f      	ldr	r7, [r5, #0]
 8003572:	602b      	str	r3, [r5, #0]
 8003574:	d032      	beq.n	80035dc <__sflush_r+0x98>
 8003576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	075a      	lsls	r2, r3, #29
 800357c:	d505      	bpl.n	800358a <__sflush_r+0x46>
 800357e:	6863      	ldr	r3, [r4, #4]
 8003580:	1ac0      	subs	r0, r0, r3
 8003582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003584:	b10b      	cbz	r3, 800358a <__sflush_r+0x46>
 8003586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003588:	1ac0      	subs	r0, r0, r3
 800358a:	2300      	movs	r3, #0
 800358c:	4602      	mov	r2, r0
 800358e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003590:	4628      	mov	r0, r5
 8003592:	6a21      	ldr	r1, [r4, #32]
 8003594:	47b0      	blx	r6
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	d106      	bne.n	80035aa <__sflush_r+0x66>
 800359c:	6829      	ldr	r1, [r5, #0]
 800359e:	291d      	cmp	r1, #29
 80035a0:	d82c      	bhi.n	80035fc <__sflush_r+0xb8>
 80035a2:	4a2a      	ldr	r2, [pc, #168]	; (800364c <__sflush_r+0x108>)
 80035a4:	40ca      	lsrs	r2, r1
 80035a6:	07d6      	lsls	r6, r2, #31
 80035a8:	d528      	bpl.n	80035fc <__sflush_r+0xb8>
 80035aa:	2200      	movs	r2, #0
 80035ac:	6062      	str	r2, [r4, #4]
 80035ae:	6922      	ldr	r2, [r4, #16]
 80035b0:	04d9      	lsls	r1, r3, #19
 80035b2:	6022      	str	r2, [r4, #0]
 80035b4:	d504      	bpl.n	80035c0 <__sflush_r+0x7c>
 80035b6:	1c42      	adds	r2, r0, #1
 80035b8:	d101      	bne.n	80035be <__sflush_r+0x7a>
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	b903      	cbnz	r3, 80035c0 <__sflush_r+0x7c>
 80035be:	6560      	str	r0, [r4, #84]	; 0x54
 80035c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035c2:	602f      	str	r7, [r5, #0]
 80035c4:	2900      	cmp	r1, #0
 80035c6:	d0ca      	beq.n	800355e <__sflush_r+0x1a>
 80035c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035cc:	4299      	cmp	r1, r3
 80035ce:	d002      	beq.n	80035d6 <__sflush_r+0x92>
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 f9d5 	bl	8003980 <_free_r>
 80035d6:	2000      	movs	r0, #0
 80035d8:	6360      	str	r0, [r4, #52]	; 0x34
 80035da:	e7c1      	b.n	8003560 <__sflush_r+0x1c>
 80035dc:	6a21      	ldr	r1, [r4, #32]
 80035de:	2301      	movs	r3, #1
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b0      	blx	r6
 80035e4:	1c41      	adds	r1, r0, #1
 80035e6:	d1c7      	bne.n	8003578 <__sflush_r+0x34>
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0c4      	beq.n	8003578 <__sflush_r+0x34>
 80035ee:	2b1d      	cmp	r3, #29
 80035f0:	d001      	beq.n	80035f6 <__sflush_r+0xb2>
 80035f2:	2b16      	cmp	r3, #22
 80035f4:	d101      	bne.n	80035fa <__sflush_r+0xb6>
 80035f6:	602f      	str	r7, [r5, #0]
 80035f8:	e7b1      	b.n	800355e <__sflush_r+0x1a>
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003600:	81a3      	strh	r3, [r4, #12]
 8003602:	e7ad      	b.n	8003560 <__sflush_r+0x1c>
 8003604:	690f      	ldr	r7, [r1, #16]
 8003606:	2f00      	cmp	r7, #0
 8003608:	d0a9      	beq.n	800355e <__sflush_r+0x1a>
 800360a:	0793      	lsls	r3, r2, #30
 800360c:	bf18      	it	ne
 800360e:	2300      	movne	r3, #0
 8003610:	680e      	ldr	r6, [r1, #0]
 8003612:	bf08      	it	eq
 8003614:	694b      	ldreq	r3, [r1, #20]
 8003616:	eba6 0807 	sub.w	r8, r6, r7
 800361a:	600f      	str	r7, [r1, #0]
 800361c:	608b      	str	r3, [r1, #8]
 800361e:	f1b8 0f00 	cmp.w	r8, #0
 8003622:	dd9c      	ble.n	800355e <__sflush_r+0x1a>
 8003624:	4643      	mov	r3, r8
 8003626:	463a      	mov	r2, r7
 8003628:	4628      	mov	r0, r5
 800362a:	6a21      	ldr	r1, [r4, #32]
 800362c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800362e:	47b0      	blx	r6
 8003630:	2800      	cmp	r0, #0
 8003632:	dc06      	bgt.n	8003642 <__sflush_r+0xfe>
 8003634:	89a3      	ldrh	r3, [r4, #12]
 8003636:	f04f 30ff 	mov.w	r0, #4294967295
 800363a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800363e:	81a3      	strh	r3, [r4, #12]
 8003640:	e78e      	b.n	8003560 <__sflush_r+0x1c>
 8003642:	4407      	add	r7, r0
 8003644:	eba8 0800 	sub.w	r8, r8, r0
 8003648:	e7e9      	b.n	800361e <__sflush_r+0xda>
 800364a:	bf00      	nop
 800364c:	20400001 	.word	0x20400001

08003650 <_fflush_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	690b      	ldr	r3, [r1, #16]
 8003654:	4605      	mov	r5, r0
 8003656:	460c      	mov	r4, r1
 8003658:	b913      	cbnz	r3, 8003660 <_fflush_r+0x10>
 800365a:	2500      	movs	r5, #0
 800365c:	4628      	mov	r0, r5
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	b118      	cbz	r0, 800366a <_fflush_r+0x1a>
 8003662:	6983      	ldr	r3, [r0, #24]
 8003664:	b90b      	cbnz	r3, 800366a <_fflush_r+0x1a>
 8003666:	f000 f887 	bl	8003778 <__sinit>
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <_fflush_r+0x6c>)
 800366c:	429c      	cmp	r4, r3
 800366e:	d11b      	bne.n	80036a8 <_fflush_r+0x58>
 8003670:	686c      	ldr	r4, [r5, #4]
 8003672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ef      	beq.n	800365a <_fflush_r+0xa>
 800367a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800367c:	07d0      	lsls	r0, r2, #31
 800367e:	d404      	bmi.n	800368a <_fflush_r+0x3a>
 8003680:	0599      	lsls	r1, r3, #22
 8003682:	d402      	bmi.n	800368a <_fflush_r+0x3a>
 8003684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003686:	f000 f915 	bl	80038b4 <__retarget_lock_acquire_recursive>
 800368a:	4628      	mov	r0, r5
 800368c:	4621      	mov	r1, r4
 800368e:	f7ff ff59 	bl	8003544 <__sflush_r>
 8003692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003694:	4605      	mov	r5, r0
 8003696:	07da      	lsls	r2, r3, #31
 8003698:	d4e0      	bmi.n	800365c <_fflush_r+0xc>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	059b      	lsls	r3, r3, #22
 800369e:	d4dd      	bmi.n	800365c <_fflush_r+0xc>
 80036a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a2:	f000 f908 	bl	80038b6 <__retarget_lock_release_recursive>
 80036a6:	e7d9      	b.n	800365c <_fflush_r+0xc>
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <_fflush_r+0x70>)
 80036aa:	429c      	cmp	r4, r3
 80036ac:	d101      	bne.n	80036b2 <_fflush_r+0x62>
 80036ae:	68ac      	ldr	r4, [r5, #8]
 80036b0:	e7df      	b.n	8003672 <_fflush_r+0x22>
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <_fflush_r+0x74>)
 80036b4:	429c      	cmp	r4, r3
 80036b6:	bf08      	it	eq
 80036b8:	68ec      	ldreq	r4, [r5, #12]
 80036ba:	e7da      	b.n	8003672 <_fflush_r+0x22>
 80036bc:	08004504 	.word	0x08004504
 80036c0:	08004524 	.word	0x08004524
 80036c4:	080044e4 	.word	0x080044e4

080036c8 <std>:
 80036c8:	2300      	movs	r3, #0
 80036ca:	b510      	push	{r4, lr}
 80036cc:	4604      	mov	r4, r0
 80036ce:	e9c0 3300 	strd	r3, r3, [r0]
 80036d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036d6:	6083      	str	r3, [r0, #8]
 80036d8:	8181      	strh	r1, [r0, #12]
 80036da:	6643      	str	r3, [r0, #100]	; 0x64
 80036dc:	81c2      	strh	r2, [r0, #14]
 80036de:	6183      	str	r3, [r0, #24]
 80036e0:	4619      	mov	r1, r3
 80036e2:	2208      	movs	r2, #8
 80036e4:	305c      	adds	r0, #92	; 0x5c
 80036e6:	f7ff fdc3 	bl	8003270 <memset>
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <std+0x38>)
 80036ec:	6224      	str	r4, [r4, #32]
 80036ee:	6263      	str	r3, [r4, #36]	; 0x24
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <std+0x3c>)
 80036f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <std+0x40>)
 80036f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <std+0x44>)
 80036fa:	6323      	str	r3, [r4, #48]	; 0x30
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	08004159 	.word	0x08004159
 8003704:	0800417b 	.word	0x0800417b
 8003708:	080041b3 	.word	0x080041b3
 800370c:	080041d7 	.word	0x080041d7

08003710 <_cleanup_r>:
 8003710:	4901      	ldr	r1, [pc, #4]	; (8003718 <_cleanup_r+0x8>)
 8003712:	f000 b8af 	b.w	8003874 <_fwalk_reent>
 8003716:	bf00      	nop
 8003718:	08003651 	.word	0x08003651

0800371c <__sfmoreglue>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	2568      	movs	r5, #104	; 0x68
 8003720:	1e4a      	subs	r2, r1, #1
 8003722:	4355      	muls	r5, r2
 8003724:	460e      	mov	r6, r1
 8003726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800372a:	f000 f975 	bl	8003a18 <_malloc_r>
 800372e:	4604      	mov	r4, r0
 8003730:	b140      	cbz	r0, 8003744 <__sfmoreglue+0x28>
 8003732:	2100      	movs	r1, #0
 8003734:	e9c0 1600 	strd	r1, r6, [r0]
 8003738:	300c      	adds	r0, #12
 800373a:	60a0      	str	r0, [r4, #8]
 800373c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003740:	f7ff fd96 	bl	8003270 <memset>
 8003744:	4620      	mov	r0, r4
 8003746:	bd70      	pop	{r4, r5, r6, pc}

08003748 <__sfp_lock_acquire>:
 8003748:	4801      	ldr	r0, [pc, #4]	; (8003750 <__sfp_lock_acquire+0x8>)
 800374a:	f000 b8b3 	b.w	80038b4 <__retarget_lock_acquire_recursive>
 800374e:	bf00      	nop
 8003750:	20000198 	.word	0x20000198

08003754 <__sfp_lock_release>:
 8003754:	4801      	ldr	r0, [pc, #4]	; (800375c <__sfp_lock_release+0x8>)
 8003756:	f000 b8ae 	b.w	80038b6 <__retarget_lock_release_recursive>
 800375a:	bf00      	nop
 800375c:	20000198 	.word	0x20000198

08003760 <__sinit_lock_acquire>:
 8003760:	4801      	ldr	r0, [pc, #4]	; (8003768 <__sinit_lock_acquire+0x8>)
 8003762:	f000 b8a7 	b.w	80038b4 <__retarget_lock_acquire_recursive>
 8003766:	bf00      	nop
 8003768:	20000193 	.word	0x20000193

0800376c <__sinit_lock_release>:
 800376c:	4801      	ldr	r0, [pc, #4]	; (8003774 <__sinit_lock_release+0x8>)
 800376e:	f000 b8a2 	b.w	80038b6 <__retarget_lock_release_recursive>
 8003772:	bf00      	nop
 8003774:	20000193 	.word	0x20000193

08003778 <__sinit>:
 8003778:	b510      	push	{r4, lr}
 800377a:	4604      	mov	r4, r0
 800377c:	f7ff fff0 	bl	8003760 <__sinit_lock_acquire>
 8003780:	69a3      	ldr	r3, [r4, #24]
 8003782:	b11b      	cbz	r3, 800378c <__sinit+0x14>
 8003784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003788:	f7ff bff0 	b.w	800376c <__sinit_lock_release>
 800378c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003790:	6523      	str	r3, [r4, #80]	; 0x50
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <__sinit+0x68>)
 8003794:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <__sinit+0x6c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	62a2      	str	r2, [r4, #40]	; 0x28
 800379a:	42a3      	cmp	r3, r4
 800379c:	bf08      	it	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	4620      	mov	r0, r4
 80037a2:	bf08      	it	eq
 80037a4:	61a3      	streq	r3, [r4, #24]
 80037a6:	f000 f81f 	bl	80037e8 <__sfp>
 80037aa:	6060      	str	r0, [r4, #4]
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 f81b 	bl	80037e8 <__sfp>
 80037b2:	60a0      	str	r0, [r4, #8]
 80037b4:	4620      	mov	r0, r4
 80037b6:	f000 f817 	bl	80037e8 <__sfp>
 80037ba:	2200      	movs	r2, #0
 80037bc:	2104      	movs	r1, #4
 80037be:	60e0      	str	r0, [r4, #12]
 80037c0:	6860      	ldr	r0, [r4, #4]
 80037c2:	f7ff ff81 	bl	80036c8 <std>
 80037c6:	2201      	movs	r2, #1
 80037c8:	2109      	movs	r1, #9
 80037ca:	68a0      	ldr	r0, [r4, #8]
 80037cc:	f7ff ff7c 	bl	80036c8 <std>
 80037d0:	2202      	movs	r2, #2
 80037d2:	2112      	movs	r1, #18
 80037d4:	68e0      	ldr	r0, [r4, #12]
 80037d6:	f7ff ff77 	bl	80036c8 <std>
 80037da:	2301      	movs	r3, #1
 80037dc:	61a3      	str	r3, [r4, #24]
 80037de:	e7d1      	b.n	8003784 <__sinit+0xc>
 80037e0:	080044e0 	.word	0x080044e0
 80037e4:	08003711 	.word	0x08003711

080037e8 <__sfp>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	4607      	mov	r7, r0
 80037ec:	f7ff ffac 	bl	8003748 <__sfp_lock_acquire>
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <__sfp+0x84>)
 80037f2:	681e      	ldr	r6, [r3, #0]
 80037f4:	69b3      	ldr	r3, [r6, #24]
 80037f6:	b913      	cbnz	r3, 80037fe <__sfp+0x16>
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7ff ffbd 	bl	8003778 <__sinit>
 80037fe:	3648      	adds	r6, #72	; 0x48
 8003800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003804:	3b01      	subs	r3, #1
 8003806:	d503      	bpl.n	8003810 <__sfp+0x28>
 8003808:	6833      	ldr	r3, [r6, #0]
 800380a:	b30b      	cbz	r3, 8003850 <__sfp+0x68>
 800380c:	6836      	ldr	r6, [r6, #0]
 800380e:	e7f7      	b.n	8003800 <__sfp+0x18>
 8003810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003814:	b9d5      	cbnz	r5, 800384c <__sfp+0x64>
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <__sfp+0x88>)
 8003818:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800381c:	60e3      	str	r3, [r4, #12]
 800381e:	6665      	str	r5, [r4, #100]	; 0x64
 8003820:	f000 f847 	bl	80038b2 <__retarget_lock_init_recursive>
 8003824:	f7ff ff96 	bl	8003754 <__sfp_lock_release>
 8003828:	2208      	movs	r2, #8
 800382a:	4629      	mov	r1, r5
 800382c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003834:	6025      	str	r5, [r4, #0]
 8003836:	61a5      	str	r5, [r4, #24]
 8003838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800383c:	f7ff fd18 	bl	8003270 <memset>
 8003840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003848:	4620      	mov	r0, r4
 800384a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800384c:	3468      	adds	r4, #104	; 0x68
 800384e:	e7d9      	b.n	8003804 <__sfp+0x1c>
 8003850:	2104      	movs	r1, #4
 8003852:	4638      	mov	r0, r7
 8003854:	f7ff ff62 	bl	800371c <__sfmoreglue>
 8003858:	4604      	mov	r4, r0
 800385a:	6030      	str	r0, [r6, #0]
 800385c:	2800      	cmp	r0, #0
 800385e:	d1d5      	bne.n	800380c <__sfp+0x24>
 8003860:	f7ff ff78 	bl	8003754 <__sfp_lock_release>
 8003864:	230c      	movs	r3, #12
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	e7ee      	b.n	8003848 <__sfp+0x60>
 800386a:	bf00      	nop
 800386c:	080044e0 	.word	0x080044e0
 8003870:	ffff0001 	.word	0xffff0001

08003874 <_fwalk_reent>:
 8003874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003878:	4606      	mov	r6, r0
 800387a:	4688      	mov	r8, r1
 800387c:	2700      	movs	r7, #0
 800387e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003886:	f1b9 0901 	subs.w	r9, r9, #1
 800388a:	d505      	bpl.n	8003898 <_fwalk_reent+0x24>
 800388c:	6824      	ldr	r4, [r4, #0]
 800388e:	2c00      	cmp	r4, #0
 8003890:	d1f7      	bne.n	8003882 <_fwalk_reent+0xe>
 8003892:	4638      	mov	r0, r7
 8003894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003898:	89ab      	ldrh	r3, [r5, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d907      	bls.n	80038ae <_fwalk_reent+0x3a>
 800389e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038a2:	3301      	adds	r3, #1
 80038a4:	d003      	beq.n	80038ae <_fwalk_reent+0x3a>
 80038a6:	4629      	mov	r1, r5
 80038a8:	4630      	mov	r0, r6
 80038aa:	47c0      	blx	r8
 80038ac:	4307      	orrs	r7, r0
 80038ae:	3568      	adds	r5, #104	; 0x68
 80038b0:	e7e9      	b.n	8003886 <_fwalk_reent+0x12>

080038b2 <__retarget_lock_init_recursive>:
 80038b2:	4770      	bx	lr

080038b4 <__retarget_lock_acquire_recursive>:
 80038b4:	4770      	bx	lr

080038b6 <__retarget_lock_release_recursive>:
 80038b6:	4770      	bx	lr

080038b8 <__swhatbuf_r>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	460e      	mov	r6, r1
 80038bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c0:	4614      	mov	r4, r2
 80038c2:	2900      	cmp	r1, #0
 80038c4:	461d      	mov	r5, r3
 80038c6:	b096      	sub	sp, #88	; 0x58
 80038c8:	da07      	bge.n	80038da <__swhatbuf_r+0x22>
 80038ca:	2300      	movs	r3, #0
 80038cc:	602b      	str	r3, [r5, #0]
 80038ce:	89b3      	ldrh	r3, [r6, #12]
 80038d0:	061a      	lsls	r2, r3, #24
 80038d2:	d410      	bmi.n	80038f6 <__swhatbuf_r+0x3e>
 80038d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d8:	e00e      	b.n	80038f8 <__swhatbuf_r+0x40>
 80038da:	466a      	mov	r2, sp
 80038dc:	f000 fca2 	bl	8004224 <_fstat_r>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	dbf2      	blt.n	80038ca <__swhatbuf_r+0x12>
 80038e4:	9a01      	ldr	r2, [sp, #4]
 80038e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038ee:	425a      	negs	r2, r3
 80038f0:	415a      	adcs	r2, r3
 80038f2:	602a      	str	r2, [r5, #0]
 80038f4:	e7ee      	b.n	80038d4 <__swhatbuf_r+0x1c>
 80038f6:	2340      	movs	r3, #64	; 0x40
 80038f8:	2000      	movs	r0, #0
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	b016      	add	sp, #88	; 0x58
 80038fe:	bd70      	pop	{r4, r5, r6, pc}

08003900 <__smakebuf_r>:
 8003900:	898b      	ldrh	r3, [r1, #12]
 8003902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003904:	079d      	lsls	r5, r3, #30
 8003906:	4606      	mov	r6, r0
 8003908:	460c      	mov	r4, r1
 800390a:	d507      	bpl.n	800391c <__smakebuf_r+0x1c>
 800390c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	6123      	str	r3, [r4, #16]
 8003914:	2301      	movs	r3, #1
 8003916:	6163      	str	r3, [r4, #20]
 8003918:	b002      	add	sp, #8
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	466a      	mov	r2, sp
 800391e:	ab01      	add	r3, sp, #4
 8003920:	f7ff ffca 	bl	80038b8 <__swhatbuf_r>
 8003924:	9900      	ldr	r1, [sp, #0]
 8003926:	4605      	mov	r5, r0
 8003928:	4630      	mov	r0, r6
 800392a:	f000 f875 	bl	8003a18 <_malloc_r>
 800392e:	b948      	cbnz	r0, 8003944 <__smakebuf_r+0x44>
 8003930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003934:	059a      	lsls	r2, r3, #22
 8003936:	d4ef      	bmi.n	8003918 <__smakebuf_r+0x18>
 8003938:	f023 0303 	bic.w	r3, r3, #3
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	81a3      	strh	r3, [r4, #12]
 8003942:	e7e3      	b.n	800390c <__smakebuf_r+0xc>
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <__smakebuf_r+0x7c>)
 8003946:	62b3      	str	r3, [r6, #40]	; 0x28
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	6020      	str	r0, [r4, #0]
 800394c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	9b00      	ldr	r3, [sp, #0]
 8003954:	6120      	str	r0, [r4, #16]
 8003956:	6163      	str	r3, [r4, #20]
 8003958:	9b01      	ldr	r3, [sp, #4]
 800395a:	b15b      	cbz	r3, 8003974 <__smakebuf_r+0x74>
 800395c:	4630      	mov	r0, r6
 800395e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003962:	f000 fc71 	bl	8004248 <_isatty_r>
 8003966:	b128      	cbz	r0, 8003974 <__smakebuf_r+0x74>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	89a0      	ldrh	r0, [r4, #12]
 8003976:	4305      	orrs	r5, r0
 8003978:	81a5      	strh	r5, [r4, #12]
 800397a:	e7cd      	b.n	8003918 <__smakebuf_r+0x18>
 800397c:	08003711 	.word	0x08003711

08003980 <_free_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4605      	mov	r5, r0
 8003984:	2900      	cmp	r1, #0
 8003986:	d043      	beq.n	8003a10 <_free_r+0x90>
 8003988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800398c:	1f0c      	subs	r4, r1, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	bfb8      	it	lt
 8003992:	18e4      	addlt	r4, r4, r3
 8003994:	f000 fc88 	bl	80042a8 <__malloc_lock>
 8003998:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <_free_r+0x94>)
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	4610      	mov	r0, r2
 800399e:	b933      	cbnz	r3, 80039ae <_free_r+0x2e>
 80039a0:	6063      	str	r3, [r4, #4]
 80039a2:	6014      	str	r4, [r2, #0]
 80039a4:	4628      	mov	r0, r5
 80039a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039aa:	f000 bc83 	b.w	80042b4 <__malloc_unlock>
 80039ae:	42a3      	cmp	r3, r4
 80039b0:	d90a      	bls.n	80039c8 <_free_r+0x48>
 80039b2:	6821      	ldr	r1, [r4, #0]
 80039b4:	1862      	adds	r2, r4, r1
 80039b6:	4293      	cmp	r3, r2
 80039b8:	bf01      	itttt	eq
 80039ba:	681a      	ldreq	r2, [r3, #0]
 80039bc:	685b      	ldreq	r3, [r3, #4]
 80039be:	1852      	addeq	r2, r2, r1
 80039c0:	6022      	streq	r2, [r4, #0]
 80039c2:	6063      	str	r3, [r4, #4]
 80039c4:	6004      	str	r4, [r0, #0]
 80039c6:	e7ed      	b.n	80039a4 <_free_r+0x24>
 80039c8:	461a      	mov	r2, r3
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	b10b      	cbz	r3, 80039d2 <_free_r+0x52>
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	d9fa      	bls.n	80039c8 <_free_r+0x48>
 80039d2:	6811      	ldr	r1, [r2, #0]
 80039d4:	1850      	adds	r0, r2, r1
 80039d6:	42a0      	cmp	r0, r4
 80039d8:	d10b      	bne.n	80039f2 <_free_r+0x72>
 80039da:	6820      	ldr	r0, [r4, #0]
 80039dc:	4401      	add	r1, r0
 80039de:	1850      	adds	r0, r2, r1
 80039e0:	4283      	cmp	r3, r0
 80039e2:	6011      	str	r1, [r2, #0]
 80039e4:	d1de      	bne.n	80039a4 <_free_r+0x24>
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4401      	add	r1, r0
 80039ec:	6011      	str	r1, [r2, #0]
 80039ee:	6053      	str	r3, [r2, #4]
 80039f0:	e7d8      	b.n	80039a4 <_free_r+0x24>
 80039f2:	d902      	bls.n	80039fa <_free_r+0x7a>
 80039f4:	230c      	movs	r3, #12
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	e7d4      	b.n	80039a4 <_free_r+0x24>
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	1821      	adds	r1, r4, r0
 80039fe:	428b      	cmp	r3, r1
 8003a00:	bf01      	itttt	eq
 8003a02:	6819      	ldreq	r1, [r3, #0]
 8003a04:	685b      	ldreq	r3, [r3, #4]
 8003a06:	1809      	addeq	r1, r1, r0
 8003a08:	6021      	streq	r1, [r4, #0]
 8003a0a:	6063      	str	r3, [r4, #4]
 8003a0c:	6054      	str	r4, [r2, #4]
 8003a0e:	e7c9      	b.n	80039a4 <_free_r+0x24>
 8003a10:	bd38      	pop	{r3, r4, r5, pc}
 8003a12:	bf00      	nop
 8003a14:	20000090 	.word	0x20000090

08003a18 <_malloc_r>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	1ccd      	adds	r5, r1, #3
 8003a1c:	f025 0503 	bic.w	r5, r5, #3
 8003a20:	3508      	adds	r5, #8
 8003a22:	2d0c      	cmp	r5, #12
 8003a24:	bf38      	it	cc
 8003a26:	250c      	movcc	r5, #12
 8003a28:	2d00      	cmp	r5, #0
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	db01      	blt.n	8003a32 <_malloc_r+0x1a>
 8003a2e:	42a9      	cmp	r1, r5
 8003a30:	d903      	bls.n	8003a3a <_malloc_r+0x22>
 8003a32:	230c      	movs	r3, #12
 8003a34:	6033      	str	r3, [r6, #0]
 8003a36:	2000      	movs	r0, #0
 8003a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a3a:	f000 fc35 	bl	80042a8 <__malloc_lock>
 8003a3e:	4921      	ldr	r1, [pc, #132]	; (8003ac4 <_malloc_r+0xac>)
 8003a40:	680a      	ldr	r2, [r1, #0]
 8003a42:	4614      	mov	r4, r2
 8003a44:	b99c      	cbnz	r4, 8003a6e <_malloc_r+0x56>
 8003a46:	4f20      	ldr	r7, [pc, #128]	; (8003ac8 <_malloc_r+0xb0>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b923      	cbnz	r3, 8003a56 <_malloc_r+0x3e>
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f000 fb72 	bl	8004138 <_sbrk_r>
 8003a54:	6038      	str	r0, [r7, #0]
 8003a56:	4629      	mov	r1, r5
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f000 fb6d 	bl	8004138 <_sbrk_r>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	d123      	bne.n	8003aaa <_malloc_r+0x92>
 8003a62:	230c      	movs	r3, #12
 8003a64:	4630      	mov	r0, r6
 8003a66:	6033      	str	r3, [r6, #0]
 8003a68:	f000 fc24 	bl	80042b4 <__malloc_unlock>
 8003a6c:	e7e3      	b.n	8003a36 <_malloc_r+0x1e>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	1b5b      	subs	r3, r3, r5
 8003a72:	d417      	bmi.n	8003aa4 <_malloc_r+0x8c>
 8003a74:	2b0b      	cmp	r3, #11
 8003a76:	d903      	bls.n	8003a80 <_malloc_r+0x68>
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	441c      	add	r4, r3
 8003a7c:	6025      	str	r5, [r4, #0]
 8003a7e:	e004      	b.n	8003a8a <_malloc_r+0x72>
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	42a2      	cmp	r2, r4
 8003a84:	bf0c      	ite	eq
 8003a86:	600b      	streq	r3, [r1, #0]
 8003a88:	6053      	strne	r3, [r2, #4]
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 fc12 	bl	80042b4 <__malloc_unlock>
 8003a90:	f104 000b 	add.w	r0, r4, #11
 8003a94:	1d23      	adds	r3, r4, #4
 8003a96:	f020 0007 	bic.w	r0, r0, #7
 8003a9a:	1ac2      	subs	r2, r0, r3
 8003a9c:	d0cc      	beq.n	8003a38 <_malloc_r+0x20>
 8003a9e:	1a1b      	subs	r3, r3, r0
 8003aa0:	50a3      	str	r3, [r4, r2]
 8003aa2:	e7c9      	b.n	8003a38 <_malloc_r+0x20>
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	6864      	ldr	r4, [r4, #4]
 8003aa8:	e7cc      	b.n	8003a44 <_malloc_r+0x2c>
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d0e3      	beq.n	8003a7c <_malloc_r+0x64>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 fb3e 	bl	8004138 <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d1dd      	bne.n	8003a7c <_malloc_r+0x64>
 8003ac0:	e7cf      	b.n	8003a62 <_malloc_r+0x4a>
 8003ac2:	bf00      	nop
 8003ac4:	20000090 	.word	0x20000090
 8003ac8:	20000094 	.word	0x20000094

08003acc <__sfputc_r>:
 8003acc:	6893      	ldr	r3, [r2, #8]
 8003ace:	b410      	push	{r4}
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	6093      	str	r3, [r2, #8]
 8003ad6:	da07      	bge.n	8003ae8 <__sfputc_r+0x1c>
 8003ad8:	6994      	ldr	r4, [r2, #24]
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	db01      	blt.n	8003ae2 <__sfputc_r+0x16>
 8003ade:	290a      	cmp	r1, #10
 8003ae0:	d102      	bne.n	8003ae8 <__sfputc_r+0x1c>
 8003ae2:	bc10      	pop	{r4}
 8003ae4:	f7ff bc6e 	b.w	80033c4 <__swbuf_r>
 8003ae8:	6813      	ldr	r3, [r2, #0]
 8003aea:	1c58      	adds	r0, r3, #1
 8003aec:	6010      	str	r0, [r2, #0]
 8003aee:	7019      	strb	r1, [r3, #0]
 8003af0:	4608      	mov	r0, r1
 8003af2:	bc10      	pop	{r4}
 8003af4:	4770      	bx	lr

08003af6 <__sfputs_r>:
 8003af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af8:	4606      	mov	r6, r0
 8003afa:	460f      	mov	r7, r1
 8003afc:	4614      	mov	r4, r2
 8003afe:	18d5      	adds	r5, r2, r3
 8003b00:	42ac      	cmp	r4, r5
 8003b02:	d101      	bne.n	8003b08 <__sfputs_r+0x12>
 8003b04:	2000      	movs	r0, #0
 8003b06:	e007      	b.n	8003b18 <__sfputs_r+0x22>
 8003b08:	463a      	mov	r2, r7
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b10:	f7ff ffdc 	bl	8003acc <__sfputc_r>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d1f3      	bne.n	8003b00 <__sfputs_r+0xa>
 8003b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b1c <_vfiprintf_r>:
 8003b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b20:	460d      	mov	r5, r1
 8003b22:	4614      	mov	r4, r2
 8003b24:	4698      	mov	r8, r3
 8003b26:	4606      	mov	r6, r0
 8003b28:	b09d      	sub	sp, #116	; 0x74
 8003b2a:	b118      	cbz	r0, 8003b34 <_vfiprintf_r+0x18>
 8003b2c:	6983      	ldr	r3, [r0, #24]
 8003b2e:	b90b      	cbnz	r3, 8003b34 <_vfiprintf_r+0x18>
 8003b30:	f7ff fe22 	bl	8003778 <__sinit>
 8003b34:	4b89      	ldr	r3, [pc, #548]	; (8003d5c <_vfiprintf_r+0x240>)
 8003b36:	429d      	cmp	r5, r3
 8003b38:	d11b      	bne.n	8003b72 <_vfiprintf_r+0x56>
 8003b3a:	6875      	ldr	r5, [r6, #4]
 8003b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b3e:	07d9      	lsls	r1, r3, #31
 8003b40:	d405      	bmi.n	8003b4e <_vfiprintf_r+0x32>
 8003b42:	89ab      	ldrh	r3, [r5, #12]
 8003b44:	059a      	lsls	r2, r3, #22
 8003b46:	d402      	bmi.n	8003b4e <_vfiprintf_r+0x32>
 8003b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b4a:	f7ff feb3 	bl	80038b4 <__retarget_lock_acquire_recursive>
 8003b4e:	89ab      	ldrh	r3, [r5, #12]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	d501      	bpl.n	8003b58 <_vfiprintf_r+0x3c>
 8003b54:	692b      	ldr	r3, [r5, #16]
 8003b56:	b9eb      	cbnz	r3, 8003b94 <_vfiprintf_r+0x78>
 8003b58:	4629      	mov	r1, r5
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f7ff fc84 	bl	8003468 <__swsetup_r>
 8003b60:	b1c0      	cbz	r0, 8003b94 <_vfiprintf_r+0x78>
 8003b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b64:	07dc      	lsls	r4, r3, #31
 8003b66:	d50e      	bpl.n	8003b86 <_vfiprintf_r+0x6a>
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	b01d      	add	sp, #116	; 0x74
 8003b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b72:	4b7b      	ldr	r3, [pc, #492]	; (8003d60 <_vfiprintf_r+0x244>)
 8003b74:	429d      	cmp	r5, r3
 8003b76:	d101      	bne.n	8003b7c <_vfiprintf_r+0x60>
 8003b78:	68b5      	ldr	r5, [r6, #8]
 8003b7a:	e7df      	b.n	8003b3c <_vfiprintf_r+0x20>
 8003b7c:	4b79      	ldr	r3, [pc, #484]	; (8003d64 <_vfiprintf_r+0x248>)
 8003b7e:	429d      	cmp	r5, r3
 8003b80:	bf08      	it	eq
 8003b82:	68f5      	ldreq	r5, [r6, #12]
 8003b84:	e7da      	b.n	8003b3c <_vfiprintf_r+0x20>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	0598      	lsls	r0, r3, #22
 8003b8a:	d4ed      	bmi.n	8003b68 <_vfiprintf_r+0x4c>
 8003b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b8e:	f7ff fe92 	bl	80038b6 <__retarget_lock_release_recursive>
 8003b92:	e7e9      	b.n	8003b68 <_vfiprintf_r+0x4c>
 8003b94:	2300      	movs	r3, #0
 8003b96:	9309      	str	r3, [sp, #36]	; 0x24
 8003b98:	2320      	movs	r3, #32
 8003b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b9e:	2330      	movs	r3, #48	; 0x30
 8003ba0:	f04f 0901 	mov.w	r9, #1
 8003ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ba8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003d68 <_vfiprintf_r+0x24c>
 8003bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	469a      	mov	sl, r3
 8003bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bb8:	b10a      	cbz	r2, 8003bbe <_vfiprintf_r+0xa2>
 8003bba:	2a25      	cmp	r2, #37	; 0x25
 8003bbc:	d1f9      	bne.n	8003bb2 <_vfiprintf_r+0x96>
 8003bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8003bc2:	d00b      	beq.n	8003bdc <_vfiprintf_r+0xc0>
 8003bc4:	465b      	mov	r3, fp
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f7ff ff93 	bl	8003af6 <__sfputs_r>
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	f000 80aa 	beq.w	8003d2a <_vfiprintf_r+0x20e>
 8003bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bd8:	445a      	add	r2, fp
 8003bda:	9209      	str	r2, [sp, #36]	; 0x24
 8003bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a2 	beq.w	8003d2a <_vfiprintf_r+0x20e>
 8003be6:	2300      	movs	r3, #0
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bf0:	f10a 0a01 	add.w	sl, sl, #1
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	9307      	str	r3, [sp, #28]
 8003bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8003bfe:	4654      	mov	r4, sl
 8003c00:	2205      	movs	r2, #5
 8003c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c06:	4858      	ldr	r0, [pc, #352]	; (8003d68 <_vfiprintf_r+0x24c>)
 8003c08:	f000 fb40 	bl	800428c <memchr>
 8003c0c:	9a04      	ldr	r2, [sp, #16]
 8003c0e:	b9d8      	cbnz	r0, 8003c48 <_vfiprintf_r+0x12c>
 8003c10:	06d1      	lsls	r1, r2, #27
 8003c12:	bf44      	itt	mi
 8003c14:	2320      	movmi	r3, #32
 8003c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c1a:	0713      	lsls	r3, r2, #28
 8003c1c:	bf44      	itt	mi
 8003c1e:	232b      	movmi	r3, #43	; 0x2b
 8003c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c24:	f89a 3000 	ldrb.w	r3, [sl]
 8003c28:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2a:	d015      	beq.n	8003c58 <_vfiprintf_r+0x13c>
 8003c2c:	4654      	mov	r4, sl
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f04f 0c0a 	mov.w	ip, #10
 8003c34:	9a07      	ldr	r2, [sp, #28]
 8003c36:	4621      	mov	r1, r4
 8003c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c3c:	3b30      	subs	r3, #48	; 0x30
 8003c3e:	2b09      	cmp	r3, #9
 8003c40:	d94e      	bls.n	8003ce0 <_vfiprintf_r+0x1c4>
 8003c42:	b1b0      	cbz	r0, 8003c72 <_vfiprintf_r+0x156>
 8003c44:	9207      	str	r2, [sp, #28]
 8003c46:	e014      	b.n	8003c72 <_vfiprintf_r+0x156>
 8003c48:	eba0 0308 	sub.w	r3, r0, r8
 8003c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	46a2      	mov	sl, r4
 8003c54:	9304      	str	r3, [sp, #16]
 8003c56:	e7d2      	b.n	8003bfe <_vfiprintf_r+0xe2>
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	1d19      	adds	r1, r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	9103      	str	r1, [sp, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bfbb      	ittet	lt
 8003c64:	425b      	neglt	r3, r3
 8003c66:	f042 0202 	orrlt.w	r2, r2, #2
 8003c6a:	9307      	strge	r3, [sp, #28]
 8003c6c:	9307      	strlt	r3, [sp, #28]
 8003c6e:	bfb8      	it	lt
 8003c70:	9204      	strlt	r2, [sp, #16]
 8003c72:	7823      	ldrb	r3, [r4, #0]
 8003c74:	2b2e      	cmp	r3, #46	; 0x2e
 8003c76:	d10c      	bne.n	8003c92 <_vfiprintf_r+0x176>
 8003c78:	7863      	ldrb	r3, [r4, #1]
 8003c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7c:	d135      	bne.n	8003cea <_vfiprintf_r+0x1ce>
 8003c7e:	9b03      	ldr	r3, [sp, #12]
 8003c80:	3402      	adds	r4, #2
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	9203      	str	r2, [sp, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bfb8      	it	lt
 8003c8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c90:	9305      	str	r3, [sp, #20]
 8003c92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003d78 <_vfiprintf_r+0x25c>
 8003c96:	2203      	movs	r2, #3
 8003c98:	4650      	mov	r0, sl
 8003c9a:	7821      	ldrb	r1, [r4, #0]
 8003c9c:	f000 faf6 	bl	800428c <memchr>
 8003ca0:	b140      	cbz	r0, 8003cb4 <_vfiprintf_r+0x198>
 8003ca2:	2340      	movs	r3, #64	; 0x40
 8003ca4:	eba0 000a 	sub.w	r0, r0, sl
 8003ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8003cac:	9b04      	ldr	r3, [sp, #16]
 8003cae:	3401      	adds	r4, #1
 8003cb0:	4303      	orrs	r3, r0
 8003cb2:	9304      	str	r3, [sp, #16]
 8003cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb8:	2206      	movs	r2, #6
 8003cba:	482c      	ldr	r0, [pc, #176]	; (8003d6c <_vfiprintf_r+0x250>)
 8003cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cc0:	f000 fae4 	bl	800428c <memchr>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d03f      	beq.n	8003d48 <_vfiprintf_r+0x22c>
 8003cc8:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <_vfiprintf_r+0x254>)
 8003cca:	bb1b      	cbnz	r3, 8003d14 <_vfiprintf_r+0x1f8>
 8003ccc:	9b03      	ldr	r3, [sp, #12]
 8003cce:	3307      	adds	r3, #7
 8003cd0:	f023 0307 	bic.w	r3, r3, #7
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cda:	443b      	add	r3, r7
 8003cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8003cde:	e767      	b.n	8003bb0 <_vfiprintf_r+0x94>
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ce8:	e7a5      	b.n	8003c36 <_vfiprintf_r+0x11a>
 8003cea:	2300      	movs	r3, #0
 8003cec:	f04f 0c0a 	mov.w	ip, #10
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	3401      	adds	r4, #1
 8003cf4:	9305      	str	r3, [sp, #20]
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cfc:	3a30      	subs	r2, #48	; 0x30
 8003cfe:	2a09      	cmp	r2, #9
 8003d00:	d903      	bls.n	8003d0a <_vfiprintf_r+0x1ee>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0c5      	beq.n	8003c92 <_vfiprintf_r+0x176>
 8003d06:	9105      	str	r1, [sp, #20]
 8003d08:	e7c3      	b.n	8003c92 <_vfiprintf_r+0x176>
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d12:	e7f0      	b.n	8003cf6 <_vfiprintf_r+0x1da>
 8003d14:	ab03      	add	r3, sp, #12
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	462a      	mov	r2, r5
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <_vfiprintf_r+0x258>)
 8003d1e:	a904      	add	r1, sp, #16
 8003d20:	f3af 8000 	nop.w
 8003d24:	4607      	mov	r7, r0
 8003d26:	1c78      	adds	r0, r7, #1
 8003d28:	d1d6      	bne.n	8003cd8 <_vfiprintf_r+0x1bc>
 8003d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d2c:	07d9      	lsls	r1, r3, #31
 8003d2e:	d405      	bmi.n	8003d3c <_vfiprintf_r+0x220>
 8003d30:	89ab      	ldrh	r3, [r5, #12]
 8003d32:	059a      	lsls	r2, r3, #22
 8003d34:	d402      	bmi.n	8003d3c <_vfiprintf_r+0x220>
 8003d36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d38:	f7ff fdbd 	bl	80038b6 <__retarget_lock_release_recursive>
 8003d3c:	89ab      	ldrh	r3, [r5, #12]
 8003d3e:	065b      	lsls	r3, r3, #25
 8003d40:	f53f af12 	bmi.w	8003b68 <_vfiprintf_r+0x4c>
 8003d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d46:	e711      	b.n	8003b6c <_vfiprintf_r+0x50>
 8003d48:	ab03      	add	r3, sp, #12
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	462a      	mov	r2, r5
 8003d4e:	4630      	mov	r0, r6
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <_vfiprintf_r+0x258>)
 8003d52:	a904      	add	r1, sp, #16
 8003d54:	f000 f882 	bl	8003e5c <_printf_i>
 8003d58:	e7e4      	b.n	8003d24 <_vfiprintf_r+0x208>
 8003d5a:	bf00      	nop
 8003d5c:	08004504 	.word	0x08004504
 8003d60:	08004524 	.word	0x08004524
 8003d64:	080044e4 	.word	0x080044e4
 8003d68:	08004544 	.word	0x08004544
 8003d6c:	0800454e 	.word	0x0800454e
 8003d70:	00000000 	.word	0x00000000
 8003d74:	08003af7 	.word	0x08003af7
 8003d78:	0800454a 	.word	0x0800454a

08003d7c <_printf_common>:
 8003d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	4616      	mov	r6, r2
 8003d82:	4699      	mov	r9, r3
 8003d84:	688a      	ldr	r2, [r1, #8]
 8003d86:	690b      	ldr	r3, [r1, #16]
 8003d88:	4607      	mov	r7, r0
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bfb8      	it	lt
 8003d8e:	4613      	movlt	r3, r2
 8003d90:	6033      	str	r3, [r6, #0]
 8003d92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d96:	460c      	mov	r4, r1
 8003d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d9c:	b10a      	cbz	r2, 8003da2 <_printf_common+0x26>
 8003d9e:	3301      	adds	r3, #1
 8003da0:	6033      	str	r3, [r6, #0]
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	0699      	lsls	r1, r3, #26
 8003da6:	bf42      	ittt	mi
 8003da8:	6833      	ldrmi	r3, [r6, #0]
 8003daa:	3302      	addmi	r3, #2
 8003dac:	6033      	strmi	r3, [r6, #0]
 8003dae:	6825      	ldr	r5, [r4, #0]
 8003db0:	f015 0506 	ands.w	r5, r5, #6
 8003db4:	d106      	bne.n	8003dc4 <_printf_common+0x48>
 8003db6:	f104 0a19 	add.w	sl, r4, #25
 8003dba:	68e3      	ldr	r3, [r4, #12]
 8003dbc:	6832      	ldr	r2, [r6, #0]
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	42ab      	cmp	r3, r5
 8003dc2:	dc28      	bgt.n	8003e16 <_printf_common+0x9a>
 8003dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dc8:	1e13      	subs	r3, r2, #0
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	bf18      	it	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	0692      	lsls	r2, r2, #26
 8003dd2:	d42d      	bmi.n	8003e30 <_printf_common+0xb4>
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ddc:	47c0      	blx	r8
 8003dde:	3001      	adds	r0, #1
 8003de0:	d020      	beq.n	8003e24 <_printf_common+0xa8>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	68e5      	ldr	r5, [r4, #12]
 8003de6:	f003 0306 	and.w	r3, r3, #6
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	bf18      	it	ne
 8003dee:	2500      	movne	r5, #0
 8003df0:	6832      	ldr	r2, [r6, #0]
 8003df2:	f04f 0600 	mov.w	r6, #0
 8003df6:	68a3      	ldr	r3, [r4, #8]
 8003df8:	bf08      	it	eq
 8003dfa:	1aad      	subeq	r5, r5, r2
 8003dfc:	6922      	ldr	r2, [r4, #16]
 8003dfe:	bf08      	it	eq
 8003e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e04:	4293      	cmp	r3, r2
 8003e06:	bfc4      	itt	gt
 8003e08:	1a9b      	subgt	r3, r3, r2
 8003e0a:	18ed      	addgt	r5, r5, r3
 8003e0c:	341a      	adds	r4, #26
 8003e0e:	42b5      	cmp	r5, r6
 8003e10:	d11a      	bne.n	8003e48 <_printf_common+0xcc>
 8003e12:	2000      	movs	r0, #0
 8003e14:	e008      	b.n	8003e28 <_printf_common+0xac>
 8003e16:	2301      	movs	r3, #1
 8003e18:	4652      	mov	r2, sl
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	47c0      	blx	r8
 8003e20:	3001      	adds	r0, #1
 8003e22:	d103      	bne.n	8003e2c <_printf_common+0xb0>
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2c:	3501      	adds	r5, #1
 8003e2e:	e7c4      	b.n	8003dba <_printf_common+0x3e>
 8003e30:	2030      	movs	r0, #48	; 0x30
 8003e32:	18e1      	adds	r1, r4, r3
 8003e34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e3e:	4422      	add	r2, r4
 8003e40:	3302      	adds	r3, #2
 8003e42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e46:	e7c5      	b.n	8003dd4 <_printf_common+0x58>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	4638      	mov	r0, r7
 8003e50:	47c0      	blx	r8
 8003e52:	3001      	adds	r0, #1
 8003e54:	d0e6      	beq.n	8003e24 <_printf_common+0xa8>
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7d9      	b.n	8003e0e <_printf_common+0x92>
	...

08003e5c <_printf_i>:
 8003e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	460c      	mov	r4, r1
 8003e62:	7e27      	ldrb	r7, [r4, #24]
 8003e64:	4691      	mov	r9, r2
 8003e66:	2f78      	cmp	r7, #120	; 0x78
 8003e68:	4680      	mov	r8, r0
 8003e6a:	469a      	mov	sl, r3
 8003e6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e72:	d807      	bhi.n	8003e84 <_printf_i+0x28>
 8003e74:	2f62      	cmp	r7, #98	; 0x62
 8003e76:	d80a      	bhi.n	8003e8e <_printf_i+0x32>
 8003e78:	2f00      	cmp	r7, #0
 8003e7a:	f000 80d9 	beq.w	8004030 <_printf_i+0x1d4>
 8003e7e:	2f58      	cmp	r7, #88	; 0x58
 8003e80:	f000 80a4 	beq.w	8003fcc <_printf_i+0x170>
 8003e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e8c:	e03a      	b.n	8003f04 <_printf_i+0xa8>
 8003e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e92:	2b15      	cmp	r3, #21
 8003e94:	d8f6      	bhi.n	8003e84 <_printf_i+0x28>
 8003e96:	a001      	add	r0, pc, #4	; (adr r0, 8003e9c <_printf_i+0x40>)
 8003e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e9c:	08003ef5 	.word	0x08003ef5
 8003ea0:	08003f09 	.word	0x08003f09
 8003ea4:	08003e85 	.word	0x08003e85
 8003ea8:	08003e85 	.word	0x08003e85
 8003eac:	08003e85 	.word	0x08003e85
 8003eb0:	08003e85 	.word	0x08003e85
 8003eb4:	08003f09 	.word	0x08003f09
 8003eb8:	08003e85 	.word	0x08003e85
 8003ebc:	08003e85 	.word	0x08003e85
 8003ec0:	08003e85 	.word	0x08003e85
 8003ec4:	08003e85 	.word	0x08003e85
 8003ec8:	08004017 	.word	0x08004017
 8003ecc:	08003f39 	.word	0x08003f39
 8003ed0:	08003ff9 	.word	0x08003ff9
 8003ed4:	08003e85 	.word	0x08003e85
 8003ed8:	08003e85 	.word	0x08003e85
 8003edc:	08004039 	.word	0x08004039
 8003ee0:	08003e85 	.word	0x08003e85
 8003ee4:	08003f39 	.word	0x08003f39
 8003ee8:	08003e85 	.word	0x08003e85
 8003eec:	08003e85 	.word	0x08003e85
 8003ef0:	08004001 	.word	0x08004001
 8003ef4:	680b      	ldr	r3, [r1, #0]
 8003ef6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003efa:	1d1a      	adds	r2, r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	600a      	str	r2, [r1, #0]
 8003f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0a4      	b.n	8004052 <_printf_i+0x1f6>
 8003f08:	6825      	ldr	r5, [r4, #0]
 8003f0a:	6808      	ldr	r0, [r1, #0]
 8003f0c:	062e      	lsls	r6, r5, #24
 8003f0e:	f100 0304 	add.w	r3, r0, #4
 8003f12:	d50a      	bpl.n	8003f2a <_printf_i+0xce>
 8003f14:	6805      	ldr	r5, [r0, #0]
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	da03      	bge.n	8003f24 <_printf_i+0xc8>
 8003f1c:	232d      	movs	r3, #45	; 0x2d
 8003f1e:	426d      	negs	r5, r5
 8003f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f24:	230a      	movs	r3, #10
 8003f26:	485e      	ldr	r0, [pc, #376]	; (80040a0 <_printf_i+0x244>)
 8003f28:	e019      	b.n	8003f5e <_printf_i+0x102>
 8003f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f2e:	6805      	ldr	r5, [r0, #0]
 8003f30:	600b      	str	r3, [r1, #0]
 8003f32:	bf18      	it	ne
 8003f34:	b22d      	sxthne	r5, r5
 8003f36:	e7ef      	b.n	8003f18 <_printf_i+0xbc>
 8003f38:	680b      	ldr	r3, [r1, #0]
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	1d18      	adds	r0, r3, #4
 8003f3e:	6008      	str	r0, [r1, #0]
 8003f40:	0628      	lsls	r0, r5, #24
 8003f42:	d501      	bpl.n	8003f48 <_printf_i+0xec>
 8003f44:	681d      	ldr	r5, [r3, #0]
 8003f46:	e002      	b.n	8003f4e <_printf_i+0xf2>
 8003f48:	0669      	lsls	r1, r5, #25
 8003f4a:	d5fb      	bpl.n	8003f44 <_printf_i+0xe8>
 8003f4c:	881d      	ldrh	r5, [r3, #0]
 8003f4e:	2f6f      	cmp	r7, #111	; 0x6f
 8003f50:	bf0c      	ite	eq
 8003f52:	2308      	moveq	r3, #8
 8003f54:	230a      	movne	r3, #10
 8003f56:	4852      	ldr	r0, [pc, #328]	; (80040a0 <_printf_i+0x244>)
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f5e:	6866      	ldr	r6, [r4, #4]
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	bfa8      	it	ge
 8003f64:	6821      	ldrge	r1, [r4, #0]
 8003f66:	60a6      	str	r6, [r4, #8]
 8003f68:	bfa4      	itt	ge
 8003f6a:	f021 0104 	bicge.w	r1, r1, #4
 8003f6e:	6021      	strge	r1, [r4, #0]
 8003f70:	b90d      	cbnz	r5, 8003f76 <_printf_i+0x11a>
 8003f72:	2e00      	cmp	r6, #0
 8003f74:	d04d      	beq.n	8004012 <_printf_i+0x1b6>
 8003f76:	4616      	mov	r6, r2
 8003f78:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f7c:	fb03 5711 	mls	r7, r3, r1, r5
 8003f80:	5dc7      	ldrb	r7, [r0, r7]
 8003f82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f86:	462f      	mov	r7, r5
 8003f88:	42bb      	cmp	r3, r7
 8003f8a:	460d      	mov	r5, r1
 8003f8c:	d9f4      	bls.n	8003f78 <_printf_i+0x11c>
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d10b      	bne.n	8003faa <_printf_i+0x14e>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	07df      	lsls	r7, r3, #31
 8003f96:	d508      	bpl.n	8003faa <_printf_i+0x14e>
 8003f98:	6923      	ldr	r3, [r4, #16]
 8003f9a:	6861      	ldr	r1, [r4, #4]
 8003f9c:	4299      	cmp	r1, r3
 8003f9e:	bfde      	ittt	le
 8003fa0:	2330      	movle	r3, #48	; 0x30
 8003fa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fa6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003faa:	1b92      	subs	r2, r2, r6
 8003fac:	6122      	str	r2, [r4, #16]
 8003fae:	464b      	mov	r3, r9
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	f8cd a000 	str.w	sl, [sp]
 8003fb8:	aa03      	add	r2, sp, #12
 8003fba:	f7ff fedf 	bl	8003d7c <_printf_common>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d14c      	bne.n	800405c <_printf_i+0x200>
 8003fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc6:	b004      	add	sp, #16
 8003fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fcc:	4834      	ldr	r0, [pc, #208]	; (80040a0 <_printf_i+0x244>)
 8003fce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fd2:	680e      	ldr	r6, [r1, #0]
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003fda:	061f      	lsls	r7, r3, #24
 8003fdc:	600e      	str	r6, [r1, #0]
 8003fde:	d514      	bpl.n	800400a <_printf_i+0x1ae>
 8003fe0:	07d9      	lsls	r1, r3, #31
 8003fe2:	bf44      	itt	mi
 8003fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8003fe8:	6023      	strmi	r3, [r4, #0]
 8003fea:	b91d      	cbnz	r5, 8003ff4 <_printf_i+0x198>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	f023 0320 	bic.w	r3, r3, #32
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	e7af      	b.n	8003f58 <_printf_i+0xfc>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	f043 0320 	orr.w	r3, r3, #32
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	2378      	movs	r3, #120	; 0x78
 8004002:	4828      	ldr	r0, [pc, #160]	; (80040a4 <_printf_i+0x248>)
 8004004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004008:	e7e3      	b.n	8003fd2 <_printf_i+0x176>
 800400a:	065e      	lsls	r6, r3, #25
 800400c:	bf48      	it	mi
 800400e:	b2ad      	uxthmi	r5, r5
 8004010:	e7e6      	b.n	8003fe0 <_printf_i+0x184>
 8004012:	4616      	mov	r6, r2
 8004014:	e7bb      	b.n	8003f8e <_printf_i+0x132>
 8004016:	680b      	ldr	r3, [r1, #0]
 8004018:	6826      	ldr	r6, [r4, #0]
 800401a:	1d1d      	adds	r5, r3, #4
 800401c:	6960      	ldr	r0, [r4, #20]
 800401e:	600d      	str	r5, [r1, #0]
 8004020:	0635      	lsls	r5, r6, #24
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	d501      	bpl.n	800402a <_printf_i+0x1ce>
 8004026:	6018      	str	r0, [r3, #0]
 8004028:	e002      	b.n	8004030 <_printf_i+0x1d4>
 800402a:	0671      	lsls	r1, r6, #25
 800402c:	d5fb      	bpl.n	8004026 <_printf_i+0x1ca>
 800402e:	8018      	strh	r0, [r3, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	4616      	mov	r6, r2
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	e7ba      	b.n	8003fae <_printf_i+0x152>
 8004038:	680b      	ldr	r3, [r1, #0]
 800403a:	1d1a      	adds	r2, r3, #4
 800403c:	600a      	str	r2, [r1, #0]
 800403e:	681e      	ldr	r6, [r3, #0]
 8004040:	2100      	movs	r1, #0
 8004042:	4630      	mov	r0, r6
 8004044:	6862      	ldr	r2, [r4, #4]
 8004046:	f000 f921 	bl	800428c <memchr>
 800404a:	b108      	cbz	r0, 8004050 <_printf_i+0x1f4>
 800404c:	1b80      	subs	r0, r0, r6
 800404e:	6060      	str	r0, [r4, #4]
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	6123      	str	r3, [r4, #16]
 8004054:	2300      	movs	r3, #0
 8004056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405a:	e7a8      	b.n	8003fae <_printf_i+0x152>
 800405c:	4632      	mov	r2, r6
 800405e:	4649      	mov	r1, r9
 8004060:	4640      	mov	r0, r8
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	47d0      	blx	sl
 8004066:	3001      	adds	r0, #1
 8004068:	d0ab      	beq.n	8003fc2 <_printf_i+0x166>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	079b      	lsls	r3, r3, #30
 800406e:	d413      	bmi.n	8004098 <_printf_i+0x23c>
 8004070:	68e0      	ldr	r0, [r4, #12]
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	4298      	cmp	r0, r3
 8004076:	bfb8      	it	lt
 8004078:	4618      	movlt	r0, r3
 800407a:	e7a4      	b.n	8003fc6 <_printf_i+0x16a>
 800407c:	2301      	movs	r3, #1
 800407e:	4632      	mov	r2, r6
 8004080:	4649      	mov	r1, r9
 8004082:	4640      	mov	r0, r8
 8004084:	47d0      	blx	sl
 8004086:	3001      	adds	r0, #1
 8004088:	d09b      	beq.n	8003fc2 <_printf_i+0x166>
 800408a:	3501      	adds	r5, #1
 800408c:	68e3      	ldr	r3, [r4, #12]
 800408e:	9903      	ldr	r1, [sp, #12]
 8004090:	1a5b      	subs	r3, r3, r1
 8004092:	42ab      	cmp	r3, r5
 8004094:	dcf2      	bgt.n	800407c <_printf_i+0x220>
 8004096:	e7eb      	b.n	8004070 <_printf_i+0x214>
 8004098:	2500      	movs	r5, #0
 800409a:	f104 0619 	add.w	r6, r4, #25
 800409e:	e7f5      	b.n	800408c <_printf_i+0x230>
 80040a0:	08004555 	.word	0x08004555
 80040a4:	08004566 	.word	0x08004566

080040a8 <_putc_r>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	460d      	mov	r5, r1
 80040ac:	4614      	mov	r4, r2
 80040ae:	4606      	mov	r6, r0
 80040b0:	b118      	cbz	r0, 80040ba <_putc_r+0x12>
 80040b2:	6983      	ldr	r3, [r0, #24]
 80040b4:	b90b      	cbnz	r3, 80040ba <_putc_r+0x12>
 80040b6:	f7ff fb5f 	bl	8003778 <__sinit>
 80040ba:	4b1c      	ldr	r3, [pc, #112]	; (800412c <_putc_r+0x84>)
 80040bc:	429c      	cmp	r4, r3
 80040be:	d124      	bne.n	800410a <_putc_r+0x62>
 80040c0:	6874      	ldr	r4, [r6, #4]
 80040c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040c4:	07d8      	lsls	r0, r3, #31
 80040c6:	d405      	bmi.n	80040d4 <_putc_r+0x2c>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	0599      	lsls	r1, r3, #22
 80040cc:	d402      	bmi.n	80040d4 <_putc_r+0x2c>
 80040ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040d0:	f7ff fbf0 	bl	80038b4 <__retarget_lock_acquire_recursive>
 80040d4:	68a3      	ldr	r3, [r4, #8]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	60a3      	str	r3, [r4, #8]
 80040dc:	da05      	bge.n	80040ea <_putc_r+0x42>
 80040de:	69a2      	ldr	r2, [r4, #24]
 80040e0:	4293      	cmp	r3, r2
 80040e2:	db1c      	blt.n	800411e <_putc_r+0x76>
 80040e4:	b2eb      	uxtb	r3, r5
 80040e6:	2b0a      	cmp	r3, #10
 80040e8:	d019      	beq.n	800411e <_putc_r+0x76>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	6022      	str	r2, [r4, #0]
 80040f0:	701d      	strb	r5, [r3, #0]
 80040f2:	b2ed      	uxtb	r5, r5
 80040f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040f6:	07da      	lsls	r2, r3, #31
 80040f8:	d405      	bmi.n	8004106 <_putc_r+0x5e>
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	059b      	lsls	r3, r3, #22
 80040fe:	d402      	bmi.n	8004106 <_putc_r+0x5e>
 8004100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004102:	f7ff fbd8 	bl	80038b6 <__retarget_lock_release_recursive>
 8004106:	4628      	mov	r0, r5
 8004108:	bd70      	pop	{r4, r5, r6, pc}
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <_putc_r+0x88>)
 800410c:	429c      	cmp	r4, r3
 800410e:	d101      	bne.n	8004114 <_putc_r+0x6c>
 8004110:	68b4      	ldr	r4, [r6, #8]
 8004112:	e7d6      	b.n	80040c2 <_putc_r+0x1a>
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <_putc_r+0x8c>)
 8004116:	429c      	cmp	r4, r3
 8004118:	bf08      	it	eq
 800411a:	68f4      	ldreq	r4, [r6, #12]
 800411c:	e7d1      	b.n	80040c2 <_putc_r+0x1a>
 800411e:	4629      	mov	r1, r5
 8004120:	4622      	mov	r2, r4
 8004122:	4630      	mov	r0, r6
 8004124:	f7ff f94e 	bl	80033c4 <__swbuf_r>
 8004128:	4605      	mov	r5, r0
 800412a:	e7e3      	b.n	80040f4 <_putc_r+0x4c>
 800412c:	08004504 	.word	0x08004504
 8004130:	08004524 	.word	0x08004524
 8004134:	080044e4 	.word	0x080044e4

08004138 <_sbrk_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	2300      	movs	r3, #0
 800413c:	4d05      	ldr	r5, [pc, #20]	; (8004154 <_sbrk_r+0x1c>)
 800413e:	4604      	mov	r4, r0
 8004140:	4608      	mov	r0, r1
 8004142:	602b      	str	r3, [r5, #0]
 8004144:	f7fc ff5e 	bl	8001004 <_sbrk>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_sbrk_r+0x1a>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	b103      	cbz	r3, 8004152 <_sbrk_r+0x1a>
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	2000019c 	.word	0x2000019c

08004158 <__sread>:
 8004158:	b510      	push	{r4, lr}
 800415a:	460c      	mov	r4, r1
 800415c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004160:	f000 f8ae 	bl	80042c0 <_read_r>
 8004164:	2800      	cmp	r0, #0
 8004166:	bfab      	itete	ge
 8004168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800416a:	89a3      	ldrhlt	r3, [r4, #12]
 800416c:	181b      	addge	r3, r3, r0
 800416e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004172:	bfac      	ite	ge
 8004174:	6563      	strge	r3, [r4, #84]	; 0x54
 8004176:	81a3      	strhlt	r3, [r4, #12]
 8004178:	bd10      	pop	{r4, pc}

0800417a <__swrite>:
 800417a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417e:	461f      	mov	r7, r3
 8004180:	898b      	ldrh	r3, [r1, #12]
 8004182:	4605      	mov	r5, r0
 8004184:	05db      	lsls	r3, r3, #23
 8004186:	460c      	mov	r4, r1
 8004188:	4616      	mov	r6, r2
 800418a:	d505      	bpl.n	8004198 <__swrite+0x1e>
 800418c:	2302      	movs	r3, #2
 800418e:	2200      	movs	r2, #0
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	f000 f868 	bl	8004268 <_lseek_r>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	4632      	mov	r2, r6
 800419c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a0:	81a3      	strh	r3, [r4, #12]
 80041a2:	4628      	mov	r0, r5
 80041a4:	463b      	mov	r3, r7
 80041a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ae:	f000 b817 	b.w	80041e0 <_write_r>

080041b2 <__sseek>:
 80041b2:	b510      	push	{r4, lr}
 80041b4:	460c      	mov	r4, r1
 80041b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ba:	f000 f855 	bl	8004268 <_lseek_r>
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	bf15      	itete	ne
 80041c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041ce:	81a3      	strheq	r3, [r4, #12]
 80041d0:	bf18      	it	ne
 80041d2:	81a3      	strhne	r3, [r4, #12]
 80041d4:	bd10      	pop	{r4, pc}

080041d6 <__sclose>:
 80041d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041da:	f000 b813 	b.w	8004204 <_close_r>
	...

080041e0 <_write_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	2200      	movs	r2, #0
 80041ea:	4d05      	ldr	r5, [pc, #20]	; (8004200 <_write_r+0x20>)
 80041ec:	602a      	str	r2, [r5, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f7fc febc 	bl	8000f6c <_write>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_write_r+0x1e>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_write_r+0x1e>
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	2000019c 	.word	0x2000019c

08004204 <_close_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	2300      	movs	r3, #0
 8004208:	4d05      	ldr	r5, [pc, #20]	; (8004220 <_close_r+0x1c>)
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7fc fec8 	bl	8000fa4 <_close>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_close_r+0x1a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_close_r+0x1a>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	2000019c 	.word	0x2000019c

08004224 <_fstat_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	2300      	movs	r3, #0
 8004228:	4d06      	ldr	r5, [pc, #24]	; (8004244 <_fstat_r+0x20>)
 800422a:	4604      	mov	r4, r0
 800422c:	4608      	mov	r0, r1
 800422e:	4611      	mov	r1, r2
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	f7fc fec2 	bl	8000fba <_fstat>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d102      	bne.n	8004240 <_fstat_r+0x1c>
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	b103      	cbz	r3, 8004240 <_fstat_r+0x1c>
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	2000019c 	.word	0x2000019c

08004248 <_isatty_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	2300      	movs	r3, #0
 800424c:	4d05      	ldr	r5, [pc, #20]	; (8004264 <_isatty_r+0x1c>)
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc fec0 	bl	8000fd8 <_isatty>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_isatty_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_isatty_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	2000019c 	.word	0x2000019c

08004268 <_lseek_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	2200      	movs	r2, #0
 8004272:	4d05      	ldr	r5, [pc, #20]	; (8004288 <_lseek_r+0x20>)
 8004274:	602a      	str	r2, [r5, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f7fc feb8 	bl	8000fec <_lseek>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_lseek_r+0x1e>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_lseek_r+0x1e>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	2000019c 	.word	0x2000019c

0800428c <memchr>:
 800428c:	4603      	mov	r3, r0
 800428e:	b510      	push	{r4, lr}
 8004290:	b2c9      	uxtb	r1, r1
 8004292:	4402      	add	r2, r0
 8004294:	4293      	cmp	r3, r2
 8004296:	4618      	mov	r0, r3
 8004298:	d101      	bne.n	800429e <memchr+0x12>
 800429a:	2000      	movs	r0, #0
 800429c:	e003      	b.n	80042a6 <memchr+0x1a>
 800429e:	7804      	ldrb	r4, [r0, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	428c      	cmp	r4, r1
 80042a4:	d1f6      	bne.n	8004294 <memchr+0x8>
 80042a6:	bd10      	pop	{r4, pc}

080042a8 <__malloc_lock>:
 80042a8:	4801      	ldr	r0, [pc, #4]	; (80042b0 <__malloc_lock+0x8>)
 80042aa:	f7ff bb03 	b.w	80038b4 <__retarget_lock_acquire_recursive>
 80042ae:	bf00      	nop
 80042b0:	20000194 	.word	0x20000194

080042b4 <__malloc_unlock>:
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <__malloc_unlock+0x8>)
 80042b6:	f7ff bafe 	b.w	80038b6 <__retarget_lock_release_recursive>
 80042ba:	bf00      	nop
 80042bc:	20000194 	.word	0x20000194

080042c0 <_read_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	2200      	movs	r2, #0
 80042ca:	4d05      	ldr	r5, [pc, #20]	; (80042e0 <_read_r+0x20>)
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fc fe2f 	bl	8000f32 <_read>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_read_r+0x1e>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_read_r+0x1e>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	2000019c 	.word	0x2000019c

080042e4 <_init>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr

080042f0 <_fini>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr
